{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/utils/axios.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/utils/axios.ts"],"sourcesContent":["import axios from 'axios';\n\n// 인증 토큰 가져오는 함수 (예시)\nfunction getAuthToken() {\n  return localStorage.getItem('accessToken');\n}\n\n// 로그아웃 처리 함수 (예시)\nfunction handleLogout() {\n  // 실제 구현: Redux dispatch(logout()), window.location = '/login', 등\n  window.location.href = '/login';\n}\n\n// Toast/Notification dispatch 함수 (예시)\nfunction showToast(message: string, type: 'error' | 'info' | 'success' = 'error') {\n  // 실제 구현: Redux dispatch(pushNotification) 또는 Toast 라이브러리 사용\n  // window.dispatchEvent(new CustomEvent('toast', { detail: { message, type } }));\n  // 임시: alert\n  alert(`[${type}] ${message}`);\n}\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3000', // 백엔드 서버 주소/포트에 맞게 수정\n  withCredentials: false,\n});\n\n// 재시도 로직 (최대 3회, exponential backoff)\napi.interceptors.response.use(undefined, async (error) => {\n  const config = error.config;\n  if (!config || config.__retryCount >= 3) {\n    // 3회 초과 시 에러 처리\n    showToast(error?.response?.data?.message || error.message || '네트워크 오류', 'error');\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      handleLogout();\n    }\n    return Promise.reject(error);\n  }\n  config.__retryCount = (config.__retryCount || 0) + 1;\n  // 네트워크 장애/타임아웃/5xx 등만 재시도\n  if (!error.response || error.response.status >= 500) {\n    const delay = Math.pow(2, config.__retryCount) * 200;\n    await new Promise((res) => setTimeout(res, delay));\n    return api(config);\n  }\n  // 401/403 등 인증 오류는 바로 로그아웃\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    showToast('인증이 만료되었습니다. 다시 로그인해 주세요.', 'error');\n    handleLogout();\n    return Promise.reject(error);\n  }\n  // 기타 에러\n  showToast(error?.response?.data?.message || error.message || '요청 실패', 'error');\n  return Promise.reject(error);\n});\n\n// 요청 인터셉터: 인증 토큰 자동 첨부\napi.interceptors.request.use(\n  (config) => {\n    const token = getAuthToken();\n    if (token) {\n      config.headers = config.headers || {};\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport default api; "],"version":3}