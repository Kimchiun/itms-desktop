9ff5e79cca0b44bc6a42c1bc1455c2f7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.listFolders = listFolders;
exports.getFoldersByParentId = getFoldersByParentId;
exports.addTestCaseToFolder = addTestCaseToFolder;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
async function createFolder(folderData) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query(`INSERT INTO folders (name, description, parent_id, sort_order, created_by) 
         VALUES ($1, $2, $3, $4, $5) RETURNING *`, [
        folderData.name,
        folderData.description,
        folderData.parentId,
        folderData.sortOrder || 0,
        folderData.createdBy
    ]);
    return rowToFolder(result.rows[0]);
}
async function getFolderById(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM folders WHERE id = $1', [id]);
    if (result.rows.length === 0)
        return null;
    return rowToFolder(result.rows[0]);
}
async function updateFolder(id, folderData) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const current = await getFolderById(id);
    if (!current)
        return null;
    const result = await pgClient.query(`UPDATE folders SET name=$1, description=$2, parent_id=$3, sort_order=$4, updated_at=NOW() WHERE id=$5 RETURNING *`, [
        folderData.name ?? current.name,
        folderData.description ?? current.description,
        folderData.parentId ?? current.parentId,
        folderData.sortOrder ?? current.sortOrder,
        id
    ]);
    if (result.rows.length === 0)
        return null;
    return rowToFolder(result.rows[0]);
}
async function deleteFolder(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    // 하위 폴더들을 먼저 삭제
    await pgClient.query('DELETE FROM folders WHERE parent_id = $1', [id]);
    // 테스트케이스들의 폴더 참조 제거
    await pgClient.query('UPDATE testcases SET folder_id = NULL WHERE folder_id = $1', [id]);
    // 폴더 삭제
    const result = await pgClient.query('DELETE FROM folders WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function listFolders() {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM folders ORDER BY sort_order, name');
    return result.rows.map(rowToFolder);
}
async function getFoldersByParentId(parentId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const query = parentId
        ? 'SELECT * FROM folders WHERE parent_id = $1 ORDER BY sort_order, name'
        : 'SELECT * FROM folders WHERE parent_id IS NULL ORDER BY sort_order, name';
    const params = parentId ? [parentId] : [];
    const result = await pgClient.query(query, params);
    return result.rows.map(rowToFolder);
}
async function addTestCaseToFolder(testCaseId, folderId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('UPDATE testcases SET folder_id = $1 WHERE id = $2', [folderId, testCaseId]);
    return (result.rowCount ?? 0) > 0;
}
function rowToFolder(row) {
    return {
        id: row.id,
        name: row.name,
        description: row.description,
        parentId: row.parent_id,
        sortOrder: row.sort_order,
        createdBy: row.created_by,
        createdAt: row.created_at,
        updatedAt: row.updated_at,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,