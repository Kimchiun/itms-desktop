{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/repositories/folderRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/repositories/folderRepository.ts"],"sourcesContent":["import { getPgClient, ensurePgConnected } from '../../../infrastructure/database/pgClient';\nimport { Folder, CreateFolderRequest, UpdateFolderRequest } from '../models/Folder';\n\nexport async function createFolder(folderData: CreateFolderRequest): Promise<Folder> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const result = await pgClient.query(\n        `INSERT INTO folders (name, description, parent_id, sort_order, created_by) \n         VALUES ($1, $2, $3, $4, $5) RETURNING *`,\n        [\n            folderData.name,\n            folderData.description,\n            folderData.parentId,\n            folderData.sortOrder || 0,\n            folderData.createdBy\n        ]\n    );\n    return rowToFolder(result.rows[0]);\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const result = await pgClient.query('SELECT * FROM folders WHERE id = $1', [id]);\n    if (result.rows.length === 0) return null;\n    return rowToFolder(result.rows[0]);\n}\n\nexport async function updateFolder(id: number, folderData: UpdateFolderRequest): Promise<Folder | null> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const current = await getFolderById(id);\n    if (!current) return null;\n    \n    const result = await pgClient.query(\n        `UPDATE folders SET name=$1, description=$2, parent_id=$3, sort_order=$4, updated_at=NOW() WHERE id=$5 RETURNING *`,\n        [\n            folderData.name ?? current.name,\n            folderData.description ?? current.description,\n            folderData.parentId ?? current.parentId,\n            folderData.sortOrder ?? current.sortOrder,\n            id\n        ]\n    );\n    \n    if (result.rows.length === 0) return null;\n    return rowToFolder(result.rows[0]);\n}\n\nexport async function deleteFolder(id: number): Promise<boolean> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    // 하위 폴더들을 먼저 삭제\n    await pgClient.query('DELETE FROM folders WHERE parent_id = $1', [id]);\n    \n    // 테스트케이스들의 폴더 참조 제거\n    await pgClient.query('UPDATE testcases SET folder_id = NULL WHERE folder_id = $1', [id]);\n    \n    // 폴더 삭제\n    const result = await pgClient.query('DELETE FROM folders WHERE id = $1', [id]);\n    return (result.rowCount ?? 0) > 0;\n}\n\nexport async function listFolders(): Promise<Folder[]> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const result = await pgClient.query('SELECT * FROM folders ORDER BY sort_order, name');\n    return result.rows.map(rowToFolder);\n}\n\nexport async function getFoldersByParentId(parentId?: number): Promise<Folder[]> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const query = parentId \n        ? 'SELECT * FROM folders WHERE parent_id = $1 ORDER BY sort_order, name'\n        : 'SELECT * FROM folders WHERE parent_id IS NULL ORDER BY sort_order, name';\n    \n    const params = parentId ? [parentId] : [];\n    const result = await pgClient.query(query, params);\n    return result.rows.map(rowToFolder);\n}\n\nexport async function addTestCaseToFolder(testCaseId: number, folderId: number): Promise<boolean> {\n    await ensurePgConnected();\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const result = await pgClient.query(\n        'UPDATE testcases SET folder_id = $1 WHERE id = $2',\n        [folderId, testCaseId]\n    );\n    return (result.rowCount ?? 0) > 0;\n}\n\nfunction rowToFolder(row: any): Folder {\n    return {\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        parentId: row.parent_id,\n        sortOrder: row.sort_order,\n        createdBy: row.created_by,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n    };\n} "],"version":3}