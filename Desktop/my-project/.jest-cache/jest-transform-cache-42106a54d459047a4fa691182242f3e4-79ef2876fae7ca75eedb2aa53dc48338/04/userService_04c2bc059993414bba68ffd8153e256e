c6f2dd744fb1c612d44c879e7a994c92
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUser = createUser;
exports.findUserByUsername = findUserByUsername;
exports.validatePassword = validatePassword;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
const bcrypt_1 = __importDefault(require("bcrypt"));
const SALT_ROUNDS = 10;
async function createUser(username, password, role) {
    const hash = await bcrypt_1.default.hash(password, SALT_ROUNDS);
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, password, role, created_at', [username, hash, role]);
    return {
        id: result.rows[0].id,
        username: result.rows[0].username,
        password: result.rows[0].password,
        role: result.rows[0].role,
        createdAt: result.rows[0].created_at,
    };
}
async function findUserByUsername(username) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT id, username, password, role, created_at FROM users WHERE username = $1', [username]);
    if (result.rows.length === 0)
        return null;
    const row = result.rows[0];
    return {
        id: row.id,
        username: row.username,
        password: row.password,
        role: row.role,
        createdAt: row.created_at,
    };
}
async function validatePassword(user, password) {
    return bcrypt_1.default.compare(password, user.password);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy91c2Vycy9zZXJ2aWNlcy91c2VyU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQU1BLGdDQWlCQztBQUVELGdEQWtCQztBQUVELDRDQUVDO0FBOUNELHdFQUF3RTtBQUN4RSxvREFBNEI7QUFFNUIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBRWhCLEtBQUssVUFBVSxVQUFVLENBQUMsUUFBZ0IsRUFBRSxRQUFnQixFQUFFLElBQWM7SUFDL0UsTUFBTSxJQUFJLEdBQUcsTUFBTSxnQkFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBQSxzQkFBVyxHQUFFLENBQUM7SUFDL0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQy9CLHFIQUFxSCxFQUNySCxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQ3pCLENBQUM7SUFDRixPQUFPO1FBQ0gsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNyQixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQ2pDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7UUFDakMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN6QixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO0tBQ3ZDLENBQUM7QUFDTixDQUFDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFDLFFBQWdCO0lBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUEsc0JBQVcsR0FBRSxDQUFDO0lBQy9CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUMvQixnRkFBZ0YsRUFDaEYsQ0FBQyxRQUFRLENBQUMsQ0FDYixDQUFDO0lBQ0YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixPQUFPO1FBQ0gsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ1YsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRO1FBQ3RCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtRQUN0QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7UUFDZCxTQUFTLEVBQUUsR0FBRyxDQUFDLFVBQVU7S0FDNUIsQ0FBQztBQUNOLENBQUM7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsSUFBVSxFQUFFLFFBQWdCO0lBQy9ELE9BQU8sZ0JBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuRCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3Qvc3JjL21haW4vYXBwL2RvbWFpbnMvdXNlcnMvc2VydmljZXMvdXNlclNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlciwgVXNlclJvbGUgfSBmcm9tICcuLi9tb2RlbHMvVXNlcic7XG5pbXBvcnQgeyBnZXRQZ0NsaWVudCB9IGZyb20gJy4uLy4uLy4uL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL3BnQ2xpZW50JztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcblxuY29uc3QgU0FMVF9ST1VORFMgPSAxMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgcm9sZTogVXNlclJvbGUpOiBQcm9taXNlPFVzZXI+IHtcbiAgICBjb25zdCBoYXNoID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIFNBTFRfUk9VTkRTKTtcbiAgICBjb25zdCBwZ0NsaWVudCA9IGdldFBnQ2xpZW50KCk7XG4gICAgaWYgKCFwZ0NsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvc3RncmVTUUwg7YG065287J207Ja47Yq46rCAIOy0iOq4sO2ZlOuQmOyngCDslYrslZjsirXri4jri6QuJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KFxuICAgICAgICAnSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJuYW1lLCBwYXNzd29yZCwgcm9sZSkgVkFMVUVTICgkMSwgJDIsICQzKSBSRVRVUk5JTkcgaWQsIHVzZXJuYW1lLCBwYXNzd29yZCwgcm9sZSwgY3JlYXRlZF9hdCcsXG4gICAgICAgIFt1c2VybmFtZSwgaGFzaCwgcm9sZV1cbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByZXN1bHQucm93c1swXS5pZCxcbiAgICAgICAgdXNlcm5hbWU6IHJlc3VsdC5yb3dzWzBdLnVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogcmVzdWx0LnJvd3NbMF0ucGFzc3dvcmQsXG4gICAgICAgIHJvbGU6IHJlc3VsdC5yb3dzWzBdLnJvbGUsXG4gICAgICAgIGNyZWF0ZWRBdDogcmVzdWx0LnJvd3NbMF0uY3JlYXRlZF9hdCxcbiAgICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmluZFVzZXJCeVVzZXJuYW1lKHVzZXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFVzZXIgfCBudWxsPiB7XG4gICAgY29uc3QgcGdDbGllbnQgPSBnZXRQZ0NsaWVudCgpO1xuICAgIGlmICghcGdDbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3N0Z3JlU1FMIO2BtOudvOydtOyWuO2KuOqwgCDstIjquLDtmZTrkJjsp4Ag7JWK7JWY7Iq164uI64ukLicpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZ0NsaWVudC5xdWVyeShcbiAgICAgICAgJ1NFTEVDVCBpZCwgdXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlLCBjcmVhdGVkX2F0IEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAkMScsXG4gICAgICAgIFt1c2VybmFtZV1cbiAgICApO1xuICAgIGlmIChyZXN1bHQucm93cy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJvdyA9IHJlc3VsdC5yb3dzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByb3cuaWQsXG4gICAgICAgIHVzZXJuYW1lOiByb3cudXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiByb3cucGFzc3dvcmQsXG4gICAgICAgIHJvbGU6IHJvdy5yb2xlLFxuICAgICAgICBjcmVhdGVkQXQ6IHJvdy5jcmVhdGVkX2F0LFxuICAgIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkKHVzZXI6IFVzZXIsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xufSAiXSwidmVyc2lvbiI6M30=