c4fd65455b024d2bbfe82afd0eccaf18
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// axios 모킹
jest.mock('../src/renderer/utils/axios', () => ({
    get: jest.fn()
}));
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const styled_components_1 = require("styled-components");
const toolkit_1 = require("@reduxjs/toolkit");
const IntegratedItemList_1 = __importDefault(require("../src/renderer/features/Dashboard/components/IntegratedItemList"));
const dashboardLayoutSlice_1 = __importDefault(require("../src/renderer/store/dashboardLayoutSlice"));
const theme_1 = require("../src/renderer/shared/theme");
require("@testing-library/jest-dom");
const mockAxios = require('../src/renderer/utils/axios');
// 테스트용 스토어 설정
const createTestStore = (initialState = {}) => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            dashboardLayout: dashboardLayoutSlice_1.default
        },
        preloadedState: {
            dashboardLayout: {
                leftPanel: { isCollapsed: false, width: 280 },
                rightPanel: { isCollapsed: false, width: 320 },
                centerPanel: { isFullWidth: false },
                activeTab: 'overview',
                selectedReleaseId: '1',
                selectedTestCaseId: null,
                selectedDefectId: null,
                filters: {
                    executionStatus: [],
                    priority: [],
                    severity: [],
                    keyword: '',
                    showOnlyDefects: false,
                },
                releaseData: {
                    testCases: [],
                    defects: [],
                    loading: false,
                    error: null,
                },
                ...initialState
            }
        }
    });
};
// 컴포넌트 렌더링 헬퍼
const renderIntegratedItemList = (initialState = {}) => {
    const store = createTestStore(initialState);
    const result = (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: store, children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: (0, jsx_runtime_1.jsx)(IntegratedItemList_1.default, {}) }) }));
    return { ...result, store };
};
const mockTestCases = [
    {
        id: 1,
        title: '로그인 테스트',
        priority: 'High',
        status: 'Active',
        executionStatus: 'Pass',
        createdBy: 'tester1',
        createdAt: '2024-01-15T00:00:00Z',
    },
    {
        id: 2,
        title: '회원가입 테스트',
        priority: 'Medium',
        status: 'Active',
        executionStatus: 'Fail',
        createdBy: 'tester2',
        createdAt: '2024-01-16T00:00:00Z',
    },
    {
        id: 3,
        title: '비밀번호 변경 테스트',
        priority: 'Low',
        status: 'Active',
        executionStatus: 'Untested',
        createdBy: 'tester1',
        createdAt: '2024-01-17T00:00:00Z',
    }
];
const mockDefects = [
    {
        id: 1,
        title: '로그인 버튼 클릭 시 오류',
        severity: 'High',
        status: 'Open',
        createdBy: 'tester1',
        createdAt: '2024-01-15T00:00:00Z',
    },
    {
        id: 2,
        title: '회원가입 폼 검증 오류',
        severity: 'Medium',
        status: 'In Progress',
        createdBy: 'tester2',
        createdAt: '2024-01-16T00:00:00Z',
    }
];
describe('IntegratedItemList - 릴리즈-테스트케이스-결함 연동 및 고급 필터링', () => {
    beforeEach(() => {
        mockAxios.get.mockClear();
    });
    describe('기본 렌더링 테스트', () => {
        it('릴리즈가 선택되지 않았을 때 안내 메시지를 표시해야 함', () => {
            renderIntegratedItemList({ selectedReleaseId: null });
            expect(react_1.screen.getByText('릴리즈를 선택해주세요')).toBeInTheDocument();
            expect(react_1.screen.getByText('좌측 패널에서 릴리즈를 선택하면 테스트케이스와 결함을 확인할 수 있습니다.')).toBeInTheDocument();
        });
        it('테스트케이스와 결함이 통합되어 표시되어야 함', () => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
            expect(react_1.screen.getByText('테스트케이스 & 결함')).toBeInTheDocument();
            expect(react_1.screen.getByText('5개 항목')).toBeInTheDocument(); // 3개 테스트케이스 + 2개 결함
        });
        it('테스트케이스와 결함이 구분되어 표시되어야 함', () => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
            expect(react_1.screen.getByText('로그인 테스트')).toBeInTheDocument();
            expect(react_1.screen.getByText('로그인 버튼 클릭 시 오류')).toBeInTheDocument();
            // 유형 배지 확인
            const tcBadges = react_1.screen.getAllByText('TC');
            const bugBadges = react_1.screen.getAllByText('BUG');
            expect(tcBadges).toHaveLength(3);
            expect(bugBadges).toHaveLength(2);
        });
    });
    describe('필터링 기능 테스트', () => {
        beforeEach(() => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
        });
        it('키워드 검색이 동작해야 함', () => {
            const searchInput = react_1.screen.getByTestId('keyword-search-input');
            react_1.fireEvent.change(searchInput, { target: { value: '로그인' } });
            expect(react_1.screen.getByText('로그인 테스트')).toBeInTheDocument();
            expect(react_1.screen.getByText('로그인 버튼 클릭 시 오류')).toBeInTheDocument();
            expect(react_1.screen.queryByText('회원가입 테스트')).not.toBeInTheDocument();
        });
        it('실행 상태 필터가 동작해야 함', () => {
            const executionStatusFilter = react_1.screen.getByTestId('execution-status-filter');
            react_1.fireEvent.change(executionStatusFilter, { target: { value: ['Pass'] } });
            expect(react_1.screen.getByText('로그인 테스트')).toBeInTheDocument(); // Pass 상태
            expect(react_1.screen.queryByText('회원가입 테스트')).not.toBeInTheDocument(); // Fail 상태
        });
        it('우선순위 필터가 동작해야 함', () => {
            const priorityFilter = react_1.screen.getByTestId('priority-filter');
            react_1.fireEvent.change(priorityFilter, { target: { value: ['High'] } });
            expect(react_1.screen.getByText('로그인 테스트')).toBeInTheDocument(); // High 우선순위
            expect(react_1.screen.queryByText('회원가입 테스트')).not.toBeInTheDocument(); // Medium 우선순위
        });
        it('심각도 필터가 동작해야 함', () => {
            const severityFilter = react_1.screen.getByTestId('severity-filter');
            react_1.fireEvent.change(severityFilter, { target: { value: ['High'] } });
            expect(react_1.screen.getByText('로그인 버튼 클릭 시 오류')).toBeInTheDocument(); // High 심각도
            expect(react_1.screen.queryByText('회원가입 폼 검증 오류')).not.toBeInTheDocument(); // Medium 심각도
        });
        it('결함만 표시 필터가 동작해야 함', () => {
            const showOnlyDefectsCheckbox = react_1.screen.getByTestId('show-only-defects-checkbox');
            react_1.fireEvent.click(showOnlyDefectsCheckbox);
            expect(react_1.screen.queryByText('로그인 테스트')).not.toBeInTheDocument();
            expect(react_1.screen.getByText('로그인 버튼 클릭 시 오류')).toBeInTheDocument();
            expect(react_1.screen.getByText('회원가입 폼 검증 오류')).toBeInTheDocument();
        });
        it('필터 초기화가 동작해야 함', () => {
            const searchInput = react_1.screen.getByTestId('keyword-search-input');
            react_1.fireEvent.change(searchInput, { target: { value: '로그인' } });
            const clearFiltersBtn = react_1.screen.getByTestId('clear-filters-btn');
            react_1.fireEvent.click(clearFiltersBtn);
            expect(react_1.screen.getByText('로그인 테스트')).toBeInTheDocument();
            expect(react_1.screen.getByText('회원가입 테스트')).toBeInTheDocument();
            expect(react_1.screen.getByText('비밀번호 변경 테스트')).toBeInTheDocument();
        });
    });
    describe('아이템 선택 테스트', () => {
        beforeEach(() => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
        });
        it('테스트케이스 클릭 시 선택 상태가 변경되어야 함', () => {
            const testCaseRow = react_1.screen.getByTestId('item-row-testcase-1');
            react_1.fireEvent.click(testCaseRow);
            // 선택된 상태 확인 (배경색 변경 등)
            expect(testCaseRow).toHaveStyle({ background: '#eff6ff' });
        });
        it('결함 클릭 시 선택 상태가 변경되어야 함', () => {
            const defectRow = react_1.screen.getByTestId('item-row-defect-1');
            react_1.fireEvent.click(defectRow);
            // 선택된 상태 확인
            expect(defectRow).toHaveStyle({ background: '#eff6ff' });
        });
        it('다른 아이템 클릭 시 이전 선택이 해제되어야 함', () => {
            const testCaseRow = react_1.screen.getByTestId('item-row-testcase-1');
            const defectRow = react_1.screen.getByTestId('item-row-defect-1');
            react_1.fireEvent.click(testCaseRow);
            react_1.fireEvent.click(defectRow);
            // 테스트케이스 선택 해제, 결함 선택
            expect(testCaseRow).not.toHaveStyle({ background: '#eff6ff' });
            expect(defectRow).toHaveStyle({ background: '#eff6ff' });
        });
    });
    describe('상태 표시 테스트', () => {
        it('테스트케이스 상태가 올바르게 표시되어야 함', () => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
            expect(react_1.screen.getByText('통과')).toBeInTheDocument(); // Pass
            expect(react_1.screen.getByText('실패')).toBeInTheDocument(); // Fail
            expect(react_1.screen.getByText('실행 전')).toBeInTheDocument(); // Untested
        });
        it('결함 상태가 올바르게 표시되어야 함', () => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
            expect(react_1.screen.getByText('열림')).toBeInTheDocument(); // Open
            expect(react_1.screen.getByText('진행 중')).toBeInTheDocument(); // In Progress
        });
        it('우선순위와 심각도가 올바르게 표시되어야 함', () => {
            renderIntegratedItemList({
                releaseData: {
                    testCases: mockTestCases,
                    defects: mockDefects,
                    loading: false,
                    error: null,
                }
            });
            expect(react_1.screen.getByText('높음')).toBeInTheDocument(); // High priority
            expect(react_1.screen.getByText('보통')).toBeInTheDocument(); // Medium priority
            expect(react_1.screen.getByText('낮음')).toBeInTheDocument(); // Low priority
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9pbnRlZ3JhdGVkLWl0ZW0tbGlzdC50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxXQUFXO0FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ2YsQ0FBQyxDQUFDLENBQUM7QUFiSixrREFBNEU7QUFDNUUsNkNBQXVDO0FBQ3ZDLHlEQUFrRDtBQUNsRCw4Q0FBa0Q7QUFDbEQsMEhBQWtHO0FBRWxHLHNHQUFnRjtBQUNoRix3REFBcUQ7QUFDckQscUNBQW1DO0FBT25DLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXpELGNBQWM7QUFDZCxNQUFNLGVBQWUsR0FBRyxDQUFDLFlBQVksR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUM1QyxPQUFPLElBQUEsd0JBQWMsRUFBQztRQUNwQixPQUFPLEVBQUU7WUFDUCxlQUFlLEVBQUUsOEJBQXNCO1NBQ3hDO1FBQ0QsY0FBYyxFQUFFO1lBQ2QsZUFBZSxFQUFFO2dCQUNmLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDN0MsVUFBVSxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUM5QyxXQUFXLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO2dCQUNuQyxTQUFTLEVBQUUsVUFBVTtnQkFDckIsaUJBQWlCLEVBQUUsR0FBRztnQkFDdEIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtnQkFDdEIsT0FBTyxFQUFFO29CQUNQLGVBQWUsRUFBRSxFQUFFO29CQUNuQixRQUFRLEVBQUUsRUFBRTtvQkFDWixRQUFRLEVBQUUsRUFBRTtvQkFDWixPQUFPLEVBQUUsRUFB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dkIsV0FBVyxFQUFFO29CQUNYLFNBQVMsRUFBRSxhQUFhO29CQUN4QixPQUFPLEVBQUUsV0FBVztvQkFDcEIsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRixDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxPQUFPO1lBQzNELE1BQU0sQ0FBQyxjQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLGNBQWM7UUFDdEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLHdCQUF3QixDQUFDO2dCQUN2QixXQUFXLEVBQUU7b0JBQ1gsU0FBUyxFQUFFLGFBQWE7b0JBQ3hCLE9BQU8sRUFBRSxXQUFXO29CQUNwQixPQUFPLEVBQUUsS0FBSztvQkFDZCxLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxjQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtZQUNwRSxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxrQkFBa0I7WUFDdEUsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsZUFBZTtRQUNyRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9pbnRlZ3JhdGVkLWl0ZW0tbGlzdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCBJbnRlZ3JhdGVkSXRlbUxpc3QgZnJvbSAnLi4vc3JjL3JlbmRlcmVyL2ZlYXR1cmVzL0Rhc2hib2FyZC9jb21wb25lbnRzL0ludGVncmF0ZWRJdGVtTGlzdCc7XG5pbXBvcnQgRmlsdGVyQmFyIGZyb20gJy4uL3NyYy9yZW5kZXJlci9mZWF0dXJlcy9EYXNoYm9hcmQvY29tcG9uZW50cy9GaWx0ZXJCYXInO1xuaW1wb3J0IGRhc2hib2FyZExheW91dFJlZHVjZXIgZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3N0b3JlL2Rhc2hib2FyZExheW91dFNsaWNlJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3NoYXJlZC90aGVtZSc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuXG4vLyBheGlvcyDrqqjtgrlcbmplc3QubW9jaygnLi4vc3JjL3JlbmRlcmVyL3V0aWxzL2F4aW9zJywgKCkgPT4gKHtcbiAgZ2V0OiBqZXN0LmZuKClcbn0pKTtcblxuY29uc3QgbW9ja0F4aW9zID0gcmVxdWlyZSgnLi4vc3JjL3JlbmRlcmVyL3V0aWxzL2F4aW9zJyk7XG5cbi8vIO2FjOyKpO2KuOyaqSDsiqTthqDslrQg7ISk7KCVXG5jb25zdCBjcmVhdGVUZXN0U3RvcmUgPSAoaW5pdGlhbFN0YXRlID0ge30pID0+IHtcbiAgcmV0dXJuIGNvbmZpZ3VyZVN0b3JlKHtcbiAgICByZWR1Y2VyOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IGRhc2hib2FyZExheW91dFJlZHVjZXJcbiAgICB9LFxuICAgIHByZWxvYWRlZFN0YXRlOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IHtcbiAgICAgICAgbGVmdFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDI4MCB9LFxuICAgICAgICByaWdodFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDMyMCB9LFxuICAgICAgICBjZW50ZXJQYW5lbDogeyBpc0Z1bGxXaWR0aDogZmFsc2UgfSxcbiAgICAgICAgYWN0aXZlVGFiOiAnb3ZlcnZpZXcnLFxuICAgICAgICBzZWxlY3RlZFJlbGVhc2VJZDogJzEnLFxuICAgICAgICBzZWxlY3RlZFRlc3RDYXNlSWQ6IG51bGwsXG4gICAgICAgIHNlbGVjdGVkRGVmZWN0SWQ6IG51bGwsXG4gICAgICAgIGZpbHRlcnM6IHtcbiAgICAgICAgICBleGVjdXRpb25TdGF0dXM6IFtdLFxuICAgICAgICAgIHByaW9yaXR5OiBbXSxcbiAgICAgICAgICBzZXZlcml0eTogW10sXG4gICAgICAgICAga2V5d29yZDogJycsXG4gICAgICAgICAgc2hvd09ubHlEZWZlY3RzOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsZWFzZURhdGE6IHtcbiAgICAgICAgICB0ZXN0Q2FzZXM6IFtdLFxuICAgICAgICAgIGRlZmVjdHM6IFtdLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICAuLi5pbml0aWFsU3RhdGVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLy8g7Lu07Y+s64SM7Yq4IOugjOuNlOungSDtl6ztjbxcbmNvbnN0IHJlbmRlckludGVncmF0ZWRJdGVtTGlzdCA9IChpbml0aWFsU3RhdGUgPSB7fSkgPT4ge1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVRlc3RTdG9yZShpbml0aWFsU3RhdGUpO1xuICBjb25zdCByZXN1bHQgPSByZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgICA8SW50ZWdyYXRlZEl0ZW1MaXN0IC8+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgPC9Qcm92aWRlcj5cbiAgKTtcbiAgcmV0dXJuIHsgLi4ucmVzdWx0LCBzdG9yZSB9O1xufTtcblxuY29uc3QgbW9ja1Rlc3RDYXNlcyA9IFtcbiAge1xuICAgIGlkOiAxLFxuICAgIHRpdGxlOiAn66Gc6re47J24IO2FjOyKpO2KuCcsXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcbiAgICBzdGF0dXM6ICdBY3RpdmUnLFxuICAgIGV4ZWN1dGlvblN0YXR1czogJ1Bhc3MnLFxuICAgIGNyZWF0ZWRCeTogJ3Rlc3RlcjEnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjQtMDEtMTVUMDA6MDA6MDBaJyxcbiAgfSxcbiAge1xuICAgIGlkOiAyLFxuICAgIHRpdGxlOiAn7ZqM7JuQ6rCA7J6FIO2FjOyKpO2KuCcsXG4gICAgcHJpb3JpdHk6ICdNZWRpdW0nLFxuICAgIHN0YXR1czogJ0FjdGl2ZScsXG4gICAgZXhlY3V0aW9uU3RhdHVzOiAnRmFpbCcsXG4gICAgY3JlYXRlZEJ5OiAndGVzdGVyMicsXG4gICAgY3JlYXRlZEF0OiAnMjAyNC0wMS0xNlQwMDowMDowMFonLFxuICB9LFxuICB7XG4gICAgaWQ6IDMsXG4gICAgdGl0bGU6ICfruYTrsIDrsojtmLgg67OA6rK9IO2FjOyKpO2KuCcsXG4gICAgcHJpb3JpdHk6ICdMb3cnLFxuICAgIHN0YXR1czogJ0FjdGl2ZScsXG4gICAgZXhlY3V0aW9uU3RhdHVzOiAnVW50ZXN0ZWQnLFxuICAgIGNyZWF0ZWRCeTogJ3Rlc3RlcjEnLFxuICAgIGNyZWF0ZWRBdDogJzIwMjQtMDEtMTdUMDA6MDA6MDBaJyxcbiAgfVxuXTtcblxuY29uc3QgbW9ja0RlZmVjdHMgPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICB0aXRsZTogJ+uhnOq3uOyduCDrsoTtirwg7YG066atIOyLnCDsmKTrpZgnLFxuICAgIHNldmVyaXR5OiAnSGlnaCcsXG4gICAgc3RhdHVzOiAnT3BlbicsXG4gICAgY3JlYXRlZEJ5OiAndGVzdGVyMScsXG4gICAgY3JlYXRlZEF0OiAnMjAyNC0wMS0xNVQwMDowMDowMFonLFxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgdGl0bGU6ICftmozsm5DqsIDsnoUg7Y+8IOqygOymnSDsmKTrpZgnLFxuICAgIHNldmVyaXR5OiAnTWVkaXVtJyxcbiAgICBzdGF0dXM6ICdJbiBQcm9ncmVzcycsXG4gICAgY3JlYXRlZEJ5OiAndGVzdGVyMicsXG4gICAgY3JlYXRlZEF0OiAnMjAyNC0wMS0xNlQwMDowMDowMFonLFxuICB9XG5dO1xuXG5kZXNjcmliZSgnSW50ZWdyYXRlZEl0ZW1MaXN0IC0g66a066as7KaILe2FjOyKpO2KuOy8gOydtOyKpC3qsrDtlagg7Jew64+ZIOuwjyDqs6DquIkg7ZWE7YSw66eBJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrQXhpb3MuZ2V0Lm1vY2tDbGVhcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgn6riw67O4IOugjOuNlOungSDthYzsiqTtirgnLCAoKSA9PiB7XG4gICAgaXQoJ+umtOumrOymiOqwgCDshKDtg53rkJjsp4Ag7JWK7JWY7J2EIOuVjCDslYjrgrQg66mU7Iuc7KeA66W8IO2RnOyLnO2VtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICByZW5kZXJJbnRlZ3JhdGVkSXRlbUxpc3QoeyBzZWxlY3RlZFJlbGVhc2VJZDogbnVsbCB9KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+umtOumrOymiOulvCDshKDtg53tlbTso7zshLjsmpQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfsoozsuKEg7Yyo64SQ7JeQ7IScIOumtOumrOymiOulvCDshKDtg53tlZjrqbQg7YWM7Iqk7Yq47LyA7J207Iqk7JmAIOqysO2VqOydhCDtmZXsnbjtlaAg7IiYIOyeiOyKteuLiOuLpC4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCfthYzsiqTtirjsvIDsnbTsiqTsmYAg6rKw7ZWo7J20IO2Gte2VqeuQmOyWtCDtkZzsi5zrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgcmVuZGVySW50ZWdyYXRlZEl0ZW1MaXN0KHtcbiAgICAgICAgcmVsZWFzZURhdGE6IHtcbiAgICAgICAgICB0ZXN0Q2FzZXM6IG1vY2tUZXN0Q2FzZXMsXG4gICAgICAgICAgZGVmZWN0czogbW9ja0RlZmVjdHMsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn7YWM7Iqk7Yq47LyA7J207IqkICYg6rKw7ZWoJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNeqwnCDtla3rqqknKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gM+qwnCDthYzsiqTtirjsvIDsnbTsiqQgKyAy6rCcIOqysO2VqFxuICAgIH0pO1xuXG4gICAgaXQoJ+2FjOyKpO2KuOy8gOydtOyKpOyZgCDqsrDtlajsnbQg6rWs67aE65CY7Ja0IO2RnOyLnOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICByZW5kZXJJbnRlZ3JhdGVkSXRlbUxpc3Qoe1xuICAgICAgICByZWxlYXNlRGF0YToge1xuICAgICAgICAgIHRlc3RDYXNlczogbW9ja1Rlc3RDYXNlcyxcbiAgICAgICAgICBkZWZlY3RzOiBtb2NrRGVmZWN0cyxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfroZzqt7jsnbgg7YWM7Iqk7Yq4JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn66Gc6re47J24IOuyhO2KvCDtgbTrpq0g7IucIOyYpOulmCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgXG4gICAgICAvLyDsnKDtmJUg67Cw7KeAIO2ZleyduFxuICAgICAgY29uc3QgdGNCYWRnZXMgPSBzY3JlZW4uZ2V0QWxsQnlUZXh0KCdUQycpO1xuICAgICAgY29uc3QgYnVnQmFkZ2VzID0gc2NyZWVuLmdldEFsbEJ5VGV4dCgnQlVHJyk7XG4gICAgICBleHBlY3QodGNCYWRnZXMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChidWdCYWRnZXMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+2VhO2EsOungSDquLDriqUg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVuZGVySW50ZWdyYXRlZEl0ZW1MaXN0KHtcbiAgICAgICAgcmVsZWFzZURhdGE6IHtcbiAgICAgICAgICB0ZXN0Q2FzZXM6IG1vY2tUZXN0Q2FzZXMsXG4gICAgICAgICAgZGVmZWN0czogbW9ja0RlZmVjdHMsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+2CpOybjOuTnCDqsoDsg4nsnbQg64+Z7J6R7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdrZXl3b3JkLXNlYXJjaC1pbnB1dCcpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShzZWFyY2hJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICfroZzqt7jsnbgnIH0gfSk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfroZzqt7jsnbgg7YWM7Iqk7Yq4JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn66Gc6re47J24IOuyhO2KvCDtgbTrpq0g7IucIOyYpOulmCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgn7ZqM7JuQ6rCA7J6FIO2FjOyKpO2KuCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCfsi6Ttlokg7IOB7YOcIO2VhO2EsOqwgCDrj5nsnpHtlbTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlY3V0aW9uU3RhdHVzRmlsdGVyID0gc2NyZWVuLmdldEJ5VGVzdElkKCdleGVjdXRpb24tc3RhdHVzLWZpbHRlcicpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShleGVjdXRpb25TdGF0dXNGaWx0ZXIsIHsgdGFyZ2V0OiB7IHZhbHVlOiBbJ1Bhc3MnXSB9IH0pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn66Gc6re47J24IO2FjOyKpO2KuCcpKS50b0JlSW5UaGVEb2N1bWVudCgpOyAvLyBQYXNzIOyDge2DnFxuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgn7ZqM7JuQ6rCA7J6FIO2FjOyKpO2KuCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gRmFpbCDsg4Htg5xcbiAgICB9KTtcblxuICAgIGl0KCfsmrDshKDsiJzsnIQg7ZWE7YSw6rCAIOuPmeyeke2VtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcmlvcml0eUZpbHRlciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncHJpb3JpdHktZmlsdGVyJyk7XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHByaW9yaXR5RmlsdGVyLCB7IHRhcmdldDogeyB2YWx1ZTogWydIaWdoJ10gfSB9KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uhnOq3uOyduCDthYzsiqTtirgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gSGlnaCDsmrDshKDsiJzsnIRcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ+2ajOybkOqwgOyehSDthYzsiqTtirgnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7IC8vIE1lZGl1bSDsmrDshKDsiJzsnIRcbiAgICB9KTtcblxuICAgIGl0KCfsi6zqsIHrj4Qg7ZWE7YSw6rCAIOuPmeyeke2VtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZXZlcml0eUZpbHRlciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2V2ZXJpdHktZmlsdGVyJyk7XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHNldmVyaXR5RmlsdGVyLCB7IHRhcmdldDogeyB2YWx1ZTogWydIaWdoJ10gfSB9KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uhnOq3uOyduCDrsoTtirwg7YG066atIOyLnCDsmKTrpZgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gSGlnaCDsi6zqsIHrj4RcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ+2ajOybkOqwgOyehSDtj7wg6rKA7KadIOyYpOulmCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gTWVkaXVtIOyLrOqwgeuPhFxuICAgIH0pO1xuXG4gICAgaXQoJ+qysO2VqOunjCDtkZzsi5wg7ZWE7YSw6rCAIOuPmeyeke2VtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzaG93T25seURlZmVjdHNDaGVja2JveCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2hvdy1vbmx5LWRlZmVjdHMtY2hlY2tib3gnKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzaG93T25seURlZmVjdHNDaGVja2JveCk7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ+uhnOq3uOyduCDthYzsiqTtirgnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn66Gc6re47J24IOuyhO2KvCDtgbTrpq0g7IucIOyYpOulmCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+2ajOybkOqwgOyehSDtj7wg6rKA7KadIOyYpOulmCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+2VhO2EsCDstIjquLDtmZTqsIAg64+Z7J6R7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdrZXl3b3JkLXNlYXJjaC1pbnB1dCcpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShzZWFyY2hJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICfroZzqt7jsnbgnIH0gfSk7XG5cbiAgICAgIGNvbnN0IGNsZWFyRmlsdGVyc0J0biA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY2xlYXItZmlsdGVycy1idG4nKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhjbGVhckZpbHRlcnNCdG4pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn66Gc6re47J24IO2FjOyKpO2KuCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+2ajOybkOqwgOyehSDthYzsiqTtirgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfruYTrsIDrsojtmLgg67OA6rK9IO2FjOyKpO2KuCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn7JWE7J207YWcIOyEoO2DnSDthYzsiqTtirgnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICByZW5kZXJJbnRlZ3JhdGVkSXRlbUxpc3Qoe1xuICAgICAgICByZWxlYXNlRGF0YToge1xuICAgICAgICAgIHRlc3RDYXNlczogbW9ja1Rlc3RDYXNlcyxcbiAgICAgICAgICBkZWZlY3RzOiBtb2NrRGVmZWN0cyxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgn7YWM7Iqk7Yq47LyA7J207IqkIO2BtOumrSDsi5wg7ISg7YOdIOyDge2DnOqwgCDrs4Dqsr3rkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdENhc2VSb3cgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2l0ZW0tcm93LXRlc3RjYXNlLTEnKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh0ZXN0Q2FzZVJvdyk7XG5cbiAgICAgIC8vIOyEoO2DneuQnCDsg4Htg5wg7ZmV7J24ICjrsLDqsr3sg4kg67OA6rK9IOuTsSlcbiAgICAgIGV4cGVjdCh0ZXN0Q2FzZVJvdykudG9IYXZlU3R5bGUoeyBiYWNrZ3JvdW5kOiAnI2VmZjZmZicgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgn6rKw7ZWoIO2BtOumrSDsi5wg7ISg7YOdIOyDge2DnOqwgCDrs4Dqsr3rkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGVmZWN0Um93ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpdGVtLXJvdy1kZWZlY3QtMScpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGRlZmVjdFJvdyk7XG5cbiAgICAgIC8vIOyEoO2DneuQnCDsg4Htg5wg7ZmV7J24XG4gICAgICBleHBlY3QoZGVmZWN0Um93KS50b0hhdmVTdHlsZSh7IGJhY2tncm91bmQ6ICcjZWZmNmZmJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfri6Trpbgg7JWE7J207YWcIO2BtOumrSDsi5wg7J207KCEIOyEoO2DneydtCDtlbTsoJzrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdENhc2VSb3cgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2l0ZW0tcm93LXRlc3RjYXNlLTEnKTtcbiAgICAgIGNvbnN0IGRlZmVjdFJvdyA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnaXRlbS1yb3ctZGVmZWN0LTEnKTtcblxuICAgICAgZmlyZUV2ZW50LmNsaWNrKHRlc3RDYXNlUm93KTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhkZWZlY3RSb3cpO1xuXG4gICAgICAvLyDthYzsiqTtirjsvIDsnbTsiqQg7ISg7YOdIO2VtOygnCwg6rKw7ZWoIOyEoO2DnVxuICAgICAgZXhwZWN0KHRlc3RDYXNlUm93KS5ub3QudG9IYXZlU3R5bGUoeyBiYWNrZ3JvdW5kOiAnI2VmZjZmZicgfSk7XG4gICAgICBleHBlY3QoZGVmZWN0Um93KS50b0hhdmVTdHlsZSh7IGJhY2tncm91bmQ6ICcjZWZmNmZmJyB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+yDge2DnCDtkZzsi5wg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGl0KCfthYzsiqTtirjsvIDsnbTsiqQg7IOB7YOc6rCAIOyYrOuwlOultOqyjCDtkZzsi5zrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgcmVuZGVySW50ZWdyYXRlZEl0ZW1MaXN0KHtcbiAgICAgICAgcmVsZWFzZURhdGE6IHtcbiAgICAgICAgICB0ZXN0Q2FzZXM6IG1vY2tUZXN0Q2FzZXMsXG4gICAgICAgICAgZGVmZWN0czogbW9ja0RlZmVjdHMsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn7Ya16rO8JykpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIFBhc3NcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfsi6TtjKgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gRmFpbFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+yLpO2WiSDsoIQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gVW50ZXN0ZWRcbiAgICB9KTtcblxuICAgIGl0KCfqsrDtlagg7IOB7YOc6rCAIOyYrOuwlOultOqyjCDtkZzsi5zrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgcmVuZGVySW50ZWdyYXRlZEl0ZW1MaXN0KHtcbiAgICAgICAgcmVsZWFzZURhdGE6IHtcbiAgICAgICAgICB0ZXN0Q2FzZXM6IG1vY2tUZXN0Q2FzZXMsXG4gICAgICAgICAgZGVmZWN0czogbW9ja0RlZmVjdHMsXG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn7Je066a8JykpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIE9wZW5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfsp4Ttlokg7KSRJykpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIEluIFByb2dyZXNzXG4gICAgfSk7XG5cbiAgICBpdCgn7Jqw7ISg7Iic7JyE7JmAIOyLrOqwgeuPhOqwgCDsmKzrsJTrpbTqsowg7ZGc7Iuc65CY7Ja07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIHJlbmRlckludGVncmF0ZWRJdGVtTGlzdCh7XG4gICAgICAgIHJlbGVhc2VEYXRhOiB7XG4gICAgICAgICAgdGVzdENhc2VzOiBtb2NrVGVzdENhc2VzLFxuICAgICAgICAgIGRlZmVjdHM6IG1vY2tEZWZlY3RzLFxuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uGkuydjCcpKS50b0JlSW5UaGVEb2N1bWVudCgpOyAvLyBIaWdoIHByaW9yaXR5XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn67O07Ya1JykpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIE1lZGl1bSBwcmlvcml0eVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uCruydjCcpKS50b0JlSW5UaGVEb2N1bWVudCgpOyAvLyBMb3cgcHJpb3JpdHlcbiAgICB9KTtcbiAgfSk7XG59KTsgIl0sInZlcnNpb24iOjN9