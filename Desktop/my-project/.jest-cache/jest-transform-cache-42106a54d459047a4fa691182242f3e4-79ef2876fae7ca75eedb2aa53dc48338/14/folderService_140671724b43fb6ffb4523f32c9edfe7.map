{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts"],"sourcesContent":["import * as folderRepository from '../repositories/folderRepository';\nimport { Folder, FolderTree, CreateFolderRequest, UpdateFolderRequest, MoveFolderRequest, MoveTestCaseRequest, ReorderFolderRequest, DragDropResult, DropType } from '../models/Folder';\nimport { measureOperation } from '../../../utils/performanceMonitor';\n\nexport async function createFolder(request: CreateFolderRequest): Promise<Folder> {\n  return await measureOperation('folder-create', async () => {\n    // 순환 참조 검사\n    if (request.parentId) {\n      const hasCircularReference = await folderRepository.checkCircularReference(0, request.parentId);\n      if (hasCircularReference) {\n        throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n      }\n    }\n    \n    return await folderRepository.createFolder({\n      name: request.name,\n      description: request.description,\n      parentId: request.parentId,\n      createdBy: request.createdBy\n    });\n  });\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n  return await measureOperation('folder-get-by-id', async () => {\n    return await folderRepository.getFolderById(id);\n  });\n}\n\nexport async function getAllFolders(): Promise<Folder[]> {\n  return await measureOperation('folder-get-all', async () => {\n    return await folderRepository.getAllFolders();\n  });\n}\n\nexport async function getFolderTree(): Promise<FolderTree[]> {\n  return await measureOperation('folder-get-tree', async () => {\n    return await folderRepository.getFolderTree();\n  });\n}\n\nexport async function updateFolder(id: number, request: UpdateFolderRequest): Promise<Folder | null> {\n  return await measureOperation('folder-update', async () => {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n      throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 순환 참조 검사 (parentId가 변경되는 경우)\n    if (request.parentId !== undefined && request.parentId !== folder.parentId) {\n      const hasCircularReference = await folderRepository.checkCircularReference(id, request.parentId);\n      if (hasCircularReference) {\n        throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n      }\n    }\n    \n    return await folderRepository.updateFolder(id, request);\n  });\n}\n\nexport async function deleteFolder(id: number): Promise<boolean> {\n  return await measureOperation('folder-delete', async () => {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n      throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 루트 폴더는 삭제 불가\n    if (folder.name === 'Root') {\n      throw new Error('루트 폴더는 삭제할 수 없습니다.');\n    }\n    \n    return await folderRepository.deleteFolder(id);\n  });\n}\n\nexport async function moveFolder(id: number, request: MoveFolderRequest): Promise<Folder | null> {\n  return await measureOperation('folder-move', async () => {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n      throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 순환 참조 검사\n    if (request.targetParentId !== undefined) {\n      const hasCircularReference = await folderRepository.checkCircularReference(id, request.targetParentId);\n      if (hasCircularReference) {\n        throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n      }\n    }\n    \n    return await folderRepository.updateFolder(id, {\n      parentId: request.targetParentId\n    });\n  });\n}\n\nexport async function getTestCasesInFolder(folderId: number): Promise<number[]> {\n  return await measureOperation('folder-get-testcases', async () => {\n    return await folderRepository.getTestCasesInFolder(folderId);\n  });\n}\n\nexport async function addTestCaseToFolder(testCaseId: number, folderId: number): Promise<void> {\n  return await measureOperation('folder-add-testcase', async () => {\n    await folderRepository.addTestCaseToFolder(testCaseId, folderId);\n  });\n}\n\nexport async function removeTestCaseFromFolder(testCaseId: number, folderId: number): Promise<void> {\n  return await measureOperation('folder-remove-testcase', async () => {\n    await folderRepository.removeTestCaseFromFolder(testCaseId, folderId);\n  });\n}\n\nexport async function moveTestCase(testCaseId: number, fromFolderId: number, toFolderId: number): Promise<void> {\n  return await measureOperation('folder-move-testcase', async () => {\n    await folderRepository.moveTestCase(testCaseId, fromFolderId, toFolderId);\n  });\n}\n\nexport async function reorderFolder(folderId: number, targetFolderId: number, position: 'before' | 'after'): Promise<Folder | null> {\n  return await measureOperation('folder-reorder', async () => {\n    const folder = await folderRepository.getFolderById(folderId);\n    if (!folder) {\n      throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    const targetFolder = await folderRepository.getFolderById(targetFolderId);\n    if (!targetFolder) {\n      throw new Error('대상 폴더를 찾을 수 없습니다.');\n    }\n    \n    // 같은 부모 폴더 내에서만 순서 변경 가능\n    if (folder.parentId !== targetFolder.parentId) {\n      throw new Error('같은 부모 폴더 내에서만 순서를 변경할 수 있습니다.');\n    }\n    \n    const newSortOrder = position === 'before' \n      ? targetFolder.sortOrder || 0\n      : (targetFolder.sortOrder || 0) + 1;\n    \n    return await folderRepository.updateFolder(folderId, {\n      sortOrder: newSortOrder\n    });\n  });\n}\n\nexport async function handleFolderDragDrop(\n  draggedFolderId: number, \n  dropZone: { type: DropType; targetId: number; position?: 'before' | 'after' }\n): Promise<DragDropResult> {\n  return await measureOperation('folder-dragdrop', async () => {\n    const draggedFolder = await folderRepository.getFolderById(draggedFolderId);\n    if (!draggedFolder) {\n      return { success: false, message: '드래그한 폴더를 찾을 수 없습니다.' };\n    }\n    \n    if (dropZone.type === DropType.REORDER) {\n      // 순서 변경 로직\n      const targetFolder = await folderRepository.getFolderById(dropZone.targetId);\n      if (!targetFolder) {\n        return { success: false, message: '대상 폴더를 찾을 수 없습니다.' };\n      }\n      \n      // 같은 부모 폴더 내에서만 순서 변경 가능\n      if (draggedFolder.parentId !== targetFolder.parentId) {\n        return { success: false, message: '같은 부모 폴더 내에서만 순서를 변경할 수 있습니다.' };\n      }\n      \n      const newSortOrder = dropZone.position === 'before' \n        ? targetFolder.sortOrder || 0\n        : (targetFolder.sortOrder || 0) + 1;\n      \n      const updatedFolder = await folderRepository.updateFolder(draggedFolderId, {\n        sortOrder: newSortOrder\n      });\n      \n      return { \n        success: true, \n        message: '폴더 순서가 변경되었습니다.',\n        folder: updatedFolder || undefined\n      };\n    } else if (dropZone.type === DropType.HIERARCHY) {\n      // 계층 변경 로직\n      const hasCircularReference = await folderRepository.checkCircularReference(\n        draggedFolderId, \n        dropZone.targetId\n      );\n      \n      if (hasCircularReference) {\n        return { success: false, message: '순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.' };\n      }\n      \n      const updatedFolder = await folderRepository.updateFolder(draggedFolderId, {\n        parentId: dropZone.targetId\n      });\n      \n      return { \n        success: true, \n        message: '폴더가 이동되었습니다.',\n        folder: updatedFolder || undefined\n      };\n    }\n    \n    return { success: false, message: '지원하지 않는 드롭 타입입니다.' };\n  }, {\n    draggedFolderId,\n    dropZoneType: dropZone.type,\n    targetId: dropZone.targetId,\n    position: dropZone.position\n  });\n}\n\nexport async function validateDropZone(\n  draggedFolderId: number, \n  dropZone: { type: DropType; targetId: number; position?: 'before' | 'after' }\n): Promise<{ isValid: boolean; message?: string }> {\n  return await measureOperation('folder-validate-drop', async () => {\n    // 자기 자신으로의 드롭 방지\n    if (draggedFolderId === dropZone.targetId) {\n      return { isValid: false, message: '자기 자신으로는 이동할 수 없습니다.' };\n    }\n    \n    // 순환 참조 검사 (계층 변경인 경우)\n    if (dropZone.type === DropType.HIERARCHY) {\n      const hasCircularReference = await folderRepository.checkCircularReference(\n        draggedFolderId, \n        dropZone.targetId\n      );\n      \n      if (hasCircularReference) {\n        return { isValid: false, message: '순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.' };\n      }\n    }\n    \n    return { isValid: true };\n  });\n} "],"version":3}