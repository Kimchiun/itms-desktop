6bf7231ef451e0a749cc4e8ab357f6df
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.completePageTransition = exports.startPageTransition = exports.toggleAnimations = exports.setAnimationSpeed = exports.setShowSkeleton = exports.setTransitioning = exports.setCurrentPage = exports.setLoading = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const initialState = {
    isLoading: false,
    currentPage: '',
    isTransitioning: false,
    showSkeleton: false,
    animationSpeed: 'normal',
    enableAnimations: true
};
const animationSlice = (0, toolkit_1.createSlice)({
    name: 'animation',
    initialState,
    reducers: {
        setLoading: (state, action) => {
            state.isLoading = action.payload;
            state.showSkeleton = action.payload;
        },
        setCurrentPage: (state, action) => {
            state.currentPage = action.payload;
        },
        setTransitioning: (state, action) => {
            state.isTransitioning = action.payload;
        },
        setShowSkeleton: (state, action) => {
            state.showSkeleton = action.payload;
        },
        setAnimationSpeed: (state, action) => {
            state.animationSpeed = action.payload;
        },
        toggleAnimations: (state) => {
            state.enableAnimations = !state.enableAnimations;
        },
        startPageTransition: (state, action) => {
            state.isTransitioning = true;
            state.currentPage = action.payload;
        },
        completePageTransition: (state) => {
            state.isTransitioning = false;
        }
    }
});
_a = animationSlice.actions, exports.setLoading = _a.setLoading, exports.setCurrentPage = _a.setCurrentPage, exports.setTransitioning = _a.setTransitioning, exports.setShowSkeleton = _a.setShowSkeleton, exports.setAnimationSpeed = _a.setAnimationSpeed, exports.toggleAnimations = _a.toggleAnimations, exports.startPageTransition = _a.startPageTransition, exports.completePageTransition = _a.completePageTransition;
exports.default = animationSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvYW5pbWF0aW9uU2xpY2UudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDhDQUE4RDtBQVc5RCxNQUFNLFlBQVksR0FBbUI7SUFDbkMsU0FBUyxFQUFFLEtBQUs7SUFDaEIsV0FBVyxFQUFFLEVBQUU7SUFDZixlQUFlLEVBQUUsS0FBSztJQUN0QixZQUFZLEVBQUUsS0FBSztJQUNuQixjQUFjLEVBQUUsUUFBUTtJQUN4QixnQkFBZ0IsRUFBRSxJQUFJO0NBQ3ZCLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxJQUFBLHFCQUFXLEVBQUM7SUFDakMsSUFBSSxFQUFFLFdBQVc7SUFDakIsWUFBWTtJQUNaLFFBQVEsRUFBRTtRQUNSLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUE4QixFQUFFLEVBQUU7WUFDcEQsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ2pDLEtBQUssQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxDQUFDO1FBQ0QsY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQTZCLEVBQUUsRUFBRTtZQUN2RCxLQUFLLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDckMsQ0FBQztRQUNELGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLE1BQThCLEVBQUUsRUFBRTtZQUMxRCxLQUFLLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDekMsQ0FBQztRQUNELGVBQWUsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUE4QixFQUFFLEVBQUU7WUFDekQsS0FBSyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3RDLENBQUM7UUFDRCxpQkFBaUIsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFpRCxFQUFFLEVBQUU7WUFDOUUsS0FBSyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3hDLENBQUM7UUFDRCxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzFCLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBNkIsRUFBRSxFQUFFO1lBQzVELEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQzdCLEtBQUssQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxDQUFDO1FBQ0Qsc0JBQXNCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUNoQyxDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFVSxLQVNULGNBQWMsQ0FBQyxPQUFPLEVBUnhCLGtCQUFVLGtCQUNWLHNCQUFjLHNCQUNkLHdCQUFnQix3QkFDaEIsdUJBQWUsdUJBQ2YseUJBQWlCLHlCQUNqQix3QkFBZ0Isd0JBQ2hCLDJCQUFtQiwyQkFDbkIsOEJBQXNCLDZCQUNHO0FBRTNCLGtCQUFlLGNBQWMsQ0FBQyxPQUFPLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvYW5pbWF0aW9uU2xpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcblxuaW50ZXJmYWNlIEFuaW1hdGlvblN0YXRlIHtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBjdXJyZW50UGFnZTogc3RyaW5nO1xuICBpc1RyYW5zaXRpb25pbmc6IGJvb2xlYW47XG4gIHNob3dTa2VsZXRvbjogYm9vbGVhbjtcbiAgYW5pbWF0aW9uU3BlZWQ6ICdmYXN0JyB8ICdub3JtYWwnIHwgJ3Nsb3cnO1xuICBlbmFibGVBbmltYXRpb25zOiBib29sZWFuO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IEFuaW1hdGlvblN0YXRlID0ge1xuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBjdXJyZW50UGFnZTogJycsXG4gIGlzVHJhbnNpdGlvbmluZzogZmFsc2UsXG4gIHNob3dTa2VsZXRvbjogZmFsc2UsXG4gIGFuaW1hdGlvblNwZWVkOiAnbm9ybWFsJyxcbiAgZW5hYmxlQW5pbWF0aW9uczogdHJ1ZVxufTtcblxuY29uc3QgYW5pbWF0aW9uU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdhbmltYXRpb24nLFxuICBpbml0aWFsU3RhdGUsXG4gIHJlZHVjZXJzOiB7XG4gICAgc2V0TG9hZGluZzogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248Ym9vbGVhbj4pID0+IHtcbiAgICAgIHN0YXRlLmlzTG9hZGluZyA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgc3RhdGUuc2hvd1NrZWxldG9uID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBzZXRDdXJyZW50UGFnZTogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248c3RyaW5nPikgPT4ge1xuICAgICAgc3RhdGUuY3VycmVudFBhZ2UgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb25pbmc6IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPGJvb2xlYW4+KSA9PiB7XG4gICAgICBzdGF0ZS5pc1RyYW5zaXRpb25pbmcgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICAgIHNldFNob3dTa2VsZXRvbjogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248Ym9vbGVhbj4pID0+IHtcbiAgICAgIHN0YXRlLnNob3dTa2VsZXRvbiA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIH0sXG4gICAgc2V0QW5pbWF0aW9uU3BlZWQ6IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPCdmYXN0JyB8ICdub3JtYWwnIHwgJ3Nsb3cnPikgPT4ge1xuICAgICAgc3RhdGUuYW5pbWF0aW9uU3BlZWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICAgIHRvZ2dsZUFuaW1hdGlvbnM6IChzdGF0ZSkgPT4ge1xuICAgICAgc3RhdGUuZW5hYmxlQW5pbWF0aW9ucyA9ICFzdGF0ZS5lbmFibGVBbmltYXRpb25zO1xuICAgIH0sXG4gICAgc3RhcnRQYWdlVHJhbnNpdGlvbjogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248c3RyaW5nPikgPT4ge1xuICAgICAgc3RhdGUuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmN1cnJlbnRQYWdlID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBjb21wbGV0ZVBhZ2VUcmFuc2l0aW9uOiAoc3RhdGUpID0+IHtcbiAgICAgIHN0YXRlLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCB7XG4gIHNldExvYWRpbmcsXG4gIHNldEN1cnJlbnRQYWdlLFxuICBzZXRUcmFuc2l0aW9uaW5nLFxuICBzZXRTaG93U2tlbGV0b24sXG4gIHNldEFuaW1hdGlvblNwZWVkLFxuICB0b2dnbGVBbmltYXRpb25zLFxuICBzdGFydFBhZ2VUcmFuc2l0aW9uLFxuICBjb21wbGV0ZVBhZ2VUcmFuc2l0aW9uXG59ID0gYW5pbWF0aW9uU2xpY2UuYWN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgYW5pbWF0aW9uU2xpY2UucmVkdWNlcjsgIl0sInZlcnNpb24iOjN9