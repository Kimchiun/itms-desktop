{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/services/executionService.ts","mappings":";;;AACA,6EAA0E;AAE7D,QAAA,gBAAgB,GAAG;IAC5B,KAAK,CAAC,eAAe,CAAC,IAAuD;QACzE,YAAY;QACZ,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC;QACD,4BAA4B;QAC5B,OAAO,yCAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,EAAU;QAC7B,OAAO,yCAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,UAAkB;QAC5C,OAAO,yCAAmB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAU,EAAE,MAAoD;QAClF,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACpF,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC;QACD,OAAO,yCAAmB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAU;QAC5B,MAAM,yCAAmB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC;CACJ,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/services/executionService.ts"],"sourcesContent":["import { Execution } from '../models/Execution';\nimport { executionRepository } from '../repositories/executionRepository';\n\nexport const executionService = {\n    async createExecution(data: Omit<Execution, 'id' | 'createdAt' | 'updatedAt'>): Promise<Execution> {\n        // 상태 유효성 검사\n        if (!['Pass', 'Fail', 'Blocked', 'Untested'].includes(data.status)) {\n            throw new Error('Invalid execution status');\n        }\n        // 파일 경로 등 추가 비즈니스 로직 필요시 삽입\n        return executionRepository.insert(data);\n    },\n\n    async getExecutionById(id: number): Promise<Execution | null> {\n        return executionRepository.findById(id);\n    },\n\n    async getExecutionsByTestCase(testcaseId: number): Promise<Execution[]> {\n        return executionRepository.findByTestCase(testcaseId);\n    },\n\n    async updateExecution(id: number, update: Partial<Omit<Execution, 'id' | 'createdAt'>>): Promise<Execution | null> {\n        if (update.status && !['Pass', 'Fail', 'Blocked', 'Untested'].includes(update.status)) {\n            throw new Error('Invalid execution status');\n        }\n        return executionRepository.update(id, update);\n    },\n\n    async deleteExecution(id: number): Promise<void> {\n        await executionRepository.delete(id);\n    }\n}; "],"version":3}