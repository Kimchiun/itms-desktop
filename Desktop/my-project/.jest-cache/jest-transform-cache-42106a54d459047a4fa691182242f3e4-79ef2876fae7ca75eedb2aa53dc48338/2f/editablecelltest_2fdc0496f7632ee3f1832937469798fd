c08299d9110dff38d96701cf4a94fa83
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const EditableCell_1 = __importDefault(require("../src/renderer/shared/components/EditableCell"));
describe('EditableCell', () => {
    const mockOnSave = jest.fn();
    const mockOnCancel = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('텍스트 타입', () => {
        it('기본값을 표시한다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave }));
            expect(react_1.screen.getByText('테스트 제목')).toBeInTheDocument();
        });
        it('클릭 시 편집 모드로 진입한다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            expect(react_1.screen.getByDisplayValue('테스트 제목')).toBeInTheDocument();
        });
        it('Enter 키로 저장한다', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            const input = react_1.screen.getByDisplayValue('테스트 제목');
            react_1.fireEvent.change(input, { target: { value: '새 제목' } });
            react_1.fireEvent.keyDown(input, { key: 'Enter' });
            await (0, react_1.waitFor)(() => {
                expect(mockOnSave).toHaveBeenCalledWith('새 제목');
            });
        });
        it('Escape 키로 취소한다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave, onCancel: mockOnCancel }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            const input = react_1.screen.getByDisplayValue('테스트 제목');
            react_1.fireEvent.change(input, { target: { value: '새 제목' } });
            react_1.fireEvent.keyDown(input, { key: 'Escape' });
            expect(mockOnCancel).toHaveBeenCalled();
            expect(react_1.screen.getByText('테스트 제목')).toBeInTheDocument();
        });
        it('자동저장을 500ms debounce로 실행한다', async () => {
            jest.useFakeTimers();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            const input = react_1.screen.getByDisplayValue('테스트 제목');
            react_1.fireEvent.change(input, { target: { value: '새 제목' } });
            // 500ms 이전에는 호출되지 않음
            expect(mockOnSave).not.toHaveBeenCalled();
            // 500ms 후 호출됨
            jest.advanceTimersByTime(500);
            await (0, react_1.waitFor)(() => {
                expect(mockOnSave).toHaveBeenCalledWith('새 제목');
            });
            jest.useRealTimers();
        });
    });
    describe('셀렉트 타입', () => {
        const options = [
            { value: 'Active', label: '활성' },
            { value: 'Inactive', label: '비활성' },
            { value: 'Draft', label: '초안' }
        ];
        it('옵션을 표시한다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "Active", type: "select", options: options, onSave: mockOnSave }));
            expect(react_1.screen.getByText('활성')).toBeInTheDocument();
        });
        it('클릭 시 셀렉트로 변경된다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "Active", type: "select", options: options, onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('활성');
            react_1.fireEvent.click(displayElement);
            expect(react_1.screen.getByRole('combobox')).toBeInTheDocument();
        });
        it('값 변경 시 저장된다', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "Active", type: "select", options: options, onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('활성');
            react_1.fireEvent.click(displayElement);
            const select = react_1.screen.getByRole('combobox');
            react_1.fireEvent.change(select, { target: { value: 'Inactive' } });
            await (0, react_1.waitFor)(() => {
                expect(mockOnSave).toHaveBeenCalledWith('Inactive');
            });
        });
    });
    describe('체크박스 타입', () => {
        it('체크박스를 표시한다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: true, type: "checkbox", onSave: mockOnSave }));
            const checkbox = react_1.screen.getByRole('checkbox');
            expect(checkbox).toBeChecked();
        });
        it('체크박스 변경 시 저장된다', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: true, type: "checkbox", onSave: mockOnSave }));
            const checkbox = react_1.screen.getByRole('checkbox');
            react_1.fireEvent.click(checkbox);
            await (0, react_1.waitFor)(() => {
                expect(mockOnSave).toHaveBeenCalledWith(false);
            });
        });
    });
    describe('비활성화 상태', () => {
        it('disabled 시 클릭해도 편집되지 않는다', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave, disabled: true }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            expect(react_1.screen.queryByDisplayValue('테스트 제목')).not.toBeInTheDocument();
            expect(react_1.screen.getByText('테스트 제목')).toBeInTheDocument();
        });
    });
    describe('저장 표시', () => {
        it('저장 중 표시를 보여준다', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: "\uD14C\uC2A4\uD2B8 \uC81C\uBAA9", type: "text", onSave: mockOnSave }));
            const displayElement = react_1.screen.getByText('테스트 제목');
            react_1.fireEvent.click(displayElement);
            const input = react_1.screen.getByDisplayValue('테스트 제목');
            react_1.fireEvent.change(input, { target: { value: '새 제목' } });
            react_1.fireEvent.keyDown(input, { key: 'Enter' });
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('저장됨')).toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,