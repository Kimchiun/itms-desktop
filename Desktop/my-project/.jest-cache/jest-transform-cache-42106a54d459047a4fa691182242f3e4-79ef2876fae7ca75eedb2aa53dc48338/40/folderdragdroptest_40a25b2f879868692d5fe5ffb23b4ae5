ebc30bfc2319e5ae727d4185645e6557
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock folderRepository
globals_1.jest.mock('../src/main/app/domains/folders/repositories/folderRepository');
const folderService_1 = require("../src/main/app/domains/folders/services/folderService");
const folderRepository = __importStar(require("../src/main/app/domains/folders/repositories/folderRepository"));
const Folder_1 = require("../src/main/app/domains/folders/models/Folder");
const mockFolderRepository = folderRepository;
(0, globals_1.describe)('폴더 드래그 앤 드롭 기능 테스트', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('handleFolderDragDrop', () => {
        (0, globals_1.it)('순서 변경(REORDER) 드롭을 성공적으로 처리해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.REORDER,
                targetId: 2,
                position: 'after'
            };
            mockFolderRepository.getFolderById.mockResolvedValue({
                id: 1,
                name: '테스트 폴더',
                parentId: 0,
                createdBy: 'test',
                createdAt: new Date(),
                updatedAt: new Date()
            });
            mockFolderRepository.updateFolder.mockResolvedValue({
                id: 1,
                name: '테스트 폴더',
                parentId: 0,
                sortOrder: 2,
                createdBy: 'test',
                createdAt: new Date(),
                updatedAt: new Date()
            });
            // Act
            const result = await (0, folderService_1.handleFolderDragDrop)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.message).toContain('폴더 순서가 변경되었습니다');
            (0, globals_1.expect)(mockFolderRepository.updateFolder).toHaveBeenCalledWith(1, {
                sortOrder: globals_1.expect.any(Number)
            });
        });
        (0, globals_1.it)('계층 변경(HIERARCHY) 드롭을 성공적으로 처리해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 3
            };
            mockFolderRepository.getFolderById.mockResolvedValue({
                id: 1,
                name: '테스트 폴더',
                parentId: 0,
                createdBy: 'test',
                createdAt: new Date(),
                updatedAt: new Date()
            });
            mockFolderRepository.checkCircularReference.mockResolvedValue(false);
            mockFolderRepository.updateFolder.mockResolvedValue({
                id: 1,
                name: '테스트 폴더',
                parentId: 3,
                createdBy: 'test',
                createdAt: new Date(),
                updatedAt: new Date()
            });
            // Act
            const result = await (0, folderService_1.handleFolderDragDrop)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.message).toContain('폴더가 이동되었습니다');
            (0, globals_1.expect)(mockFolderRepository.updateFolder).toHaveBeenCalledWith(1, {
                parentId: 3
            });
        });
        (0, globals_1.it)('순환 참조가 감지되면 실패해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 2
            };
            mockFolderRepository.getFolderById.mockResolvedValue({
                id: 1,
                name: '테스트 폴더',
                parentId: 0,
                createdBy: 'test',
                createdAt: new Date(),
                updatedAt: new Date()
            });
            mockFolderRepository.checkCircularReference.mockResolvedValue(true);
            // Act
            const result = await (0, folderService_1.handleFolderDragDrop)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.message).toContain('순환 참조가 감지되었습니다');
        });
        (0, globals_1.it)('존재하지 않는 폴더를 드래그하면 실패해야 함', async () => {
            // Arrange
            const draggedFolderId = 999;
            const dropZone = {
                type: Folder_1.DropType.REORDER,
                targetId: 2,
                position: 'after'
            };
            mockFolderRepository.getFolderById.mockResolvedValue(null);
            // Act
            const result = await (0, folderService_1.handleFolderDragDrop)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.message).toContain('폴더를 찾을 수 없습니다');
        });
    });
    (0, globals_1.describe)('validateDropZone', () => {
        (0, globals_1.it)('유효한 드롭 존을 성공적으로 검증해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 2
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(false);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.message).toBeUndefined();
        });
        (0, globals_1.it)('순환 참조가 있는 드롭 존을 거부해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 2
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(true);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.message).toContain('순환 참조가 감지되었습니다');
        });
        (0, globals_1.it)('자기 자신으로의 드롭을 거부해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 1
            };
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.message).toContain('자기 자신으로는 이동할 수 없습니다');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,