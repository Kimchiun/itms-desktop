{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-dragdrop.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-dragdrop.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { handleFolderDragDrop, validateDropZone } from '../src/main/app/domains/folders/services/folderService';\nimport * as folderRepository from '../src/main/app/domains/folders/repositories/folderRepository';\nimport { DropType } from '../src/main/app/domains/folders/models/Folder';\n\n// Mock folderRepository\njest.mock('../src/main/app/domains/folders/repositories/folderRepository');\nconst mockFolderRepository = folderRepository as jest.Mocked<typeof folderRepository>;\n\ndescribe('폴더 드래그 앤 드롭 기능 테스트', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('handleFolderDragDrop', () => {\n    it('순서 변경(REORDER) 드롭을 성공적으로 처리해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.REORDER,\n        targetId: 2,\n        position: 'after' as const\n      };\n\n      mockFolderRepository.getFolderById.mockResolvedValue({\n        id: 1,\n        name: '테스트 폴더',\n        parentId: 0,\n        createdBy: 'test',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      mockFolderRepository.updateFolder.mockResolvedValue({\n        id: 1,\n        name: '테스트 폴더',\n        parentId: 0,\n        sortOrder: 2,\n        createdBy: 'test',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      // Act\n      const result = await handleFolderDragDrop(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.message).toContain('폴더 순서가 변경되었습니다');\n      expect(mockFolderRepository.updateFolder).toHaveBeenCalledWith(1, {\n        sortOrder: expect.any(Number)\n      });\n    });\n\n    it('계층 변경(HIERARCHY) 드롭을 성공적으로 처리해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 3\n      };\n\n      mockFolderRepository.getFolderById.mockResolvedValue({\n        id: 1,\n        name: '테스트 폴더',\n        parentId: 0,\n        createdBy: 'test',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(false);\n\n      mockFolderRepository.updateFolder.mockResolvedValue({\n        id: 1,\n        name: '테스트 폴더',\n        parentId: 3,\n        createdBy: 'test',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      // Act\n      const result = await handleFolderDragDrop(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.message).toContain('폴더가 이동되었습니다');\n      expect(mockFolderRepository.updateFolder).toHaveBeenCalledWith(1, {\n        parentId: 3\n      });\n    });\n\n    it('순환 참조가 감지되면 실패해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 2\n      };\n\n      mockFolderRepository.getFolderById.mockResolvedValue({\n        id: 1,\n        name: '테스트 폴더',\n        parentId: 0,\n        createdBy: 'test',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(true);\n\n      // Act\n      const result = await handleFolderDragDrop(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('순환 참조가 감지되었습니다');\n    });\n\n    it('존재하지 않는 폴더를 드래그하면 실패해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 999;\n      const dropZone = {\n        type: DropType.REORDER,\n        targetId: 2,\n        position: 'after' as const\n      };\n\n      mockFolderRepository.getFolderById.mockResolvedValue(null);\n\n      // Act\n      const result = await handleFolderDragDrop(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('폴더를 찾을 수 없습니다');\n    });\n  });\n\n  describe('validateDropZone', () => {\n    it('유효한 드롭 존을 성공적으로 검증해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 2\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(false);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(true);\n      expect(result.message).toBeUndefined();\n    });\n\n    it('순환 참조가 있는 드롭 존을 거부해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 2\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(true);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.message).toContain('순환 참조가 감지되었습니다');\n    });\n\n    it('자기 자신으로의 드롭을 거부해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 1\n      };\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.message).toContain('자기 자신으로는 이동할 수 없습니다');\n    });\n  });\n}); "],"version":3}