614ddaa25f865045c1797d74e7670ef2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSuite = createSuite;
exports.updateSuite = updateSuite;
exports.deleteSuite = deleteSuite;
exports.listSuites = listSuites;
exports.assignCaseToSuite = assignCaseToSuite;
exports.removeCaseFromSuite = removeCaseFromSuite;
exports.listCasesInSuite = listCasesInSuite;
exports.suiteCaseCount = suiteCaseCount;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
async function createSuite(data) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query(`INSERT INTO suites (release_id, name, description, executor, environment, due_date) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`, [data.releaseId, data.name, data.description, data.executor, data.environment, data.dueDate]);
    return rowToSuite(result.rows[0]);
}
async function updateSuite(id, patch) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query(`UPDATE suites SET name=$1, description=$2, executor=$3, environment=$4, due_date=$5 WHERE id=$6 RETURNING *`, [patch.name, patch.description, patch.executor, patch.environment, patch.dueDate, id]);
    if (result.rows.length === 0)
        return null;
    return rowToSuite(result.rows[0]);
}
async function deleteSuite(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('DELETE FROM suites WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function listSuites() {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM suites ORDER BY id');
    return result.rows.map(rowToSuite);
}
async function assignCaseToSuite(suiteId, testcaseId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    await pgClient.query('INSERT INTO suite_cases (suite_id, testcase_id) VALUES ($1, $2) ON CONFLICT DO NOTHING', [suiteId, testcaseId]);
}
async function removeCaseFromSuite(suiteId, testcaseId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    await pgClient.query('DELETE FROM suite_cases WHERE suite_id = $1 AND testcase_id = $2', [suiteId, testcaseId]);
}
async function listCasesInSuite(suiteId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT testcase_id FROM suite_cases WHERE suite_id = $1', [suiteId]);
    return result.rows.map((row) => row.testcase_id);
}
async function suiteCaseCount(suiteId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT COUNT(*) FROM suite_cases WHERE suite_id = $1', [suiteId]);
    return Number(result.rows[0].count);
}
function rowToSuite(row) {
    return {
        id: row.id,
        releaseId: row.release_id,
        name: row.name,
        description: row.description,
        executor: row.executor,
        environment: row.environment,
        dueDate: row.due_date,
        createdAt: row.created_at,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,