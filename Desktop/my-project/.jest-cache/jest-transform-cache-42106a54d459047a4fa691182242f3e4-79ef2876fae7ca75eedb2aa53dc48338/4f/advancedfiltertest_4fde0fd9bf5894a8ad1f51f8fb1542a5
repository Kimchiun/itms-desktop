8aab97437555fd11ede6a11e3bb3a9cc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock axios
jest.mock('../src/renderer/utils/axios', () => ({
    get: jest.fn(),
    post: jest.fn(),
    delete: jest.fn(),
}));
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const toolkit_1 = require("@reduxjs/toolkit");
const styled_components_1 = require("styled-components");
const AdvancedFilter_1 = __importDefault(require("../src/renderer/features/TestCaseManagement/components/AdvancedFilter"));
const theme_1 = require("../src/renderer/shared/theme");
require("@testing-library/jest-dom");
const mockAxios = require('../src/renderer/utils/axios');
const createTestStore = () => {
    return (0, toolkit_1.configureStore)({
        reducer: {
        // 필요한 리듀서들 추가
        },
        preloadedState: {}
    });
};
const renderAdvancedFilter = (props = {}) => {
    const store = createTestStore();
    const defaultProps = {
        onSearch: jest.fn(),
        onClear: jest.fn(),
        ...props
    };
    return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: store, children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: (0, jsx_runtime_1.jsx)(AdvancedFilter_1.default, { ...defaultProps }) }) }));
};
describe('AdvancedFilter Component', () => {
    beforeEach(() => {
        mockAxios.get.mockClear();
        mockAxios.post.mockClear();
        mockAxios.delete.mockClear();
    });
    describe('기본 렌더링', () => {
        it('should render advanced filter component', () => {
            renderAdvancedFilter();
            expect(react_1.screen.getByText('고급 검색')).toBeInTheDocument();
            expect(react_1.screen.getByText('키워드 검색')).toBeInTheDocument();
            expect(react_1.screen.getByText('폴더')).toBeInTheDocument();
            expect(react_1.screen.getByText('태그')).toBeInTheDocument();
            expect(react_1.screen.getByText('상태')).toBeInTheDocument();
            expect(react_1.screen.getByText('우선순위')).toBeInTheDocument();
            expect(react_1.screen.getByText('작성자')).toBeInTheDocument();
            expect(react_1.screen.getByText('생성일 (시작)')).toBeInTheDocument();
            expect(react_1.screen.getByText('생성일 (종료)')).toBeInTheDocument();
        });
        it('should render search and clear buttons', () => {
            renderAdvancedFilter();
            expect(react_1.screen.getByText('초기화')).toBeInTheDocument();
            expect(react_1.screen.getByText('검색')).toBeInTheDocument();
            expect(react_1.screen.getByText('현재 조건 저장')).toBeInTheDocument();
        });
    });
    describe('키워드 검색', () => {
        it('should handle keyword input', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            const keywordInput = react_1.screen.getByPlaceholderText('제목, 설명, 스텝에서 검색...');
            react_1.fireEvent.change(keywordInput, { target: { value: 'login test' } });
            expect(keywordInput).toHaveValue('login test');
        });
        it('should trigger search with keyword', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            const keywordInput = react_1.screen.getByPlaceholderText('제목, 설명, 스텝에서 검색...');
            react_1.fireEvent.change(keywordInput, { target: { value: 'login test' } });
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                keyword: 'login test'
            });
        });
    });
    describe('다중 선택 필터', () => {
        it('should open folder dropdown when clicked', () => {
            renderAdvancedFilter();
            const folderSelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(folderSelect);
            expect(react_1.screen.getByText('Smoke Tests')).toBeInTheDocument();
            expect(react_1.screen.getByText('Regression Tests')).toBeInTheDocument();
            expect(react_1.screen.getByText('Integration Tests')).toBeInTheDocument();
            expect(react_1.screen.getByText('Unit Tests')).toBeInTheDocument();
        });
        it('should select multiple folders', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            // 폴더 드롭다운 열기
            const folderSelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(folderSelect);
            // Smoke Tests 선택
            react_1.fireEvent.click(react_1.screen.getByText('Smoke Tests'));
            // Regression Tests 선택
            react_1.fireEvent.click(react_1.screen.getByText('Regression Tests'));
            // 검색 버튼 클릭
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                folders: ['Smoke Tests', 'Regression Tests']
            });
        });
        it('should select multiple tags', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            // 태그 드롭다운 열기
            const tagSelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(tagSelect);
            // critical 태그 선택
            react_1.fireEvent.click(react_1.screen.getByText('critical'));
            // smoke 태그 선택
            react_1.fireEvent.click(react_1.screen.getByText('smoke'));
            // 검색 버튼 클릭
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                tags: ['critical', 'smoke']
            });
        });
        it('should select status and priority', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            // 상태 드롭다운 열기
            const statusSelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(statusSelect);
            react_1.fireEvent.click(react_1.screen.getByText('Active'));
            // 우선순위 드롭다운 열기
            const prioritySelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(prioritySelect);
            react_1.fireEvent.click(react_1.screen.getByText('High'));
            // 검색 버튼 클릭
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                status: ['Active'],
                priority: ['High']
            });
        });
    });
    describe('작성자 필터', () => {
        it('should handle author input', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            const authorInput = react_1.screen.getByPlaceholderText('작성자 입력...');
            react_1.fireEvent.change(authorInput, { target: { value: 'tester1, tester2' } });
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                createdBy: ['tester1', 'tester2']
            });
        });
    });
    describe('날짜 범위 필터', () => {
        it('should handle date range inputs', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            const fromDateInput = react_1.screen.getByLabelText('생성일 (시작)');
            const toDateInput = react_1.screen.getByLabelText('생성일 (종료)');
            react_1.fireEvent.change(fromDateInput, { target: { value: '2024-01-01' } });
            react_1.fireEvent.change(toDateInput, { target: { value: '2024-12-31' } });
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                dateRange: {
                    from: '2024-01-01',
                    to: '2024-12-31'
                }
            });
        });
    });
    describe('복합 필터', () => {
        it('should combine multiple filters', () => {
            const onSearch = jest.fn();
            renderAdvancedFilter({ onSearch });
            // 키워드 입력
            const keywordInput = react_1.screen.getByPlaceholderText('제목, 설명, 스텝에서 검색...');
            react_1.fireEvent.change(keywordInput, { target: { value: 'login' } });
            // 폴더 선택
            const folderSelect = react_1.screen.getByText('선택하세요');
            react_1.fireEvent.click(folderSelect);
            react_1.fireEvent.click(react_1.screen.getByText('Smoke Tests'));
            // 우선순위 선택
            const prioritySelect = react_1.screen.getAllByText('선택하세요')[3]; // 우선순위는 4번째
            react_1.fireEvent.click(prioritySelect);
            react_1.fireEvent.click(react_1.screen.getByText('High'));
            // 검색 버튼 클릭
            const searchButton = react_1.screen.getByText('검색');
            react_1.fireEvent.click(searchButton);
            expect(onSearch).toHaveBeenCalledWith({
                keyword: 'login',
                folders: ['Smoke Tests'],
                priority: ['High']
            });
        });
    });
    describe('초기화 기능', () => {
        it('should clear all filters when clear button is clicked', () => {
            const onClear = jest.fn();
            renderAdvancedFilter({ onClear });
            // 필터 설정
            const keywordInput = react_1.screen.getByPlaceholderText('제목, 설명, 스텝에서 검색...');
            react_1.fireEvent.change(keywordInput, { target: { value: 'test' } });
            // 초기화 버튼 클릭
            const clearButton = react_1.screen.getByText('초기화');
            react_1.fireEvent.click(clearButton);
            expect(onClear).toHaveBeenCalled();
            expect(keywordInput).toHaveValue('');
        });
    });
    describe('검색 프리셋', () => {
        it('should load and display saved presets', async () => {
            const mockPresets = [
                {
                    id: 'preset_1',
                    name: 'Critical Tests',
                    filters: { priority: ['High'], tags: ['critical'] },
                    createdBy: 'tester1',
                    createdAt: '2024-01-15T00:00:00Z'
                }
            ];
            mockAxios.get.mockResolvedValue({ data: mockPresets });
            renderAdvancedFilter();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Critical Tests')).toBeInTheDocument();
            });
        });
        it('should open save preset modal when save button is clicked', () => {
            renderAdvancedFilter();
            const saveButton = react_1.screen.getByText('현재 조건 저장');
            react_1.fireEvent.click(saveButton);
            expect(react_1.screen.getByText('검색 조건 저장')).toBeInTheDocument();
            expect(react_1.screen.getByPlaceholderText('프리셋 이름을 입력하세요')).toBeInTheDocument();
        });
        it('should save preset when modal form is submitted', async () => {
            const mockPreset = {
                id: 'preset_123',
                name: 'My Preset',
                filters: {},
                createdBy: 'tester1',
                createdAt: '2024-01-15T00:00:00Z'
            };
            mockAxios.post.mockResolvedValue({ data: mockPreset });
            renderAdvancedFilter();
            // 저장 모달 열기
            const saveButton = react_1.screen.getByText('현재 조건 저장');
            react_1.fireEvent.click(saveButton);
            // 프리셋 이름 입력
            const nameInput = react_1.screen.getByPlaceholderText('프리셋 이름을 입력하세요');
            react_1.fireEvent.change(nameInput, { target: { value: 'My Preset' } });
            // 저장 버튼 클릭
            const modalSaveButton = react_1.screen.getByText('저장');
            react_1.fireEvent.click(modalSaveButton);
            await (0, react_1.waitFor)(() => {
                expect(mockAxios.post).toHaveBeenCalledWith('/api/testcases/search/presets', {
                    name: 'My Preset',
                    filters: {},
                    createdBy: 'current-user'
                });
            });
        });
        it('should load preset when preset tag is clicked', async () => {
            const onSearch = jest.fn();
            const mockPresets = [
                {
                    id: 'preset_1',
                    name: 'Critical Tests',
                    filters: { priority: ['High'], tags: ['critical'] },
                    createdBy: 'tester1',
                    createdAt: '2024-01-15T00:00:00Z'
                }
            ];
            mockAxios.get.mockResolvedValue({ data: mockPresets });
            renderAdvancedFilter({ onSearch });
            await (0, react_1.waitFor)(() => {
                const presetTag = react_1.screen.getByText('Critical Tests');
                react_1.fireEvent.click(presetTag);
            });
            expect(onSearch).toHaveBeenCalledWith({
                priority: ['High'],
                tags: ['critical']
            });
        });
    });
    describe('접근성', () => {
        it('should have proper ARIA labels', () => {
            renderAdvancedFilter();
            expect(react_1.screen.getByLabelText('키워드 검색')).toBeInTheDocument();
            expect(react_1.screen.getByLabelText('작성자')).toBeInTheDocument();
            expect(react_1.screen.getByLabelText('생성일 (시작)')).toBeInTheDocument();
            expect(react_1.screen.getByLabelText('생성일 (종료)')).toBeInTheDocument();
        });
        it('should support keyboard navigation', () => {
            renderAdvancedFilter();
            const keywordInput = react_1.screen.getByPlaceholderText('제목, 설명, 스텝에서 검색...');
            keywordInput.focus();
            expect(keywordInput).toHaveFocus();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,