0b8f72744f2ce4f5915ab301c2e94ce9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAdvancedSearchResults = exports.setAdvancedSearchFilters = exports.clearDetail = exports.setSearchParams = exports.createTestCase = exports.deleteSearchPreset = exports.fetchSearchPresets = exports.saveSearchPreset = exports.advancedSearchTestCases = exports.searchTestCases = exports.fetchTestCaseDetail = exports.fetchTestCases = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = __importDefault(require("../../../utils/axios"));
// showToast 임시 선언 (실제 구현은 공통 유틸로 분리 권장)
function showToast(message, type = 'error') {
    alert(`[${type}] ${message}`);
}
const initialState = {
    list: [],
    detail: null,
    loading: false,
    error: null,
    searchParams: {},
    advancedSearch: {
        filters: {},
        results: null,
        loading: false,
        error: null,
    },
    presets: [],
};
exports.fetchTestCases = (0, toolkit_1.createAsyncThunk)('testcases/fetch', async (_, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.get('/api/testcases');
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '테스트케이스 불러오기 실패', 'error');
        return rejectWithValue(error.message);
    }
});
exports.fetchTestCaseDetail = (0, toolkit_1.createAsyncThunk)('testcases/fetchDetail', async (id, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.get(`/api/testcases/${id}`);
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '상세 불러오기 실패', 'error');
        return rejectWithValue(error.message);
    }
});
exports.searchTestCases = (0, toolkit_1.createAsyncThunk)('testcases/search', async (query, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.post('/api/testcases/search', query);
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '검색 실패', 'error');
        return rejectWithValue(error.message);
    }
});
// 고급 검색
exports.advancedSearchTestCases = (0, toolkit_1.createAsyncThunk)('testcases/advancedSearch', async ({ filters, page = 0, size = 20 }, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.post('/api/testcases/search/advanced', { filters, page, size });
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '고급 검색 실패', 'error');
        return rejectWithValue(error.message);
    }
});
// 검색 프리셋 저장
exports.saveSearchPreset = (0, toolkit_1.createAsyncThunk)('testcases/savePreset', async (preset, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.post('/api/testcases/search/presets', preset);
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '프리셋 저장 실패', 'error');
        return rejectWithValue(error.message);
    }
});
// 검색 프리셋 목록 조회
exports.fetchSearchPresets = (0, toolkit_1.createAsyncThunk)('testcases/fetchPresets', async (arg, { rejectWithValue }) => {
    try {
        const params = arg.createdBy ? { createdBy: arg.createdBy } : {};
        const res = await axios_1.default.get('/api/testcases/search/presets', { params });
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '프리셋 목록 불러오기 실패', 'error');
        return rejectWithValue(error.message);
    }
});
// 검색 프리셋 삭제
exports.deleteSearchPreset = (0, toolkit_1.createAsyncThunk)('testcases/deletePreset', async (presetId, { rejectWithValue }) => {
    try {
        await axios_1.default.delete(`/api/testcases/search/presets/${presetId}`);
        return presetId;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '프리셋 삭제 실패', 'error');
        return rejectWithValue(error.message);
    }
});
// 테스트 케이스 생성
exports.createTestCase = (0, toolkit_1.createAsyncThunk)('testcases/create', async (testCaseData, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.post('/api/testcases', testCaseData);
        showToast('테스트 케이스가 성공적으로 생성되었습니다!', 'success');
        return res.data;
    }
    catch (error) {
        showToast(error?.response?.data?.message || error.message || '테스트 케이스 생성 실패', 'error');
        return rejectWithValue(error.message);
    }
});
const testCaseSlice = (0, toolkit_1.createSlice)({
    name: 'testcases',
    initialState,
    reducers: {
        setSearchParams(state, action) {
            state.searchParams = action.payload;
        },
        clearDetail(state) {
            state.detail = null;
        },
        setAdvancedSearchFilters(state, action) {
            state.advancedSearch.filters = action.payload;
        },
        clearAdvancedSearchResults(state) {
            state.advancedSearch.results = null;
            state.advancedSearch.error = null;
        },
    },
    extraReducers: builder => {
        builder
            .addCase(exports.fetchTestCases.pending, state => { state.loading = true; state.error = null; })
            .addCase(exports.fetchTestCases.fulfilled, (state, action) => { state.loading = false; state.list = action.payload; })
            .addCase(exports.fetchTestCases.rejected, (state, action) => { state.loading = false; state.error = action.error.message || '불러오기 실패'; })
            .addCase(exports.fetchTestCaseDetail.pending, state => { state.loading = true; state.error = null; })
            .addCase(exports.fetchTestCaseDetail.fulfilled, (state, action) => { state.loading = false; state.detail = action.payload; })
            .addCase(exports.fetchTestCaseDetail.rejected, (state, action) => { state.loading = false; state.error = action.error.message || '상세 불러오기 실패'; })
            .addCase(exports.searchTestCases.pending, state => { state.loading = true; state.error = null; })
            .addCase(exports.searchTestCases.fulfilled, (state, action) => { state.loading = false; state.list = action.payload; })
            .addCase(exports.searchTestCases.rejected, (state, action) => { state.loading = false; state.error = action.error.message || '검색 실패'; })
            // 고급 검색
            .addCase(exports.advancedSearchTestCases.pending, state => {
            state.advancedSearch.loading = true;
            state.advancedSearch.error = null;
        })
            .addCase(exports.advancedSearchTestCases.fulfilled, (state, action) => {
            state.advancedSearch.loading = false;
            state.advancedSearch.results = action.payload;
        })
            .addCase(exports.advancedSearchTestCases.rejected, (state, action) => {
            state.advancedSearch.loading = false;
            state.advancedSearch.error = action.error.message || '고급 검색 실패';
        })
            // 프리셋 저장
            .addCase(exports.saveSearchPreset.fulfilled, (state, action) => {
            state.presets.unshift(action.payload);
        })
            // 프리셋 목록 조회
            .addCase(exports.fetchSearchPresets.fulfilled, (state, action) => {
            state.presets = action.payload;
        })
            // 프리셋 삭제
            .addCase(exports.deleteSearchPreset.fulfilled, (state, action) => {
            state.presets = state.presets.filter(preset => preset.id !== action.payload);
        })
            // 테스트 케이스 생성
            .addCase(exports.createTestCase.pending, state => { state.loading = true; state.error = null; })
            .addCase(exports.createTestCase.fulfilled, (state, action) => {
            state.loading = false;
            state.list.unshift(action.payload);
        })
            .addCase(exports.createTestCase.rejected, (state, action) => {
            state.loading = false;
            state.error = action.error.message || '생성 실패';
        });
    },
});
_a = testCaseSlice.actions, exports.setSearchParams = _a.setSearchParams, exports.clearDetail = _a.clearDetail, exports.setAdvancedSearchFilters = _a.setAdvancedSearchFilters, exports.clearAdvancedSearchResults = _a.clearAdvancedSearchResults;
exports.default = testCaseSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,