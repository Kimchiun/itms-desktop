72eafa46f714ff1feaef63c9d9544fe1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.getAllFolders = getAllFolders;
exports.getFolderTree = getFolderTree;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.moveFolder = moveFolder;
exports.getTestCasesInFolder = getTestCasesInFolder;
exports.addTestCaseToFolder = addTestCaseToFolder;
exports.removeTestCaseFromFolder = removeTestCaseFromFolder;
exports.moveTestCase = moveTestCase;
const folderRepository = __importStar(require("../repositories/folderRepository"));
async function createFolder(request) {
    // 순환 참조 검사
    if (request.parentId) {
        const hasCircularReference = await folderRepository.checkCircularReference(0, request.parentId);
        if (hasCircularReference) {
            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
        }
    }
    return await folderRepository.createFolder({
        name: request.name,
        description: request.description,
        parentId: request.parentId,
        createdBy: request.createdBy
    });
}
async function getFolderById(id) {
    return await folderRepository.getFolderById(id);
}
async function getAllFolders() {
    return await folderRepository.getAllFolders();
}
async function getFolderTree() {
    return await folderRepository.getFolderTree();
}
async function updateFolder(id, request) {
    const folder = await folderRepository.getFolderById(id);
    if (!folder) {
        throw new Error('폴더를 찾을 수 없습니다.');
    }
    // 순환 참조 검사 (parentId가 변경되는 경우)
    if (request.parentId !== undefined && request.parentId !== folder.parentId) {
        const hasCircularReference = await folderRepository.checkCircularReference(id, request.parentId);
        if (hasCircularReference) {
            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
        }
    }
    return await folderRepository.updateFolder(id, request);
}
async function deleteFolder(id) {
    const folder = await folderRepository.getFolderById(id);
    if (!folder) {
        throw new Error('폴더를 찾을 수 없습니다.');
    }
    // 루트 폴더는 삭제 불가
    if (folder.name === 'Root') {
        throw new Error('루트 폴더는 삭제할 수 없습니다.');
    }
    return await folderRepository.deleteFolder(id);
}
async function moveFolder(id, request) {
    const folder = await folderRepository.getFolderById(id);
    if (!folder) {
        throw new Error('폴더를 찾을 수 없습니다.');
    }
    // 순환 참조 검사
    if (request.targetParentId !== undefined) {
        const hasCircularReference = await folderRepository.checkCircularReference(id, request.targetParentId);
        if (hasCircularReference) {
            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
        }
    }
    return await folderRepository.updateFolder(id, {
        parentId: request.targetParentId
    });
}
async function getTestCasesInFolder(folderId) {
    return await folderRepository.getTestCasesInFolder(folderId);
}
async function addTestCaseToFolder(testCaseId, folderId) {
    await folderRepository.addTestCaseToFolder(testCaseId, folderId);
}
async function removeTestCaseFromFolder(testCaseId, folderId) {
    await folderRepository.removeTestCaseFromFolder(testCaseId, folderId);
}
async function moveTestCase(testCaseId, fromFolderId, toFolderId) {
    await folderRepository.moveTestCase(testCaseId, fromFolderId, toFolderId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,