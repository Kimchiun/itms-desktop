12cb1bd96237ca2c6ea71eac8fe90139
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.getAllFolders = getAllFolders;
exports.getFolderTree = getFolderTree;
exports.getFolderTreePaginated = getFolderTreePaginated;
exports.getFolderTreeWithLazyLoading = getFolderTreeWithLazyLoading;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.getTestCasesInFolder = getTestCasesInFolder;
exports.addTestCaseToFolder = addTestCaseToFolder;
exports.removeTestCaseFromFolder = removeTestCaseFromFolder;
exports.moveTestCase = moveTestCase;
exports.moveTestCasesBatch = moveTestCasesBatch;
exports.checkCircularReference = checkCircularReference;
exports.reorderFolder = reorderFolder;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
async function createFolder(folder) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('INSERT INTO folders (name, description, parent_id, created_by) VALUES ($1, $2, $3, $4) RETURNING *', [folder.name, folder.description, folder.parentId, folder.createdBy]);
    return result.rows[0];
}
async function getFolderById(id) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM folders WHERE id = $1', [id]);
    return result.rows[0] || null;
}
async function getAllFolders() {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM folders ORDER BY name');
    return result.rows;
}
async function getFolderTree() {
    // 모든 폴더 조회
    const folders = await getAllFolders();
    // 테스트 케이스 수 조회
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const testCaseCounts = await pgClient.query(`
        SELECT folder_id, COUNT(*) as count 
        FROM case_folders 
        GROUP BY folder_id
    `);
    const countMap = new Map();
    testCaseCounts.rows.forEach((row) => {
        countMap.set(row.folder_id, parseInt(row.count));
    });
    // 트리 구조 생성
    const folderMap = new Map();
    const rootFolders = [];
    folders.forEach(folder => {
        const folderTree = {
            ...folder,
            children: [],
            testCaseCount: countMap.get(folder.id) || 0
        };
        folderMap.set(folder.id, folderTree);
    });
    folders.forEach(folder => {
        const folderTree = folderMap.get(folder.id);
        if (folder.parentId) {
            const parent = folderMap.get(folder.parentId);
            if (parent) {
                parent.children.push(folderTree);
            }
        }
        else {
            rootFolders.push(folderTree);
        }
    });
    return rootFolders;
}
async function getFolderTreePaginated(page = 1, limit = 100) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const offset = (page - 1) * limit;
    // 전체 개수 조회
    const countResult = await pgClient.query('SELECT COUNT(*) as total FROM folders');
    const total = parseInt(countResult.rows[0].total);
    // 페이징된 폴더 조회
    const result = await pgClient.query('SELECT * FROM folders ORDER BY name LIMIT $1 OFFSET $2', [limit, offset]);
    const folders = result.rows.map((row) => ({
        ...row,
        children: [],
        testCaseCount: 0
    }));
    return { folders, total };
}
async function getFolderTreeWithLazyLoading(parentId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const whereClause = parentId ? 'WHERE parent_id = $1' : 'WHERE parent_id IS NULL';
    const params = parentId ? [parentId] : [];
    const result = await pgClient.query(`SELECT * FROM folders ${whereClause} ORDER BY name`, params);
    return result.rows.map((row) => ({
        ...row,
        children: [],
        testCaseCount: 0
    }));
}
async function updateFolder(id, updates) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const fields = [];
    const values = [];
    let paramIndex = 1;
    if (updates.name !== undefined) {
        fields.push(`name = $${paramIndex++}`);
        values.push(updates.name);
    }
    if (updates.description !== undefined) {
        fields.push(`description = $${paramIndex++}`);
        values.push(updates.description);
    }
    if (updates.parentId !== undefined) {
        fields.push(`parent_id = $${paramIndex++}`);
        values.push(updates.parentId);
    }
    fields.push(`updated_at = CURRENT_TIMESTAMP`);
    values.push(id);
    const result = await pgClient.query(`UPDATE folders SET ${fields.join(', ')} WHERE id = $${paramIndex} RETURNING *`, values);
    return result.rows[0] || null;
}
async function deleteFolder(id) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('DELETE FROM folders WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function getTestCasesInFolder(folderId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT testcase_id FROM case_folders WHERE folder_id = $1', [folderId]);
    return result.rows.map((row) => row.testcase_id);
}
async function addTestCaseToFolder(testCaseId, folderId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('INSERT INTO case_folders (testcase_id, folder_id) VALUES ($1, $2) ON CONFLICT DO NOTHING RETURNING id', [testCaseId, folderId]);
    if (result.rowCount === 0) {
        throw new Error('이미 해당 폴더에 포함된 테스트케이스입니다.');
    }
}
async function removeTestCaseFromFolder(testCaseId, folderId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    await pgClient.query('DELETE FROM case_folders WHERE testcase_id = $1 AND folder_id = $2', [testCaseId, folderId]);
}
async function moveTestCase(testCaseId, fromFolderId, toFolderId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    await pgClient.query('BEGIN');
    try {
        await removeTestCaseFromFolder(testCaseId, fromFolderId);
        await addTestCaseToFolder(testCaseId, toFolderId);
        await pgClient.query('COMMIT');
    }
    catch (error) {
        await pgClient.query('ROLLBACK');
        throw error;
    }
}
async function moveTestCasesBatch(testCaseIds, fromFolderId, toFolderId) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    await pgClient.query('BEGIN');
    try {
        // 기존 관계 제거
        await pgClient.query('DELETE FROM case_folders WHERE testcase_id = ANY($1) AND folder_id = $2', [testCaseIds, fromFolderId]);
        // 새 관계 추가 (배치 처리)
        const values = testCaseIds.map((_, index) => `($${index + 1}, $${testCaseIds.length + 1})`).join(', ');
        await pgClient.query(`INSERT INTO case_folders (testcase_id, folder_id) VALUES ${values}`, [...testCaseIds, toFolderId]);
        await pgClient.query('COMMIT');
    }
    catch (error) {
        await pgClient.query('ROLLBACK');
        throw error;
    }
}
async function checkCircularReference(folderId, newParentId) {
    if (!newParentId)
        return false;
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const visited = new Set();
    let currentId = newParentId;
    while (currentId) {
        if (visited.has(currentId) || currentId === folderId) {
            return true; // 순환 참조 발견
        }
        visited.add(currentId);
        const result = await pgClient.query('SELECT parent_id FROM folders WHERE id = $1', [currentId]);
        if (result.rows.length === 0)
            break;
        currentId = result.rows[0].parent_id;
    }
    return false;
}
async function reorderFolder(folderId, targetFolderId, position) {
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    try {
        // 현재 폴더와 타겟 폴더 정보 조회
        const folderResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [folderId]);
        const targetResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [targetFolderId]);
        if (folderResult.rows.length === 0 || targetResult.rows.length === 0) {
            return null;
        }
        const folder = folderResult.rows[0];
        const targetFolder = targetResult.rows[0];
        // 같은 부모 폴더 내에서만 순서 변경 가능
        if (folder.parent_id !== targetFolder.parent_id) {
            throw new Error('같은 레벨의 폴더 간에만 순서를 변경할 수 있습니다.');
        }
        // 같은 부모를 가진 모든 폴더 조회 (순서대로)
        const siblingsResult = await pgClient.query('SELECT * FROM folders WHERE parent_id = $1 ORDER BY sort_order, name', [folder.parent_id]);
        const siblings = siblingsResult.rows;
        const folderIndex = siblings.findIndex(f => f.id === folderId);
        const targetIndex = siblings.findIndex(f => f.id === targetFolderId);
        if (folderIndex === -1 || targetIndex === -1) {
            return null;
        }
        // 새로운 순서 계산
        let newIndex;
        if (position === 'before') {
            newIndex = targetIndex;
        }
        else {
            newIndex = targetIndex + 1;
        }
        // 이미 올바른 위치에 있는지 확인
        if (folderIndex === newIndex || (position === 'after' && folderIndex === newIndex - 1)) {
            return folder;
        }
        // sort_order 필드가 있는지 확인하고, 없다면 생성
        const checkSortOrderResult = await pgClient.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'folders' AND column_name = 'sort_order'
        `);
        if (checkSortOrderResult.rows.length === 0) {
            // sort_order 컬럼 추가
            await pgClient.query('ALTER TABLE folders ADD COLUMN sort_order INTEGER DEFAULT 0');
            console.log('sort_order 컬럼이 추가되었습니다.');
        }
        // 현재 sort_order 값들 업데이트
        const updateSortOrders = async () => {
            // 모든 형제 폴더의 sort_order를 10 단위로 설정
            for (let i = 0; i < siblings.length; i++) {
                await pgClient.query('UPDATE folders SET sort_order = $1 WHERE id = $2', [(i + 1) * 10, siblings[i].id]);
            }
        };
        // 순서 변경 로직
        const reorderSiblings = async () => {
            // 이동할 폴더를 제거
            const siblingsWithoutMoved = siblings.filter(f => f.id !== folderId);
            // 새 위치에 삽입
            const newSiblings = [...siblingsWithoutMoved];
            if (position === 'before') {
                newSiblings.splice(targetIndex, 0, folder);
            }
            else {
                newSiblings.splice(targetIndex + 1, 0, folder);
            }
            // 새로운 sort_order 값들 계산
            const newSortOrders = newSiblings.map((sibling, index) => ({
                id: sibling.id,
                sort_order: (index + 1) * 10
            }));
            // 모든 형제 폴더의 sort_order 업데이트
            for (const { id, sort_order } of newSortOrders) {
                await pgClient.query('UPDATE folders SET sort_order = $1 WHERE id = $2', [sort_order, id]);
            }
        };
        // 트랜잭션 시작
        await pgClient.query('BEGIN');
        try {
            // sort_order 컬럼이 없다면 추가
            if (checkSortOrderResult.rows.length === 0) {
                await updateSortOrders();
            }
            // 순서 변경 실행
            await reorderSiblings();
            // 업데이트된 폴더 정보 조회
            const updatedFolderResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [folderId]);
            // 트랜잭션 커밋
            await pgClient.query('COMMIT');
            return updatedFolderResult.rows[0] || null;
        }
        catch (error) {
            // 트랜잭션 롤백
            await pgClient.query('ROLLBACK');
            throw error;
        }
    }
    catch (error) {
        console.error('폴더 순서 변경 실패:', error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,