{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/repositories/folderRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/repositories/folderRepository.ts"],"sourcesContent":["import { getPgClient } from '../../../infrastructure/database/pgClient';\nimport { Folder, FolderTree } from '../models/Folder';\n\nexport async function createFolder(folder: Omit<Folder, 'id' | 'createdAt' | 'updatedAt'>): Promise<Folder> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query(\n        'INSERT INTO folders (name, description, parent_id, created_by) VALUES ($1, $2, $3, $4) RETURNING *',\n        [folder.name, folder.description, folder.parentId, folder.createdBy]\n    );\n    return result.rows[0];\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query('SELECT * FROM folders WHERE id = $1', [id]);\n    return result.rows[0] || null;\n}\n\nexport async function getAllFolders(): Promise<Folder[]> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query('SELECT * FROM folders ORDER BY name');\n    return result.rows;\n}\n\nexport async function getFolderTree(): Promise<FolderTree[]> {\n    // 모든 폴더 조회\n    const folders = await getAllFolders();\n    \n    // 테스트 케이스 수 조회\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const testCaseCounts = await pgClient.query(`\n        SELECT folder_id, COUNT(*) as count \n        FROM case_folders \n        GROUP BY folder_id\n    `);\n    \n    const countMap = new Map<number, number>();\n    testCaseCounts.rows.forEach((row: any) => {\n        countMap.set(row.folder_id, parseInt(row.count));\n    });\n    \n    // 트리 구조 생성\n    const folderMap = new Map<number, FolderTree>();\n    const rootFolders: FolderTree[] = [];\n    \n    folders.forEach(folder => {\n        const folderTree: FolderTree = {\n            ...folder,\n            children: [],\n            testCaseCount: countMap.get(folder.id) || 0\n        };\n        folderMap.set(folder.id, folderTree);\n    });\n    \n    folders.forEach(folder => {\n        const folderTree = folderMap.get(folder.id)!;\n        if (folder.parentId) {\n            const parent = folderMap.get(folder.parentId);\n            if (parent) {\n                parent.children.push(folderTree);\n            }\n        } else {\n            rootFolders.push(folderTree);\n        }\n    });\n    \n    return rootFolders;\n}\n\nexport async function getFolderTreePaginated(page = 1, limit = 100): Promise<{ folders: FolderTree[], total: number }> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const offset = (page - 1) * limit;\n    \n    // 전체 개수 조회\n    const countResult = await pgClient.query('SELECT COUNT(*) as total FROM folders');\n    const total = parseInt(countResult.rows[0].total);\n    \n    // 페이징된 폴더 조회\n    const result = await pgClient.query(\n        'SELECT * FROM folders ORDER BY name LIMIT $1 OFFSET $2',\n        [limit, offset]\n    );\n    \n    const folders = result.rows.map((row: any) => ({\n        ...row,\n        children: [],\n        testCaseCount: 0\n    }));\n    \n    return { folders, total };\n}\n\nexport async function getFolderTreeWithLazyLoading(parentId?: number): Promise<FolderTree[]> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const whereClause = parentId ? 'WHERE parent_id = $1' : 'WHERE parent_id IS NULL';\n    const params = parentId ? [parentId] : [];\n    \n    const result = await pgClient.query(\n        `SELECT * FROM folders ${whereClause} ORDER BY name`,\n        params\n    );\n    \n    return result.rows.map((row: any) => ({\n        ...row,\n        children: [],\n        testCaseCount: 0\n    }));\n}\n\nexport async function updateFolder(id: number, updates: Partial<Folder>): Promise<Folder | null> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const fields = [];\n    const values = [];\n    let paramIndex = 1;\n    \n    if (updates.name !== undefined) {\n        fields.push(`name = $${paramIndex++}`);\n        values.push(updates.name);\n    }\n    if (updates.description !== undefined) {\n        fields.push(`description = $${paramIndex++}`);\n        values.push(updates.description);\n    }\n    if (updates.parentId !== undefined) {\n        fields.push(`parent_id = $${paramIndex++}`);\n        values.push(updates.parentId);\n    }\n    \n    fields.push(`updated_at = CURRENT_TIMESTAMP`);\n    values.push(id);\n    \n    const result = await pgClient.query(\n        `UPDATE folders SET ${fields.join(', ')} WHERE id = $${paramIndex} RETURNING *`,\n        values\n    );\n    \n    return result.rows[0] || null;\n}\n\nexport async function deleteFolder(id: number): Promise<boolean> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query('DELETE FROM folders WHERE id = $1', [id]);\n    return (result.rowCount ?? 0) > 0;\n}\n\nexport async function getTestCasesInFolder(folderId: number): Promise<number[]> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query(\n        'SELECT testcase_id FROM case_folders WHERE folder_id = $1',\n        [folderId]\n    );\n    return result.rows.map((row: any) => row.testcase_id);\n}\n\nexport async function addTestCaseToFolder(testCaseId: number, folderId: number): Promise<void> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    const result = await pgClient.query(\n        'INSERT INTO case_folders (testcase_id, folder_id) VALUES ($1, $2) ON CONFLICT DO NOTHING RETURNING id',\n        [testCaseId, folderId]\n    );\n    if (result.rowCount === 0) {\n        throw new Error('이미 해당 폴더에 포함된 테스트케이스입니다.');\n    }\n}\n\nexport async function removeTestCaseFromFolder(testCaseId: number, folderId: number): Promise<void> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    await pgClient.query(\n        'DELETE FROM case_folders WHERE testcase_id = $1 AND folder_id = $2',\n        [testCaseId, folderId]\n    );\n}\n\nexport async function moveTestCase(testCaseId: number, fromFolderId: number, toFolderId: number): Promise<void> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    await pgClient.query('BEGIN');\n    try {\n        await removeTestCaseFromFolder(testCaseId, fromFolderId);\n        await addTestCaseToFolder(testCaseId, toFolderId);\n        await pgClient.query('COMMIT');\n    } catch (error) {\n        await pgClient.query('ROLLBACK');\n        throw error;\n    }\n}\n\nexport async function moveTestCasesBatch(testCaseIds: number[], fromFolderId: number, toFolderId: number): Promise<void> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    await pgClient.query('BEGIN');\n    try {\n        // 기존 관계 제거\n        await pgClient.query(\n            'DELETE FROM case_folders WHERE testcase_id = ANY($1) AND folder_id = $2',\n            [testCaseIds, fromFolderId]\n        );\n        \n        // 새 관계 추가 (배치 처리)\n        const values = testCaseIds.map((_, index) => `($${index + 1}, $${testCaseIds.length + 1})`).join(', ');\n        await pgClient.query(\n            `INSERT INTO case_folders (testcase_id, folder_id) VALUES ${values}`,\n            [...testCaseIds, toFolderId]\n        );\n        \n        await pgClient.query('COMMIT');\n    } catch (error) {\n        await pgClient.query('ROLLBACK');\n        throw error;\n    }\n}\n\nexport async function checkCircularReference(folderId: number, newParentId: number): Promise<boolean> {\n    if (!newParentId) return false;\n    \n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n    \n    const visited = new Set<number>();\n    let currentId = newParentId;\n    \n    while (currentId) {\n        if (visited.has(currentId) || currentId === folderId) {\n            return true; // 순환 참조 발견\n        }\n        \n        visited.add(currentId);\n        const result = await pgClient.query(\n            'SELECT parent_id FROM folders WHERE id = $1',\n            [currentId]\n        );\n        \n        if (result.rows.length === 0) break;\n        currentId = result.rows[0].parent_id;\n    }\n    \n    return false;\n}\n\nexport async function reorderFolder(folderId: number, targetFolderId: number, position: 'before' | 'after'): Promise<Folder | null> {\n    const pgClient = getPgClient();\n    if (!pgClient) {\n        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n    }\n\n    try {\n        // 현재 폴더와 타겟 폴더 정보 조회\n        const folderResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [folderId]);\n        const targetResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [targetFolderId]);\n\n        if (folderResult.rows.length === 0 || targetResult.rows.length === 0) {\n            return null;\n        }\n\n        const folder = folderResult.rows[0];\n        const targetFolder = targetResult.rows[0];\n\n        // 같은 부모 폴더 내에서만 순서 변경 가능\n        if (folder.parent_id !== targetFolder.parent_id) {\n            throw new Error('같은 레벨의 폴더 간에만 순서를 변경할 수 있습니다.');\n        }\n\n        // 같은 부모를 가진 모든 폴더 조회 (순서대로)\n        const siblingsResult = await pgClient.query(\n            'SELECT * FROM folders WHERE parent_id = $1 ORDER BY sort_order, name',\n            [folder.parent_id]\n        );\n\n        const siblings = siblingsResult.rows;\n        const folderIndex = siblings.findIndex(f => f.id === folderId);\n        const targetIndex = siblings.findIndex(f => f.id === targetFolderId);\n\n        if (folderIndex === -1 || targetIndex === -1) {\n            return null;\n        }\n\n        // 새로운 순서 계산\n        let newIndex: number;\n        if (position === 'before') {\n            newIndex = targetIndex;\n        } else {\n            newIndex = targetIndex + 1;\n        }\n\n        // 이미 올바른 위치에 있는지 확인\n        if (folderIndex === newIndex || (position === 'after' && folderIndex === newIndex - 1)) {\n            return folder;\n        }\n\n        // sort_order 필드가 있는지 확인하고, 없다면 생성\n        const checkSortOrderResult = await pgClient.query(`\n            SELECT column_name \n            FROM information_schema.columns \n            WHERE table_name = 'folders' AND column_name = 'sort_order'\n        `);\n\n        if (checkSortOrderResult.rows.length === 0) {\n            // sort_order 컬럼 추가\n            await pgClient.query('ALTER TABLE folders ADD COLUMN sort_order INTEGER DEFAULT 0');\n            console.log('sort_order 컬럼이 추가되었습니다.');\n        }\n\n        // 현재 sort_order 값들 업데이트\n        const updateSortOrders = async () => {\n            // 모든 형제 폴더의 sort_order를 10 단위로 설정\n            for (let i = 0; i < siblings.length; i++) {\n                await pgClient.query(\n                    'UPDATE folders SET sort_order = $1 WHERE id = $2',\n                    [(i + 1) * 10, siblings[i].id]\n                );\n            }\n        };\n\n        // 순서 변경 로직\n        const reorderSiblings = async () => {\n            // 이동할 폴더를 제거\n            const siblingsWithoutMoved = siblings.filter(f => f.id !== folderId);\n            \n            // 새 위치에 삽입\n            const newSiblings = [...siblingsWithoutMoved];\n            if (position === 'before') {\n                newSiblings.splice(targetIndex, 0, folder);\n            } else {\n                newSiblings.splice(targetIndex + 1, 0, folder);\n            }\n\n            // 새로운 sort_order 값들 계산\n            const newSortOrders = newSiblings.map((sibling, index) => ({\n                id: sibling.id,\n                sort_order: (index + 1) * 10\n            }));\n\n            // 모든 형제 폴더의 sort_order 업데이트\n            for (const { id, sort_order } of newSortOrders) {\n                await pgClient.query(\n                    'UPDATE folders SET sort_order = $1 WHERE id = $2',\n                    [sort_order, id]\n                );\n            }\n        };\n\n        // 트랜잭션 시작\n        await pgClient.query('BEGIN');\n\n        try {\n            // sort_order 컬럼이 없다면 추가\n            if (checkSortOrderResult.rows.length === 0) {\n                await updateSortOrders();\n            }\n\n            // 순서 변경 실행\n            await reorderSiblings();\n\n            // 업데이트된 폴더 정보 조회\n            const updatedFolderResult = await pgClient.query('SELECT * FROM folders WHERE id = $1', [folderId]);\n            \n            // 트랜잭션 커밋\n            await pgClient.query('COMMIT');\n\n            return updatedFolderResult.rows[0] || null;\n        } catch (error) {\n            // 트랜잭션 롤백\n            await pgClient.query('ROLLBACK');\n            throw error;\n        }\n    } catch (error) {\n        console.error('폴더 순서 변경 실패:', error);\n        throw error;\n    }\n} "],"version":3}