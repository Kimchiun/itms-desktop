{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/utils/performanceMonitor.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/utils/performanceMonitor.ts"],"sourcesContent":["interface PerformanceMetric {\n  operation: string;\n  duration: number;\n  timestamp: Date;\n  success: boolean;\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\ninterface PerformanceStats {\n  totalOperations: number;\n  successfulOperations: number;\n  failedOperations: number;\n  averageDuration: number;\n  minDuration: number;\n  maxDuration: number;\n  lastOperation?: PerformanceMetric;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private readonly maxMetrics = 1000; // 최대 저장 메트릭 수\n\n  /**\n   * 성능 측정을 위한 래퍼 함수\n   */\n  async measure<T>(\n    operation: string,\n    fn: () => Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> {\n    const startTime = performance.now();\n    const timestamp = new Date();\n    \n    try {\n      const result = await fn();\n      const duration = performance.now() - startTime;\n      \n      this.addMetric({\n        operation,\n        duration,\n        timestamp,\n        success: true,\n        metadata\n      });\n      \n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      \n      this.addMetric({\n        operation,\n        duration,\n        timestamp,\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        metadata\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * 메트릭 추가\n   */\n  private addMetric(metric: PerformanceMetric): void {\n    this.metrics.push(metric);\n    \n    // 최대 메트릭 수를 초과하면 가장 오래된 것부터 제거\n    if (this.metrics.length > this.maxMetrics) {\n      this.metrics = this.metrics.slice(-this.maxMetrics);\n    }\n  }\n\n  /**\n   * 특정 작업의 통계 반환\n   */\n  getStats(operation?: string): PerformanceStats {\n    const filteredMetrics = operation \n      ? this.metrics.filter(m => m.operation === operation)\n      : this.metrics;\n\n    if (filteredMetrics.length === 0) {\n      return {\n        totalOperations: 0,\n        successfulOperations: 0,\n        failedOperations: 0,\n        averageDuration: 0,\n        minDuration: 0,\n        maxDuration: 0\n      };\n    }\n\n    const successfulMetrics = filteredMetrics.filter(m => m.success);\n    const failedMetrics = filteredMetrics.filter(m => !m.success);\n    const durations = filteredMetrics.map(m => m.duration);\n\n    return {\n      totalOperations: filteredMetrics.length,\n      successfulOperations: successfulMetrics.length,\n      failedOperations: failedMetrics.length,\n      averageDuration: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n      minDuration: Math.min(...durations),\n      maxDuration: Math.max(...durations),\n      lastOperation: filteredMetrics[filteredMetrics.length - 1]\n    };\n  }\n\n  /**\n   * 최근 메트릭 조회\n   */\n  getRecentMetrics(limit: number = 10): PerformanceMetric[] {\n    return this.metrics.slice(-limit);\n  }\n\n  /**\n   * 성능 경고 체크\n   */\n  checkPerformanceWarnings(operation: string): string[] {\n    const stats = this.getStats(operation);\n    const warnings: string[] = [];\n\n    if (stats.averageDuration > 1000) {\n      warnings.push(`${operation}: 평균 응답 시간이 1초를 초과합니다 (${stats.averageDuration.toFixed(2)}ms)`);\n    }\n\n    if (stats.failedOperations / stats.totalOperations > 0.1) {\n      warnings.push(`${operation}: 실패율이 10%를 초과합니다 (${((stats.failedOperations / stats.totalOperations) * 100).toFixed(1)}%)`);\n    }\n\n    if (stats.maxDuration > 5000) {\n      warnings.push(`${operation}: 최대 응답 시간이 5초를 초과합니다 (${stats.maxDuration.toFixed(2)}ms)`);\n    }\n\n    return warnings;\n  }\n\n  /**\n   * 메트릭 초기화\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n  }\n\n  /**\n   * 성능 리포트 생성\n   */\n  generateReport(): string {\n    const allStats = this.getStats();\n    const folderDragDropStats = this.getStats('folder-dragdrop');\n    const warnings = this.checkPerformanceWarnings('folder-dragdrop');\n\n    return `\n=== 성능 모니터링 리포트 ===\n생성 시간: ${new Date().toLocaleString()}\n\n전체 작업 통계:\n- 총 작업 수: ${allStats.totalOperations}\n- 성공률: ${allStats.totalOperations > 0 ? ((allStats.successfulOperations / allStats.totalOperations) * 100).toFixed(1) : 0}%\n- 평균 응답 시간: ${allStats.averageDuration.toFixed(2)}ms\n\n폴더 드래그 앤 드롭 통계:\n- 총 작업 수: ${folderDragDropStats.totalOperations}\n- 성공률: ${folderDragDropStats.totalOperations > 0 ? ((folderDragDropStats.successfulOperations / folderDragDropStats.totalOperations) * 100).toFixed(1) : 0}%\n- 평균 응답 시간: ${folderDragDropStats.averageDuration.toFixed(2)}ms\n- 최소 응답 시간: ${folderDragDropStats.minDuration.toFixed(2)}ms\n- 최대 응답 시간: ${folderDragDropStats.maxDuration.toFixed(2)}ms\n\n성능 경고:\n${warnings.length > 0 ? warnings.map(w => `- ${w}`).join('\\n') : '- 없음'}\n\n최근 작업 (최대 5개):\n${this.getRecentMetrics(5).map(m => \n  `- ${m.operation}: ${m.success ? '성공' : '실패'} (${m.duration.toFixed(2)}ms) - ${m.timestamp.toLocaleTimeString()}`\n).join('\\n')}\n    `.trim();\n  }\n}\n\n// 싱글톤 인스턴스\nexport const performanceMonitor = new PerformanceMonitor();\n\n// 편의 함수들\nexport const measureOperation = performanceMonitor.measure.bind(performanceMonitor);\nexport const getPerformanceStats = performanceMonitor.getStats.bind(performanceMonitor);\nexport const generatePerformanceReport = performanceMonitor.generateReport.bind(performanceMonitor); "],"version":3}