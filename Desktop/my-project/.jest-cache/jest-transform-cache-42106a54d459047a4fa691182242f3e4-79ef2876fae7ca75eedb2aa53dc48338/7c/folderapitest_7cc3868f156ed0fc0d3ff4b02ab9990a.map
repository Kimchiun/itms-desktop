{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/folder.api.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/folder.api.test.ts"],"sourcesContent":["import request from 'supertest';\nimport app from '../src/main/app/app';\n\ndescribe('Folder API', () => {\n  describe('GET /api/folders/tree', () => {\n    it('should return folder tree structure', async () => {\n      const response = await request(app)\n        .get('/api/folders/tree')\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      // Root 폴더가 있는지 확인\n      const rootFolder = response.body.find((folder: any) => folder.name === 'Root');\n      expect(rootFolder).toBeDefined();\n    });\n  });\n\n  describe('GET /api/folders', () => {\n    it('should return all folders', async () => {\n      const response = await request(app)\n        .get('/api/folders')\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('POST /api/folders', () => {\n    it('should create a new folder', async () => {\n      const newFolder = {\n        name: 'Test Folder',\n        description: 'Test folder description',\n        createdBy: 'testuser'\n      };\n\n      const response = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      expect(response.body.name).toBe(newFolder.name);\n      expect(response.body.description).toBe(newFolder.description);\n      expect(response.body.createdBy).toBe(newFolder.createdBy);\n    });\n\n    it('should create a folder with parent', async () => {\n      // 먼저 부모 폴더 생성\n      const parentFolder = {\n        name: 'Parent Folder',\n        description: 'Parent folder description',\n        createdBy: 'testuser'\n      };\n\n      const parentResponse = await request(app)\n        .post('/api/folders')\n        .send(parentFolder)\n        .expect(201);\n\n      // 자식 폴더 생성\n      const childFolder = {\n        name: 'Child Folder',\n        description: 'Child folder description',\n        parentId: parentResponse.body.id,\n        createdBy: 'testuser'\n      };\n\n      const childResponse = await request(app)\n        .post('/api/folders')\n        .send(childFolder)\n        .expect(201);\n\n      expect(childResponse.body.parentId).toBe(parentResponse.body.id);\n    });\n  });\n\n  describe('GET /api/folders/:id', () => {\n    it('should return folder by id', async () => {\n      // 먼저 폴더 생성\n      const newFolder = {\n        name: 'Test Folder for Get',\n        description: 'Test folder description',\n        createdBy: 'testuser'\n      };\n\n      const createResponse = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      const folderId = createResponse.body.id;\n\n      const response = await request(app)\n        .get(`/api/folders/${folderId}`)\n        .expect(200);\n\n      expect(response.body.id).toBe(folderId);\n      expect(response.body.name).toBe(newFolder.name);\n    });\n\n    it('should return 404 for non-existent folder', async () => {\n      await request(app)\n        .get('/api/folders/99999')\n        .expect(404);\n    });\n  });\n\n  describe('PUT /api/folders/:id', () => {\n    it('should update folder', async () => {\n      // 먼저 폴더 생성\n      const newFolder = {\n        name: 'Test Folder for Update',\n        description: 'Original description',\n        createdBy: 'testuser'\n      };\n\n      const createResponse = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      const folderId = createResponse.body.id;\n\n      // 폴더 업데이트\n      const updateData = {\n        name: 'Updated Folder Name',\n        description: 'Updated description',\n        updatedBy: 'testuser'\n      };\n\n      const response = await request(app)\n        .put(`/api/folders/${folderId}`)\n        .send(updateData)\n        .expect(200);\n\n      expect(response.body.name).toBe(updateData.name);\n      expect(response.body.description).toBe(updateData.description);\n    });\n  });\n\n  describe('DELETE /api/folders/:id', () => {\n    it('should delete folder', async () => {\n      // 먼저 폴더 생성\n      const newFolder = {\n        name: 'Test Folder for Delete',\n        description: 'Test folder description',\n        createdBy: 'testuser'\n      };\n\n      const createResponse = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      const folderId = createResponse.body.id;\n\n      // 폴더 삭제\n      await request(app)\n        .delete(`/api/folders/${folderId}`)\n        .expect(204);\n\n      // 삭제 확인\n      await request(app)\n        .get(`/api/folders/${folderId}`)\n        .expect(404);\n    });\n  });\n\n  describe('GET /api/folders/:id/testcases', () => {\n    it('should return test cases in folder', async () => {\n      // 먼저 폴더 생성\n      const newFolder = {\n        name: 'Test Folder for Test Cases',\n        description: 'Test folder description',\n        createdBy: 'testuser'\n      };\n\n      const createResponse = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      const folderId = createResponse.body.id;\n\n      const response = await request(app)\n        .get(`/api/folders/${folderId}/testcases`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n}); \n\ndescribe('POST /api/folders/:id/move', () => {\n  it('should prevent moving a folder into itself', async () => {\n    // 1. 폴더 생성\n    const folder = await request(app)\n      .post('/api/folders')\n      .send({ name: 'SelfMove', createdBy: 'testuser' })\n      .expect(201);\n    // 2. 자기 자신으로 이동 시도\n    const res = await request(app)\n      .post(`/api/folders/${folder.body.id}/move`)\n      .send({ targetParentId: folder.body.id, updatedBy: 'testuser' });\n    expect(res.status).toBe(400);\n    expect(res.body.message).toMatch(/순환|circular|self/i);\n  });\n\n  it('should prevent moving a folder into its descendant', async () => {\n    // 1. 부모-자식 폴더 생성\n    const parent = await request(app)\n      .post('/api/folders')\n      .send({ name: 'Parent', createdBy: 'testuser' })\n      .expect(201);\n    const child = await request(app)\n      .post('/api/folders')\n      .send({ name: 'Child', parentId: parent.body.id, createdBy: 'testuser' })\n      .expect(201);\n    // 2. 부모를 자식의 하위로 이동 시도\n    const res = await request(app)\n      .post(`/api/folders/${parent.body.id}/move`)\n      .send({ targetParentId: child.body.id, updatedBy: 'testuser' });\n    expect(res.status).toBe(400);\n    expect(res.body.message).toMatch(/순환|circular|descendant/i);\n  });\n});\n\ndescribe('POST /api/folders/:id/testcases/:testCaseId', () => {\n  it('should prevent adding the same test case to the same folder twice', async () => {\n    // 1. 폴더, 테스트케이스 생성\n    const folder = await request(app)\n      .post('/api/folders')\n      .send({ name: 'DupFolder', createdBy: 'testuser' })\n      .expect(201);\n    const testcase = { id: 9999 }; // 실제 환경에 맞게 생성/fixture 필요\n    // 2. 최초 추가\n    await request(app)\n      .post(`/api/folders/${folder.body.id}/testcases/${testcase.id}`)\n      .send({ updatedBy: 'testuser' });\n    // 3. 중복 추가 시도\n    const res = await request(app)\n      .post(`/api/folders/${folder.body.id}/testcases/${testcase.id}`)\n      .send({ updatedBy: 'testuser' });\n    expect([400, 409]).toContain(res.status);\n  });\n});\n\ndescribe('Concurrency Tests', () => {\n  it('should handle concurrent folder moves without data corruption', async () => {\n    // 1. 부모-자식 폴더 생성\n    const parent = await request(app)\n      .post('/api/folders')\n      .send({ name: 'ParentForConcurrent', createdBy: 'testuser' })\n      .expect(201);\n    const child = await request(app)\n      .post('/api/folders')\n      .send({ name: 'ChildForConcurrent', parentId: parent.body.id, createdBy: 'testuser' })\n      .expect(201);\n    \n    // 2. 동시에 같은 폴더를 다른 위치로 이동 시도\n    const targetFolder = await request(app)\n      .post('/api/folders')\n      .send({ name: 'TargetForConcurrent', createdBy: 'testuser' })\n      .expect(201);\n    \n    const concurrentMoves = [\n      request(app).post(`/api/folders/${child.body.id}/move`)\n        .send({ targetParentId: targetFolder.body.id, updatedBy: 'user1' }),\n      request(app).post(`/api/folders/${child.body.id}/move`)\n        .send({ targetParentId: null, updatedBy: 'user2' })\n    ];\n    \n    const results = await Promise.allSettled(concurrentMoves);\n    \n    // 3. 하나는 성공, 하나는 실패해야 함 (동시성 제어)\n    const successCount = results.filter(r => r.status === 'fulfilled' && r.value.status === 200).length;\n    const failureCount = results.filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && r.value.status !== 200)).length;\n    \n    expect(successCount).toBe(1);\n    expect(failureCount).toBe(1);\n  });\n\n  it('should handle concurrent test case additions without duplicates', async () => {\n    // 1. 폴더와 테스트케이스 생성\n    const folder = await request(app)\n      .post('/api/folders')\n      .send({ name: 'FolderForConcurrent', createdBy: 'testuser' })\n      .expect(201);\n    const testcase = await request(app)\n      .post('/api/testcases')\n      .send({ title: 'TestCaseForConcurrent', createdBy: 'testuser' })\n      .expect(201);\n    \n    // 2. 동시에 같은 케이스를 같은 폴더에 추가 시도\n    const concurrentAdds = [\n      request(app).post(`/api/folders/${folder.body.id}/testcases/${testcase.body.id}`)\n        .send({ updatedBy: 'user1' }),\n      request(app).post(`/api/folders/${folder.body.id}/testcases/${testcase.body.id}`)\n        .send({ updatedBy: 'user2' })\n    ];\n    \n    const results = await Promise.allSettled(concurrentAdds);\n    \n    // 3. 하나는 성공, 하나는 실패해야 함 (중복 방지)\n    const successCount = results.filter(r => r.status === 'fulfilled' && r.value.status === 204).length;\n    const failureCount = results.filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && r.value.status !== 204)).length;\n    \n    expect(successCount).toBe(1);\n    expect(failureCount).toBe(1);\n  });\n});\n\ndescribe('Performance Tests', () => {\n  it('should handle large folder tree within 2 seconds', async () => {\n    const startTime = Date.now();\n    \n    // 대량 폴더 조회 테스트\n    const response = await request(app)\n      .get('/api/folders/tree')\n      .expect(200);\n    \n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    expect(responseTime).toBeLessThan(2000); // 2초 이내\n    expect(Array.isArray(response.body)).toBe(true);\n  });\n\n  it('should handle paginated folder loading efficiently', async () => {\n    const startTime = Date.now();\n    \n    // 페이징된 폴더 조회 (실제 구현 시)\n    const response = await request(app)\n      .get('/api/folders?page=1&limit=100')\n      .expect(200);\n    \n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    expect(responseTime).toBeLessThan(1000); // 1초 이내\n    expect(Array.isArray(response.body)).toBe(true);\n  });\n\n  it('should handle batch test case moves efficiently', async () => {\n    // 대량 케이스 이동 성능 테스트 (실제 구현 시)\n    const startTime = Date.now();\n    \n    // 실제 배치 이동 API 호출\n    const response = await request(app)\n      .post('/api/folders/1/testcases/batch')\n      .send({ testCaseIds: [1, 2, 3, 4, 5], updatedBy: 'testuser' })\n      .expect(204);\n    \n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    expect(responseTime).toBeLessThan(1000); // 1초 이내\n  });\n});\n\n// 권한/동시성 테스트는 실제 인증/락 구현에 따라 추가 가능 "],"version":3}