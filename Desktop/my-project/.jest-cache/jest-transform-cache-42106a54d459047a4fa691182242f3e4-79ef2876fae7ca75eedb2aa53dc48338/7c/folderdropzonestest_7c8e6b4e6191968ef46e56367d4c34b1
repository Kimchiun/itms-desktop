dd8180ddf191fb70639037b6ca8da4b6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock folderRepository
globals_1.jest.mock('../src/main/app/domains/folders/repositories/folderRepository');
const folderService_1 = require("../src/main/app/domains/folders/services/folderService");
const folderRepository = __importStar(require("../src/main/app/domains/folders/repositories/folderRepository"));
const Folder_1 = require("../src/main/app/domains/folders/models/Folder");
const mockFolderRepository = folderRepository;
(0, globals_1.describe)('폴더 드롭 영역 구분 테스트', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('드롭 영역 계산 로직', () => {
        (0, globals_1.it)('상단 25% 영역에서 순서 변경(before) 드롭을 감지해야 함', () => {
            // Arrange
            const folderHeight = 40; // 폴더 높이
            const mouseY = 5; // 상단 25% 영역 내 (40 * 0.25 = 10 이하)
            // Act
            const topZone = folderHeight * 0.25;
            const isReorderBefore = mouseY < topZone;
            // Assert
            (0, globals_1.expect)(isReorderBefore).toBe(true);
            (0, globals_1.expect)(topZone).toBe(10);
        });
        (0, globals_1.it)('하단 25% 영역에서 순서 변경(after) 드롭을 감지해야 함', () => {
            // Arrange
            const folderHeight = 40;
            const mouseY = 35; // 하단 25% 영역 내 (40 * 0.75 = 30 이상)
            // Act
            const bottomZone = folderHeight * 0.75;
            const isReorderAfter = mouseY > bottomZone;
            // Assert
            (0, globals_1.expect)(isReorderAfter).toBe(true);
            (0, globals_1.expect)(bottomZone).toBe(30);
        });
        (0, globals_1.it)('중앙 50% 영역에서 계층 변경 드롭을 감지해야 함', () => {
            // Arrange
            const folderHeight = 40;
            const mouseY = 20; // 중앙 50% 영역 내 (10 < 20 < 30)
            // Act
            const topZone = folderHeight * 0.25;
            const bottomZone = folderHeight * 0.75;
            const isHierarchy = mouseY >= topZone && mouseY <= bottomZone;
            // Assert
            (0, globals_1.expect)(isHierarchy).toBe(true);
            (0, globals_1.expect)(topZone).toBe(10);
            (0, globals_1.expect)(bottomZone).toBe(30);
        });
    });
    (0, globals_1.describe)('validateDropZone', () => {
        (0, globals_1.it)('순서 변경(before) 드롭 존을 성공적으로 검증해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.REORDER,
                targetId: 2,
                position: 'before'
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(false);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.message).toBeUndefined();
        });
        (0, globals_1.it)('순서 변경(after) 드롭 존을 성공적으로 검증해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.REORDER,
                targetId: 2,
                position: 'after'
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(false);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.message).toBeUndefined();
        });
        (0, globals_1.it)('계층 변경 드롭 존을 성공적으로 검증해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 2
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(false);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(true);
            (0, globals_1.expect)(result.message).toBeUndefined();
        });
        (0, globals_1.it)('순환 참조가 있는 계층 변경 드롭을 거부해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 2
            };
            mockFolderRepository.checkCircularReference.mockResolvedValue(true);
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.message).toContain('순환 참조가 감지되었습니다');
        });
        (0, globals_1.it)('자기 자신으로의 드롭을 거부해야 함', async () => {
            // Arrange
            const draggedFolderId = 1;
            const dropZone = {
                type: Folder_1.DropType.HIERARCHY,
                targetId: 1
            };
            // Act
            const result = await (0, folderService_1.validateDropZone)(draggedFolderId, dropZone);
            // Assert
            (0, globals_1.expect)(result.isValid).toBe(false);
            (0, globals_1.expect)(result.message).toContain('자기 자신으로는 이동할 수 없습니다');
        });
    });
    (0, globals_1.describe)('시각적 피드백 위치 계산', () => {
        (0, globals_1.it)('순서 변경(before) 시 폴더 상단에 인디케이터를 표시해야 함', () => {
            // Arrange
            const folderRect = { top: 100, height: 40 };
            const containerRect = { top: 50 };
            const position = 'before';
            // Act
            const indicatorTop = folderRect.top - containerRect.top;
            // Assert
            (0, globals_1.expect)(indicatorTop).toBe(50);
        });
        (0, globals_1.it)('순서 변경(after) 시 폴더 하단에 인디케이터를 표시해야 함', () => {
            // Arrange
            const folderRect = { top: 100, bottom: 140, height: 40 };
            const containerRect = { top: 50 };
            const position = 'after';
            // Act
            const indicatorTop = folderRect.bottom - containerRect.top;
            // Assert
            (0, globals_1.expect)(indicatorTop).toBe(90);
        });
        (0, globals_1.it)('계층 변경 시 폴더 전체 영역에 인디케이터를 표시해야 함', () => {
            // Arrange
            const folderRect = { top: 100, height: 40 };
            const containerRect = { top: 50 };
            // Act
            const indicatorTop = folderRect.top - containerRect.top;
            const indicatorHeight = folderRect.height;
            // Assert
            (0, globals_1.expect)(indicatorTop).toBe(50);
            (0, globals_1.expect)(indicatorHeight).toBe(40);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,