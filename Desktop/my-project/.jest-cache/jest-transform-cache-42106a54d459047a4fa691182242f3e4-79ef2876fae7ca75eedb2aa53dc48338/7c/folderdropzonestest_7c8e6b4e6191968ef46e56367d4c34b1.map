{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-drop-zones.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-drop-zones.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { validateDropZone } from '../src/main/app/domains/folders/services/folderService';\nimport * as folderRepository from '../src/main/app/domains/folders/repositories/folderRepository';\nimport { DropType } from '../src/main/app/domains/folders/models/Folder';\n\n// Mock folderRepository\njest.mock('../src/main/app/domains/folders/repositories/folderRepository');\nconst mockFolderRepository = folderRepository as jest.Mocked<typeof folderRepository>;\n\ndescribe('폴더 드롭 영역 구분 테스트', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('드롭 영역 계산 로직', () => {\n    it('상단 25% 영역에서 순서 변경(before) 드롭을 감지해야 함', () => {\n      // Arrange\n      const folderHeight = 40; // 폴더 높이\n      const mouseY = 5; // 상단 25% 영역 내 (40 * 0.25 = 10 이하)\n      \n      // Act\n      const topZone = folderHeight * 0.25;\n      const isReorderBefore = mouseY < topZone;\n      \n      // Assert\n      expect(isReorderBefore).toBe(true);\n      expect(topZone).toBe(10);\n    });\n\n    it('하단 25% 영역에서 순서 변경(after) 드롭을 감지해야 함', () => {\n      // Arrange\n      const folderHeight = 40;\n      const mouseY = 35; // 하단 25% 영역 내 (40 * 0.75 = 30 이상)\n      \n      // Act\n      const bottomZone = folderHeight * 0.75;\n      const isReorderAfter = mouseY > bottomZone;\n      \n      // Assert\n      expect(isReorderAfter).toBe(true);\n      expect(bottomZone).toBe(30);\n    });\n\n    it('중앙 50% 영역에서 계층 변경 드롭을 감지해야 함', () => {\n      // Arrange\n      const folderHeight = 40;\n      const mouseY = 20; // 중앙 50% 영역 내 (10 < 20 < 30)\n      \n      // Act\n      const topZone = folderHeight * 0.25;\n      const bottomZone = folderHeight * 0.75;\n      const isHierarchy = mouseY >= topZone && mouseY <= bottomZone;\n      \n      // Assert\n      expect(isHierarchy).toBe(true);\n      expect(topZone).toBe(10);\n      expect(bottomZone).toBe(30);\n    });\n  });\n\n  describe('validateDropZone', () => {\n    it('순서 변경(before) 드롭 존을 성공적으로 검증해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.REORDER,\n        targetId: 2,\n        position: 'before' as const\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(false);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(true);\n      expect(result.message).toBeUndefined();\n    });\n\n    it('순서 변경(after) 드롭 존을 성공적으로 검증해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.REORDER,\n        targetId: 2,\n        position: 'after' as const\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(false);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(true);\n      expect(result.message).toBeUndefined();\n    });\n\n    it('계층 변경 드롭 존을 성공적으로 검증해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 2\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(false);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(true);\n      expect(result.message).toBeUndefined();\n    });\n\n    it('순환 참조가 있는 계층 변경 드롭을 거부해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 2\n      };\n\n      mockFolderRepository.checkCircularReference.mockResolvedValue(true);\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.message).toContain('순환 참조가 감지되었습니다');\n    });\n\n    it('자기 자신으로의 드롭을 거부해야 함', async () => {\n      // Arrange\n      const draggedFolderId = 1;\n      const dropZone = {\n        type: DropType.HIERARCHY,\n        targetId: 1\n      };\n\n      // Act\n      const result = await validateDropZone(draggedFolderId, dropZone);\n\n      // Assert\n      expect(result.isValid).toBe(false);\n      expect(result.message).toContain('자기 자신으로는 이동할 수 없습니다');\n    });\n  });\n\n  describe('시각적 피드백 위치 계산', () => {\n    it('순서 변경(before) 시 폴더 상단에 인디케이터를 표시해야 함', () => {\n      // Arrange\n      const folderRect = { top: 100, height: 40 };\n      const containerRect = { top: 50 };\n      const position = 'before';\n      \n      // Act\n      const indicatorTop = folderRect.top - containerRect.top;\n      \n      // Assert\n      expect(indicatorTop).toBe(50);\n    });\n\n    it('순서 변경(after) 시 폴더 하단에 인디케이터를 표시해야 함', () => {\n      // Arrange\n      const folderRect = { top: 100, bottom: 140, height: 40 };\n      const containerRect = { top: 50 };\n      const position = 'after';\n      \n      // Act\n      const indicatorTop = folderRect.bottom - containerRect.top;\n      \n      // Assert\n      expect(indicatorTop).toBe(90);\n    });\n\n    it('계층 변경 시 폴더 전체 영역에 인디케이터를 표시해야 함', () => {\n      // Arrange\n      const folderRect = { top: 100, height: 40 };\n      const containerRect = { top: 50 };\n      \n      // Act\n      const indicatorTop = folderRect.top - containerRect.top;\n      const indicatorHeight = folderRect.height;\n      \n      // Assert\n      expect(indicatorTop).toBe(50);\n      expect(indicatorHeight).toBe(40);\n    });\n  });\n}); "],"version":3}