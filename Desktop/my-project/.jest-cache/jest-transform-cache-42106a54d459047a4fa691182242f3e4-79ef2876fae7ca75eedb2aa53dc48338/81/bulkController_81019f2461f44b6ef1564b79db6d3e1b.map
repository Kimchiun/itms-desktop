{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/controllers/bulkController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/controllers/bulkController.ts"],"sourcesContent":["import { Router } from 'express';\nimport * as folderService from '../services/folderService';\nimport { createTestCase, getTestCaseById, updateTestCase, deleteTestCase } from '../../testcases/repositories/testCaseRepository';\n\nconst router = Router();\n\n// 일괄 이동 API\nrouter.post('/move', async (req, res) => {\n    try {\n        const { folderIds, testCaseIds, targetFolderId } = req.body;\n        \n        if (!targetFolderId) {\n            return res.status(400).json({ message: '대상 폴더 ID가 필요합니다.' });\n        }\n\n        const results = {\n            folders: { success: 0, failed: 0, errors: [] as Array<{ folderId: number; error: string }> },\n            testCases: { success: 0, failed: 0, errors: [] as Array<{ testCaseId: number; error: string }> }\n        };\n\n        // 폴더 일괄 이동\n        if (folderIds && folderIds.length > 0) {\n            for (const folderId of folderIds) {\n                try {\n                    await folderService.moveFolder(folderId, { targetParentId: targetFolderId, updatedBy: req.body.updatedBy || 'system' });\n                    results.folders.success++;\n                } catch (error) {\n                    results.folders.failed++;\n                    results.folders.errors.push({ folderId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        // 테스트 케이스 일괄 이동\n        if (testCaseIds && testCaseIds.length > 0) {\n            for (const testCaseId of testCaseIds) {\n                try {\n                    await folderService.addTestCaseToFolder(testCaseId, targetFolderId);\n                    results.testCases.success++;\n                } catch (error) {\n                    results.testCases.failed++;\n                    results.testCases.errors.push({ testCaseId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        res.json({\n            message: '일괄 이동이 완료되었습니다.',\n            results\n        });\n    } catch (error) {\n        console.error('일괄 이동 실패:', error);\n        res.status(500).json({ message: '일괄 이동에 실패했습니다.' });\n    }\n});\n\n// 일괄 복사 API\nrouter.post('/copy', async (req, res) => {\n    try {\n        const { folderIds, testCaseIds, targetFolderId } = req.body;\n        \n        if (!targetFolderId) {\n            return res.status(400).json({ message: '대상 폴더 ID가 필요합니다.' });\n        }\n\n        const results = {\n            folders: { success: 0, failed: 0, errors: [] as Array<{ folderId: number; error: string }> },\n            testCases: { success: 0, failed: 0, errors: [] as Array<{ testCaseId: number; error: string }> }\n        };\n\n        // 폴더 일괄 복사\n        if (folderIds && folderIds.length > 0) {\n            for (const folderId of folderIds) {\n                try {\n                    const folder = await folderService.getFolderById(folderId);\n                    if (folder) {\n                        await folderService.createFolder({\n                            name: `${folder.name} (복사본)`,\n                            description: folder.description,\n                            parentId: targetFolderId,\n                            createdBy: req.body.createdBy || 'system'\n                        });\n                        results.folders.success++;\n                    }\n                } catch (error) {\n                    results.folders.failed++;\n                    results.folders.errors.push({ folderId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        // 테스트 케이스 일괄 복사\n        if (testCaseIds && testCaseIds.length > 0) {\n            for (const testCaseId of testCaseIds) {\n                try {\n                    const testCase = await getTestCaseById(testCaseId);\n                    if (testCase) {\n                        const copiedTestCase = await createTestCase({\n                            title: `${testCase.title} (복사본)`,\n                            prereq: testCase.prereq,\n                            steps: testCase.steps,\n                            expected: testCase.expected,\n                            priority: testCase.priority,\n                            tags: testCase.tags,\n                            status: testCase.status,\n                            createdBy: req.body.createdBy || 'system'\n                        });\n                        \n                        await folderService.addTestCaseToFolder(copiedTestCase.id, targetFolderId);\n                        results.testCases.success++;\n                    }\n                } catch (error) {\n                    results.testCases.failed++;\n                    results.testCases.errors.push({ testCaseId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        res.json({\n            message: '일괄 복사가 완료되었습니다.',\n            results\n        });\n    } catch (error) {\n        console.error('일괄 복사 실패:', error);\n        res.status(500).json({ message: '일괄 복사에 실패했습니다.' });\n    }\n});\n\n// 일괄 삭제 API\nrouter.delete('/', async (req, res) => {\n    try {\n        const { folderIds, testCaseIds } = req.body;\n        \n        const results = {\n            folders: { success: 0, failed: 0, errors: [] as Array<{ folderId: number; error: string }> },\n            testCases: { success: 0, failed: 0, errors: [] as Array<{ testCaseId: number; error: string }> }\n        };\n\n        // 폴더 일괄 삭제\n        if (folderIds && folderIds.length > 0) {\n            for (const folderId of folderIds) {\n                try {\n                    await folderService.deleteFolder(folderId);\n                    results.folders.success++;\n                } catch (error) {\n                    results.folders.failed++;\n                    results.folders.errors.push({ folderId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        // 테스트 케이스 일괄 삭제\n        if (testCaseIds && testCaseIds.length > 0) {\n            for (const testCaseId of testCaseIds) {\n                try {\n                    await deleteTestCase(testCaseId);\n                    results.testCases.success++;\n                } catch (error) {\n                    results.testCases.failed++;\n                    results.testCases.errors.push({ testCaseId, error: error instanceof Error ? error.message : 'Unknown error' });\n                }\n            }\n        }\n\n        res.json({\n            message: '일괄 삭제가 완료되었습니다.',\n            results\n        });\n    } catch (error) {\n        console.error('일괄 삭제 실패:', error);\n        res.status(500).json({ message: '일괄 삭제에 실패했습니다.' });\n    }\n});\n\n// 일괄 상태 변경 API\nrouter.patch('/status', async (req, res) => {\n    try {\n        const { testCaseIds, status } = req.body;\n        \n        if (!status) {\n            return res.status(400).json({ message: '상태 값이 필요합니다.' });\n        }\n\n        if (!testCaseIds || testCaseIds.length === 0) {\n            return res.status(400).json({ message: '테스트 케이스 ID가 필요합니다.' });\n        }\n\n        const results = {\n            success: 0,\n            failed: 0,\n            errors: [] as Array<{ testCaseId: number; error: string }>\n        };\n\n        for (const testCaseId of testCaseIds) {\n            try {\n                await updateTestCase(testCaseId, { status });\n                results.success++;\n            } catch (error) {\n                results.failed++;\n                results.errors.push({ testCaseId, error: error instanceof Error ? error.message : 'Unknown error' });\n            }\n        }\n\n        res.json({\n            message: '일괄 상태 변경이 완료되었습니다.',\n            results\n        });\n    } catch (error) {\n        console.error('일괄 상태 변경 실패:', error);\n        res.status(500).json({ message: '일괄 상태 변경에 실패했습니다.' });\n    }\n});\n\nexport default router; "],"version":3}