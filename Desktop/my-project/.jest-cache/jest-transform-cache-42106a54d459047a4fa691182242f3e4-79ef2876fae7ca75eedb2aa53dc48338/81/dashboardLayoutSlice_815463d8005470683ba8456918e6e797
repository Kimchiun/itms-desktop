3adec977e5e92c680bfa9a6a3818ec44
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.setReleaseDataError = exports.setReleaseDataLoading = exports.setReleaseData = exports.clearFilters = exports.setFilters = exports.setSelectedDefectId = exports.setSelectedTestCaseId = exports.setSelectedReleaseId = exports.toggleRightPanel = exports.toggleLeftPanel = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const initialState = {
    leftPanel: { isCollapsed: false, width: 280 },
    rightPanel: { isCollapsed: false, width: 320 },
    centerPanel: { isFullWidth: false },
    activeTab: 'overview',
    selectedReleaseId: null,
    selectedTestCaseId: null,
    selectedDefectId: null,
    filters: {
        executionStatus: [],
        priority: [],
        severity: [],
        keyword: '',
        showOnlyDefects: false,
    },
    releaseData: {
        testCases: [],
        defects: [],
        loading: false,
        error: null,
    },
};
const dashboardLayoutSlice = (0, toolkit_1.createSlice)({
    name: 'dashboardLayout',
    initialState,
    reducers: {
        toggleLeftPanel(state) {
            state.leftPanel.isCollapsed = !state.leftPanel.isCollapsed;
        },
        toggleRightPanel(state) {
            state.rightPanel.isCollapsed = !state.rightPanel.isCollapsed;
        },
        setSelectedReleaseId(state, action) {
            state.selectedReleaseId = action.payload;
            state.selectedTestCaseId = null;
            state.selectedDefectId = null;
        },
        setSelectedTestCaseId(state, action) {
            state.selectedTestCaseId = action.payload;
        },
        setSelectedDefectId(state, action) {
            state.selectedDefectId = action.payload;
        },
        setFilters(state, action) {
            state.filters = { ...state.filters, ...action.payload };
        },
        clearFilters(state) {
            state.filters = initialState.filters;
        },
        setReleaseData(state, action) {
            state.releaseData.testCases = action.payload.testCases;
            state.releaseData.defects = action.payload.defects;
        },
        setReleaseDataLoading(state, action) {
            state.releaseData.loading = action.payload;
        },
        setReleaseDataError(state, action) {
            state.releaseData.error = action.payload;
        },
    },
});
_a = dashboardLayoutSlice.actions, exports.toggleLeftPanel = _a.toggleLeftPanel, exports.toggleRightPanel = _a.toggleRightPanel, exports.setSelectedReleaseId = _a.setSelectedReleaseId, exports.setSelectedTestCaseId = _a.setSelectedTestCaseId, exports.setSelectedDefectId = _a.setSelectedDefectId, exports.setFilters = _a.setFilters, exports.clearFilters = _a.clearFilters, exports.setReleaseData = _a.setReleaseData, exports.setReleaseDataLoading = _a.setReleaseDataLoading, exports.setReleaseDataError = _a.setReleaseDataError;
exports.default = dashboardLayoutSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvZGFzaGJvYXJkTGF5b3V0U2xpY2UudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDhDQUE4RDtBQXdEOUQsTUFBTSxZQUFZLEdBQXlCO0lBQ3pDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtJQUM3QyxVQUFVLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7SUFDOUMsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtJQUNuQyxTQUFTLEVBQUUsVUFBVTtJQUNyQixpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCLGtCQUFrQixFQUFFLElBQUk7SUFDeEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixPQUFPLEVBQUU7UUFDUCxlQUFlLEVBQUUsRUFBRTtRQUNuQixRQUFRLEVBQUUsRUFBRTtRQUNaLFFBQVEsRUFBRSxFQUFFO1FBQ1osT0FBTyxFQUFFLEVBQUU7UUFDWCxlQUFlLEVBQUUsS0FBSztLQUN2QjtJQUNELFdBQVcsRUFBRTtRQUNYLFNBQVMsRUFBRSxFQUFFO1FBQ2IsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRixDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRyxJQUFBLHFCQUFXLEVBQUM7SUFDdkMsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixZQUFZO0lBQ1osUUFBUSxFQUFFO1FBQ1IsZUFBZSxDQUFDLEtBQUs7WUFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsZ0JBQWdCLENBQUMsS0FBSztZQUNwQixLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQy9ELENBQUM7UUFDRCxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsTUFBNkI7WUFDdkQsS0FBSyxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDekMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztZQUNoQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLENBQUM7UUFDRCxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsTUFBb0M7WUFDL0QsS0FBSyxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDNUMsQ0FBQztRQUNELG1CQUFtQixDQUFDLEtBQUssRUFBRSxNQUFvQztZQUM3RCxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMxQyxDQUFDO1FBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUEyQztZQUMzRCxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFELENBQUM7UUFDRCxZQUFZLENBQUMsS0FBSztZQUNoQixLQUFLLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDdkMsQ0FBQztRQUNELGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBbUU7WUFDdkYsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDdkQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FBQztRQUNELHFCQUFxQixDQUFDLEtBQUssRUFBRSxNQUE4QjtZQUN6RCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzdDLENBQUM7UUFDRCxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsTUFBb0M7WUFDN0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMzQyxDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFVSxLQVdULG9CQUFvQixDQUFDLE9BQU8sRUFWOUIsdUJBQWUsdUJBQ2Ysd0JBQWdCLHdCQUNoQiw0QkFBb0IsNEJBQ3BCLDZCQUFxQiw2QkFDckIsMkJBQW1CLDJCQUNuQixrQkFBVSxrQkFDVixvQkFBWSxvQkFDWixzQkFBYyxzQkFDZCw2QkFBcUIsNkJBQ3JCLDJCQUFtQiwwQkFDWTtBQUVqQyxrQkFBZSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvZGFzaGJvYXJkTGF5b3V0U2xpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcblxuZXhwb3J0IGludGVyZmFjZSBUZXN0Q2FzZSB7XG4gIGlkOiBudW1iZXI7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwcmlvcml0eTogJ0hpZ2gnIHwgJ01lZGl1bScgfCAnTG93JztcbiAgc3RhdHVzOiAnQWN0aXZlJyB8ICdBcmNoaXZlZCc7XG4gIGV4ZWN1dGlvblN0YXR1czogJ1VudGVzdGVkJyB8ICdQYXNzJyB8ICdGYWlsJyB8ICdCbG9ja2VkJyB8ICdEZWZlY3QnO1xuICBjcmVhdGVkQnk6IHN0cmluZztcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVmZWN0IHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgc2V2ZXJpdHk6ICdDcml0aWNhbCcgfCAnSGlnaCcgfCAnTWVkaXVtJyB8ICdMb3cnO1xuICBzdGF0dXM6ICdPcGVuJyB8ICdJbiBQcm9ncmVzcycgfCAnUmVzb2x2ZWQnIHwgJ0Nsb3NlZCc7XG4gIGNyZWF0ZWRCeTogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyU3RhdGUge1xuICBleGVjdXRpb25TdGF0dXM6IHN0cmluZ1tdO1xuICBwcmlvcml0eTogc3RyaW5nW107XG4gIHNldmVyaXR5OiBzdHJpbmdbXTtcbiAga2V5d29yZDogc3RyaW5nO1xuICBzaG93T25seURlZmVjdHM6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBEYXNoYm9hcmRMYXlvdXRTdGF0ZSB7XG4gIGxlZnRQYW5lbDoge1xuICAgIGlzQ29sbGFwc2VkOiBib29sZWFuO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHJpZ2h0UGFuZWw6IHtcbiAgICBpc0NvbGxhcHNlZDogYm9vbGVhbjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICB9O1xuICBjZW50ZXJQYW5lbDoge1xuICAgIGlzRnVsbFdpZHRoOiBib29sZWFuO1xuICB9O1xuICBhY3RpdmVUYWI6IHN0cmluZztcbiAgc2VsZWN0ZWRSZWxlYXNlSWQ6IHN0cmluZyB8IG51bGw7XG4gIHNlbGVjdGVkVGVzdENhc2VJZDogbnVtYmVyIHwgbnVsbDtcbiAgc2VsZWN0ZWREZWZlY3RJZDogbnVtYmVyIHwgbnVsbDtcbiAgZmlsdGVyczogRmlsdGVyU3RhdGU7XG4gIHJlbGVhc2VEYXRhOiB7XG4gICAgdGVzdENhc2VzOiBUZXN0Q2FzZVtdO1xuICAgIGRlZmVjdHM6IERlZmVjdFtdO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG4gIH07XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogRGFzaGJvYXJkTGF5b3V0U3RhdGUgPSB7XG4gIGxlZnRQYW5lbDogeyBpc0NvbGxhcHNlZDogZmFsc2UsIHdpZHRoOiAyODAgfSxcbiAgcmlnaHRQYW5lbDogeyBpc0NvbGxhcHNlZDogZmFsc2UsIHdpZHRoOiAzMjAgfSxcbiAgY2VudGVyUGFuZWw6IHsgaXNGdWxsV2lkdGg6IGZhbHNlIH0sXG4gIGFjdGl2ZVRhYjogJ292ZXJ2aWV3JyxcbiAgc2VsZWN0ZWRSZWxlYXNlSWQ6IG51bGwsXG4gIHNlbGVjdGVkVGVzdENhc2VJZDogbnVsbCxcbiAgc2VsZWN0ZWREZWZlY3RJZDogbnVsbCxcbiAgZmlsdGVyczoge1xuICAgIGV4ZWN1dGlvblN0YXR1czogW10sXG4gICAgcHJpb3JpdHk6IFtdLFxuICAgIHNldmVyaXR5OiBbXSxcbiAgICBrZXl3b3JkOiAnJyxcbiAgICBzaG93T25seURlZmVjdHM6IGZhbHNlLFxuICB9LFxuICByZWxlYXNlRGF0YToge1xuICAgIHRlc3RDYXNlczogW10sXG4gICAgZGVmZWN0czogW10sXG4gICAgbG9hZGluZzogZmFsc2UsXG4gICAgZXJyb3I6IG51bGwsXG4gIH0sXG59O1xuXG5jb25zdCBkYXNoYm9hcmRMYXlvdXRTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogJ2Rhc2hib2FyZExheW91dCcsXG4gIGluaXRpYWxTdGF0ZSxcbiAgcmVkdWNlcnM6IHtcbiAgICB0b2dnbGVMZWZ0UGFuZWwoc3RhdGUpIHtcbiAgICAgIHN0YXRlLmxlZnRQYW5lbC5pc0NvbGxhcHNlZCA9ICFzdGF0ZS5sZWZ0UGFuZWwuaXNDb2xsYXBzZWQ7XG4gICAgfSxcbiAgICB0b2dnbGVSaWdodFBhbmVsKHN0YXRlKSB7XG4gICAgICBzdGF0ZS5yaWdodFBhbmVsLmlzQ29sbGFwc2VkID0gIXN0YXRlLnJpZ2h0UGFuZWwuaXNDb2xsYXBzZWQ7XG4gICAgfSxcbiAgICBzZXRTZWxlY3RlZFJlbGVhc2VJZChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHN0cmluZz4pIHtcbiAgICAgIHN0YXRlLnNlbGVjdGVkUmVsZWFzZUlkID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBzdGF0ZS5zZWxlY3RlZFRlc3RDYXNlSWQgPSBudWxsO1xuICAgICAgc3RhdGUuc2VsZWN0ZWREZWZlY3RJZCA9IG51bGw7XG4gICAgfSxcbiAgICBzZXRTZWxlY3RlZFRlc3RDYXNlSWQoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxudW1iZXIgfCBudWxsPikge1xuICAgICAgc3RhdGUuc2VsZWN0ZWRUZXN0Q2FzZUlkID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBzZXRTZWxlY3RlZERlZmVjdElkKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyIHwgbnVsbD4pIHtcbiAgICAgIHN0YXRlLnNlbGVjdGVkRGVmZWN0SWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICAgIHNldEZpbHRlcnMoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxQYXJ0aWFsPEZpbHRlclN0YXRlPj4pIHtcbiAgICAgIHN0YXRlLmZpbHRlcnMgPSB7IC4uLnN0YXRlLmZpbHRlcnMsIC4uLmFjdGlvbi5wYXlsb2FkIH07XG4gICAgfSxcbiAgICBjbGVhckZpbHRlcnMoc3RhdGUpIHtcbiAgICAgIHN0YXRlLmZpbHRlcnMgPSBpbml0aWFsU3RhdGUuZmlsdGVycztcbiAgICB9LFxuICAgIHNldFJlbGVhc2VEYXRhKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248eyB0ZXN0Q2FzZXM6IFRlc3RDYXNlW107IGRlZmVjdHM6IERlZmVjdFtdIH0+KSB7XG4gICAgICBzdGF0ZS5yZWxlYXNlRGF0YS50ZXN0Q2FzZXMgPSBhY3Rpb24ucGF5bG9hZC50ZXN0Q2FzZXM7XG4gICAgICBzdGF0ZS5yZWxlYXNlRGF0YS5kZWZlY3RzID0gYWN0aW9uLnBheWxvYWQuZGVmZWN0cztcbiAgICB9LFxuICAgIHNldFJlbGVhc2VEYXRhTG9hZGluZyhzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPGJvb2xlYW4+KSB7XG4gICAgICBzdGF0ZS5yZWxlYXNlRGF0YS5sb2FkaW5nID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBzZXRSZWxlYXNlRGF0YUVycm9yKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248c3RyaW5nIHwgbnVsbD4pIHtcbiAgICAgIHN0YXRlLnJlbGVhc2VEYXRhLmVycm9yID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBcbiAgdG9nZ2xlTGVmdFBhbmVsLCBcbiAgdG9nZ2xlUmlnaHRQYW5lbCwgXG4gIHNldFNlbGVjdGVkUmVsZWFzZUlkLFxuICBzZXRTZWxlY3RlZFRlc3RDYXNlSWQsXG4gIHNldFNlbGVjdGVkRGVmZWN0SWQsXG4gIHNldEZpbHRlcnMsXG4gIGNsZWFyRmlsdGVycyxcbiAgc2V0UmVsZWFzZURhdGEsXG4gIHNldFJlbGVhc2VEYXRhTG9hZGluZyxcbiAgc2V0UmVsZWFzZURhdGFFcnJvcixcbn0gPSBkYXNoYm9hcmRMYXlvdXRTbGljZS5hY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBkYXNoYm9hcmRMYXlvdXRTbGljZS5yZWR1Y2VyOyAiXSwidmVyc2lvbiI6M30=