{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/tree/services/treeService.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/tree/services/treeService.ts"],"sourcesContent":["import * as treeRepository from '../repositories/treeRepository';\nimport { TreeNode, CreateTreeNodeRequest, UpdateTreeNodeRequest, DragDropRequest, DragDropResult, TreeSearchRequest, TreeSearchResult } from '../models/TreeNode';\n\n// =====================================================\n// 기본 CRUD 서비스\n// =====================================================\n\nexport async function createTreeNode(request: CreateTreeNodeRequest): Promise<TreeNode> {\n  // 순환 참조 검사 (parentId가 있는 경우)\n  if (request.parentId !== null && request.parentId !== undefined) {\n    const hasCircularReference = await treeRepository.checkCircularReference(0, request.parentId);\n    if (hasCircularReference) {\n      throw new Error('순환 참조가 감지되었습니다. 노드를 생성할 수 없습니다.');\n    }\n  }\n\n  return await treeRepository.createTreeNode(request);\n}\n\nexport async function getTreeNodeById(id: number): Promise<TreeNode | null> {\n  return await treeRepository.getTreeNodeById(id);\n}\n\nexport async function getAllTreeNodes(): Promise<TreeNode[]> {\n  return await treeRepository.getAllTreeNodes();\n}\n\nexport async function getTreeStructure(): Promise<TreeNode[]> {\n  return await treeRepository.getTreeStructure();\n}\n\nexport async function updateTreeNode(id: number, updates: UpdateTreeNodeRequest): Promise<TreeNode | null> {\n  const node = await treeRepository.getTreeNodeById(id);\n  if (!node) {\n    throw new Error('노드를 찾을 수 없습니다.');\n  }\n\n  // 순환 참조 검사 (parentId가 변경되는 경우)\n  if (updates.parentId !== undefined && updates.parentId !== node.parentId) {\n    if (updates.parentId !== null) {\n      const hasCircularReference = await treeRepository.checkCircularReference(id, updates.parentId);\n      if (hasCircularReference) {\n        throw new Error('순환 참조가 감지되었습니다. 노드를 이동할 수 없습니다.');\n      }\n    }\n  }\n\n  return await treeRepository.updateTreeNode(id, updates);\n}\n\nexport async function deleteTreeNode(id: number): Promise<boolean> {\n  const node = await treeRepository.getTreeNodeById(id);\n  if (!node) {\n    throw new Error('노드를 찾을 수 없습니다.');\n  }\n\n  // 루트 노드는 삭제 불가\n  if (node.name === '루트' && node.parentId === null) {\n    throw new Error('루트 노드는 삭제할 수 없습니다.');\n  }\n\n  return await treeRepository.deleteTreeNode(id);\n}\n\n// =====================================================\n// 검색 서비스\n// =====================================================\n\nexport async function searchTreeNodes(request: TreeSearchRequest): Promise<TreeSearchResult> {\n  return await treeRepository.searchTreeNodes(request);\n}\n\n// =====================================================\n// 드래그 앤 드롭 서비스\n// =====================================================\n\nexport async function handleTreeNodeDragDrop(request: DragDropRequest): Promise<DragDropResult> {\n  const { draggedNodeId, targetNodeId, dropType, position } = request;\n\n  // 드래그한 노드와 대상 노드 조회\n  const draggedNode = await treeRepository.getTreeNodeById(draggedNodeId);\n  const targetNode = await treeRepository.getTreeNodeById(targetNodeId);\n\n  if (!draggedNode || !targetNode) {\n    throw new Error('노드를 찾을 수 없습니다.');\n  }\n\n  // 자기 자신에 대한 드롭 방지\n  if (draggedNodeId === targetNodeId) {\n    throw new Error('자기 자신으로는 이동할 수 없습니다.');\n  }\n\n  let movedNode: TreeNode;\n\n  if (dropType === 'reorder') {\n    // 순서 변경\n    if (!position) {\n      throw new Error('순서 변경 시 position이 필요합니다.');\n    }\n\n    const reorderedNode = await treeRepository.reorderTreeNode(draggedNodeId, targetNodeId, position);\n    if (!reorderedNode) {\n      throw new Error('노드 순서 변경에 실패했습니다.');\n    }\n    movedNode = reorderedNode;\n  } else {\n    // 계층 변경\n    // 순환 참조 검사\n    const hasCircularReference = await treeRepository.checkCircularReference(draggedNodeId, targetNodeId);\n    if (hasCircularReference) {\n      throw new Error('순환 참조가 감지되었습니다. 노드를 이동할 수 없습니다.');\n    }\n\n    const movedTreeNode = await treeRepository.moveTreeNode(draggedNodeId, targetNodeId);\n    if (!movedTreeNode) {\n      throw new Error('노드 이동에 실패했습니다.');\n    }\n    movedNode = movedTreeNode;\n  }\n\n  // 히스토리 기록\n  await treeRepository.recordTreeNodeMove({\n    nodeId: draggedNodeId,\n    oldParentId: draggedNode.parentId,\n    newParentId: movedNode.parentId,\n    oldSortOrder: draggedNode.sortOrder,\n    newSortOrder: movedNode.sortOrder,\n    movedBy: 'system'\n  });\n\n  return {\n    success: true,\n    message: '노드가 성공적으로 이동되었습니다.',\n    data: {\n      movedNode,\n      newPosition: {\n        parentId: movedNode.parentId,\n        sortOrder: movedNode.sortOrder\n      }\n    }\n  };\n}\n\n// =====================================================\n// 유효성 검사 서비스\n// =====================================================\n\nexport async function validateDropZone(draggedNodeId: number, targetNodeId: number, dropZone: 'top' | 'middle' | 'bottom'): Promise<{\n  isValid: boolean;\n  message: string;\n  dropType: 'reorder' | 'hierarchy' | null;\n  position: 'before' | 'after' | null;\n}> {\n  const draggedNode = await treeRepository.getTreeNodeById(draggedNodeId);\n  const targetNode = await treeRepository.getTreeNodeById(targetNodeId);\n\n  if (!draggedNode || !targetNode) {\n    return {\n      isValid: false,\n      message: '노드를 찾을 수 없습니다.',\n      dropType: null,\n      position: null\n    };\n  }\n\n  // 자기 자신에 대한 드롭 방지\n  if (draggedNodeId === targetNodeId) {\n    return {\n      isValid: false,\n      message: '자기 자신으로는 이동할 수 없습니다.',\n      dropType: null,\n      position: null\n    };\n  }\n\n  if (dropZone === 'top' || dropZone === 'bottom') {\n    // 순서 변경 (같은 부모 내에서만 가능)\n    if (draggedNode.parentId !== targetNode.parentId) {\n      return {\n        isValid: false,\n        message: '같은 부모 노드 내에서만 순서 변경이 가능합니다.',\n        dropType: null,\n        position: null\n      };\n    }\n\n    return {\n      isValid: true,\n      message: '순서 변경이 가능합니다.',\n      dropType: 'reorder',\n      position: dropZone === 'top' ? 'before' : 'after'\n    };\n  } else if (dropZone === 'middle') {\n    // 계층 변경 (대상이 폴더인 경우만)\n    if (targetNode.type !== 'folder') {\n      return {\n        isValid: false,\n        message: '테스트케이스는 하위 노드를 가질 수 없습니다.',\n        dropType: null,\n        position: null\n      };\n    }\n\n    // 순환 참조 검사\n    const hasCircularReference = await treeRepository.checkCircularReference(draggedNodeId, targetNodeId);\n    if (hasCircularReference) {\n      return {\n        isValid: false,\n        message: '순환 참조가 감지되었습니다. 노드를 이동할 수 없습니다.',\n        dropType: null,\n        position: null\n      };\n    }\n\n    return {\n      isValid: true,\n      message: '계층 변경이 가능합니다.',\n      dropType: 'hierarchy',\n      position: null\n    };\n  }\n\n  return {\n    isValid: false,\n    message: '유효하지 않은 드롭 영역입니다.',\n    dropType: null,\n    position: null\n  };\n} "],"version":3}