fabba8765c6a82fcd28cb02f7a7241a5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const defectService_1 = require("../services/defectService");
const attachmentService_1 = require("../services/attachmentService");
const activityLogService_1 = require("../services/activityLogService");
const router = (0, express_1.Router)();
// 결함 목록 조회
router.get('/', async (req, res) => {
    try {
        const { page = 0, size = 20, status, priority, assignee } = req.query;
        const defects = await (0, defectService_1.listDefects)({
            page: Number(page),
            size: Number(size),
            status: status,
            priority: priority,
            assignee: assignee
        });
        res.json(defects);
    }
    catch (error) {
        console.error('List defects error:', error);
        res.status(500).json({ message: '결함 목록 조회 중 오류가 발생했습니다.' });
    }
});
// 결함 상세 조회
router.get('/:id', async (req, res) => {
    try {
        const defect = await (0, defectService_1.getDefectById)(Number(req.params.id));
        if (!defect) {
            return res.status(404).json({ message: '결함을 찾을 수 없습니다.' });
        }
        res.json(defect);
    }
    catch (error) {
        console.error('Get defect error:', error);
        res.status(500).json({ message: '결함 조회 중 오류가 발생했습니다.' });
    }
});
// 결함 생성
router.post('/', async (req, res) => {
    try {
        const defect = await (0, defectService_1.createDefect)({
            ...req.body,
            createdBy: req.body.createdBy || 'system'
        });
        res.status(201).json(defect);
    }
    catch (error) {
        console.error('Create defect error:', error);
        res.status(500).json({ message: '결함 생성 중 오류가 발생했습니다.' });
    }
});
// 결함 수정
router.put('/:id', async (req, res) => {
    try {
        const defect = await (0, defectService_1.updateDefect)(Number(req.params.id), {
            ...req.body,
            updatedBy: req.body.updatedBy || 'system'
        });
        if (!defect) {
            return res.status(404).json({ message: '결함을 찾을 수 없습니다.' });
        }
        res.json(defect);
    }
    catch (error) {
        console.error('Update defect error:', error);
        res.status(500).json({ message: '결함 수정 중 오류가 발생했습니다.' });
    }
});
// 결함 삭제
router.delete('/:id', async (req, res) => {
    try {
        const success = await (0, defectService_1.deleteDefect)(Number(req.params.id));
        if (!success) {
            return res.status(404).json({ message: '결함을 찾을 수 없습니다.' });
        }
        res.status(204).send();
    }
    catch (error) {
        console.error('Delete defect error:', error);
        res.status(500).json({ message: '결함 삭제 중 오류가 발생했습니다.' });
    }
});
// 결함 첨부파일 목록 조회
router.get('/:id/attachments', async (req, res) => {
    try {
        const attachments = await (0, attachmentService_1.getDefectAttachments)(Number(req.params.id));
        res.json(attachments);
    }
    catch (error) {
        console.error('Get attachments error:', error);
        res.status(500).json({ message: '첨부파일 조회 중 오류가 발생했습니다.' });
    }
});
// 첨부파일 다운로드
router.get('/:id/attachments/:attachmentId', async (req, res) => {
    try {
        const { fileStream, filename, contentType } = await (0, attachmentService_1.downloadAttachment)(Number(req.params.id), Number(req.params.attachmentId));
        res.setHeader('Content-Type', contentType);
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        fileStream.pipe(res);
    }
    catch (error) {
        console.error('Download attachment error:', error);
        res.status(404).json({ message: '첨부파일을 찾을 수 없습니다.' });
    }
});
// 결함 활동 로그 조회
router.get('/:id/activity-logs', async (req, res) => {
    try {
        const { page = 0, size = 20, dateRange, activityType, user } = req.query;
        const logs = await (0, activityLogService_1.getDefectActivityLogs)(Number(req.params.id), {
            page: Number(page),
            size: Number(size),
            dateRange: dateRange,
            activityType: activityType,
            user: user
        });
        res.json(logs);
    }
    catch (error) {
        console.error('Get activity logs error:', error);
        res.status(500).json({ message: '활동 로그 조회 중 오류가 발생했습니다.' });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9kZWZlY3RzL2NvbnRyb2xsZXJzL2RlZmVjdENvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBaUM7QUFDakMsNkRBQWlIO0FBQ2pILHFFQUF5RjtBQUN6Rix1RUFBdUU7QUFFdkUsTUFBTSxNQUFNLEdBQUcsSUFBQSxnQkFBTSxHQUFFLENBQUM7QUFFeEIsV0FBVztBQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDL0IsSUFBSSxDQUFDO1FBQ0QsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdEUsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLDJCQUFXLEVBQUM7WUFDOUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDbEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDbEIsTUFBTSxFQUFFLE1BQWdCO1lBQ3hCLFFBQVEsRUFBRSxRQUFrQjtZQUM1QixRQUFRLEVBQUUsUUFBa0I7U0FDL0IsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFdBQVc7QUFDWCxNQUFNLENBQUMsR0FBRyxD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QU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzVELElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2xCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2xCLFNBQVMsRUFBRSxTQUFtQjtZQUM5QixZQUFZLEVBQUUsWUFBc0I7WUFDcEMsSUFBSSxFQUFFLElBQWM7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9tYWluL2FwcC9kb21haW5zL2RlZmVjdHMvY29udHJvbGxlcnMvZGVmZWN0Q29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGNyZWF0ZURlZmVjdCwgdXBkYXRlRGVmZWN0LCBkZWxldGVEZWZlY3QsIGdldERlZmVjdEJ5SWQsIGxpc3REZWZlY3RzIH0gZnJvbSAnLi4vc2VydmljZXMvZGVmZWN0U2VydmljZSc7XG5pbXBvcnQgeyBnZXREZWZlY3RBdHRhY2htZW50cywgZG93bmxvYWRBdHRhY2htZW50IH0gZnJvbSAnLi4vc2VydmljZXMvYXR0YWNobWVudFNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0RGVmZWN0QWN0aXZpdHlMb2dzIH0gZnJvbSAnLi4vc2VydmljZXMvYWN0aXZpdHlMb2dTZXJ2aWNlJztcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbi8vIOqysO2VqCDrqqnroZ0g7KGw7ZqMXG5yb3V0ZXIuZ2V0KCcvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBwYWdlID0gMCwgc2l6ZSA9IDIwLCBzdGF0dXMsIHByaW9yaXR5LCBhc3NpZ25lZSB9ID0gcmVxLnF1ZXJ5O1xuICAgICAgICBjb25zdCBkZWZlY3RzID0gYXdhaXQgbGlzdERlZmVjdHMoe1xuICAgICAgICAgICAgcGFnZTogTnVtYmVyKHBhZ2UpLFxuICAgICAgICAgICAgc2l6ZTogTnVtYmVyKHNpemUpLFxuICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMgYXMgc3RyaW5nLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5IGFzIHN0cmluZyxcbiAgICAgICAgICAgIGFzc2lnbmVlOiBhc3NpZ25lZSBhcyBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5qc29uKGRlZmVjdHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xpc3QgZGVmZWN0cyBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ+qysO2VqCDrqqnroZ0g7KGw7ZqMIOykkSDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgfSk7XG4gICAgfVxufSk7XG5cbi8vIOqysO2VqCDsg4HshLgg7KGw7ZqMXG5yb3V0ZXIuZ2V0KCcvOmlkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVmZWN0ID0gYXdhaXQgZ2V0RGVmZWN0QnlJZChOdW1iZXIocmVxLnBhcmFtcy5pZCkpO1xuICAgICAgICBpZiAoIWRlZmVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ+qysO2VqOydhCDssL7snYQg7IiYIOyXhuyKteuLiOuLpC4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5qc29uKGRlZmVjdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignR2V0IGRlZmVjdCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ+qysO2VqCDsobDtmowg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9KTtcbiAgICB9XG59KTtcblxuLy8g6rKw7ZWoIOyDneyEsVxucm91dGVyLnBvc3QoJy8nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkZWZlY3QgPSBhd2FpdCBjcmVhdGVEZWZlY3Qoe1xuICAgICAgICAgICAgLi4ucmVxLmJvZHksXG4gICAgICAgICAgICBjcmVhdGVkQnk6IHJlcS5ib2R5LmNyZWF0ZWRCeSB8fCAnc3lzdGVtJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oZGVmZWN0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDcmVhdGUgZGVmZWN0IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAn6rKw7ZWoIOyDneyEsSDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nIH0pO1xuICAgIH1cbn0pO1xuXG4vLyDqsrDtlagg7IiY7KCVXG5yb3V0ZXIucHV0KCcvOmlkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVmZWN0ID0gYXdhaXQgdXBkYXRlRGVmZWN0KE51bWJlcihyZXEucGFyYW1zLmlkKSwge1xuICAgICAgICAgICAgLi4ucmVxLmJvZHksXG4gICAgICAgICAgICB1cGRhdGVkQnk6IHJlcS5ib2R5LnVwZGF0ZWRCeSB8fCAnc3lzdGVtJ1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFkZWZlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICfqsrDtlajsnYQg7LC+7J2EIOyImCDsl4bsirXri4jri6QuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXMuanNvbihkZWZlY3QpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VwZGF0ZSBkZWZlY3QgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICfqsrDtlagg7IiY7KCVIOykkSDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgfSk7XG4gICAgfVxufSk7XG5cbi8vIOqysO2VqCDsgq3soJxcbnJvdXRlci5kZWxldGUoJy86aWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgZGVsZXRlRGVmZWN0KE51bWJlcihyZXEucGFyYW1zLmlkKSk7XG4gICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ+qysO2VqOydhCDssL7snYQg7IiYIOyXhuyKteuLiOuLpC4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5zdGF0dXMoMjA0KS5zZW5kKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRGVsZXRlIGRlZmVjdCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ+qysO2VqCDsgq3soJwg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9KTtcbiAgICB9XG59KTtcblxuLy8g6rKw7ZWoIOyyqOu2gO2MjOydvCDrqqnroZ0g7KGw7ZqMXG5yb3V0ZXIuZ2V0KCcvOmlkL2F0dGFjaG1lbnRzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXR0YWNobWVudHMgPSBhd2FpdCBnZXREZWZlY3RBdHRhY2htZW50cyhOdW1iZXIocmVxLnBhcmFtcy5pZCkpO1xuICAgICAgICByZXMuanNvbihhdHRhY2htZW50cyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignR2V0IGF0dGFjaG1lbnRzIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAn7LKo67aA7YyM7J28IOyhsO2ajCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nIH0pO1xuICAgIH1cbn0pO1xuXG4vLyDssqjrtoDtjIzsnbwg64uk7Jq066Gc65OcXG5yb3V0ZXIuZ2V0KCcvOmlkL2F0dGFjaG1lbnRzLzphdHRhY2htZW50SWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGZpbGVTdHJlYW0sIGZpbGVuYW1lLCBjb250ZW50VHlwZSB9ID0gYXdhaXQgZG93bmxvYWRBdHRhY2htZW50KFxuICAgICAgICAgICAgTnVtYmVyKHJlcS5wYXJhbXMuaWQpLFxuICAgICAgICAgICAgTnVtYmVyKHJlcS5wYXJhbXMuYXR0YWNobWVudElkKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgY29udGVudFR5cGUpO1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiJHtmaWxlbmFtZX1cImApO1xuICAgICAgICBmaWxlU3RyZWFtLnBpcGUocmVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdEb3dubG9hZCBhdHRhY2htZW50IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAn7LKo67aA7YyM7J287J2EIOywvuydhCDsiJgg7JeG7Iq164uI64ukLicgfSk7XG4gICAgfVxufSk7XG5cbi8vIOqysO2VqCDtmZzrj5kg66Gc6re4IOyhsO2ajFxucm91dGVyLmdldCgnLzppZC9hY3Rpdml0eS1sb2dzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBwYWdlID0gMCwgc2l6ZSA9IDIwLCBkYXRlUmFuZ2UsIGFjdGl2aXR5VHlwZSwgdXNlciB9ID0gcmVxLnF1ZXJ5O1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgZ2V0RGVmZWN0QWN0aXZpdHlMb2dzKE51bWJlcihyZXEucGFyYW1zLmlkKSwge1xuICAgICAgICAgICAgcGFnZTogTnVtYmVyKHBhZ2UpLFxuICAgICAgICAgICAgc2l6ZTogTnVtYmVyKHNpemUpLFxuICAgICAgICAgICAgZGF0ZVJhbmdlOiBkYXRlUmFuZ2UgYXMgc3RyaW5nLFxuICAgICAgICAgICAgYWN0aXZpdHlUeXBlOiBhY3Rpdml0eVR5cGUgYXMgc3RyaW5nLFxuICAgICAgICAgICAgdXNlcjogdXNlciBhcyBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5qc29uKGxvZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dldCBhY3Rpdml0eSBsb2dzIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAn7Zmc64+ZIOuhnOq3uCDsobDtmowg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyAiXSwidmVyc2lvbiI6M30=