9245d54da335d5e2809cdf02b2189ae2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRelease = createRelease;
exports.listReleases = listReleases;
exports.getReleaseById = getReleaseById;
exports.updateRelease = updateRelease;
exports.deleteRelease = deleteRelease;
exports.listSuitesByRelease = listSuitesByRelease;
const pgClient_1 = require("../../../infrastructure/database/pgClient");
async function createRelease(data) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query(`INSERT INTO releases (name, description, start_date, end_date) VALUES ($1, $2, $3, $4) RETURNING *`, [data.name, data.description, data.startDate, data.endDate]);
    return rowToRelease(result.rows[0]);
}
async function listReleases() {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM releases ORDER BY id DESC');
    return result.rows.map(rowToRelease);
}
async function getReleaseById(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM releases WHERE id = $1', [id]);
    if (result.rows.length === 0)
        return null;
    return rowToRelease(result.rows[0]);
}
async function updateRelease(id, patch) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const current = await getReleaseById(id);
    if (!current)
        return null;
    const result = await pgClient.query(`UPDATE releases SET name=$1, description=$2, start_date=$3, end_date=$4 WHERE id=$5 RETURNING *`, [patch.name ?? current.name, patch.description ?? current.description, patch.startDate ?? current.startDate, patch.endDate ?? current.endDate, id]);
    if (result.rows.length === 0)
        return null;
    return rowToRelease(result.rows[0]);
}
async function deleteRelease(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('DELETE FROM releases WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function listSuitesByRelease(releaseId) {
    await (0, pgClient_1.ensurePgConnected)();
    const pgClient = (0, pgClient_1.getPgClient)();
    if (!pgClient) {
        throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');
    }
    const result = await pgClient.query('SELECT * FROM suites WHERE release_id = $1 ORDER BY id', [releaseId]);
    return result.rows.map(rowToSuite);
}
function rowToRelease(row) {
    return {
        id: row.id,
        name: row.name,
        description: row.description,
        startDate: row.start_date,
        endDate: row.end_date,
        createdAt: row.created_at,
    };
}
function rowToSuite(row) {
    return {
        id: row.id,
        releaseId: row.release_id,
        name: row.name,
        description: row.description,
        executor: row.executor,
        environment: row.environment,
        dueDate: row.due_date,
        createdAt: row.created_at,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,