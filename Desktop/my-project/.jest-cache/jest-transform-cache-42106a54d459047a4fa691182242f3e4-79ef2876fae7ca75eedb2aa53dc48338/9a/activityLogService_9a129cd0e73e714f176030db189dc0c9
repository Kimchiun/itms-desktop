62cf7d1a32dd8385390bcac548348d91
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefectActivityLogs = void 0;
const getDefectActivityLogs = async (defectId, params) => {
    // 실제 구현에서는 데이터베이스에서 조회
    // 현재는 목업 데이터 반환
    const mockLogs = [
        {
            id: 1,
            defectId,
            action: '결함 생성',
            user: 'tester1',
            date: new Date(Date.now() - 86400000), // 1일 전
            details: '새로운 결함이 생성되었습니다.',
            type: 'create'
        },
        {
            id: 2,
            defectId,
            action: '상태 변경',
            user: 'developer1',
            date: new Date(Date.now() - 43200000), // 12시간 전
            details: '상태가 OPEN에서 IN_PROGRESS로 변경되었습니다.',
            type: 'status_change'
        },
        {
            id: 3,
            defectId,
            action: '코멘트 추가',
            user: 'tester1',
            date: new Date(Date.now() - 21600000), // 6시간 전
            details: '추가 테스트 결과를 확인했습니다.',
            type: 'comment'
        },
        {
            id: 4,
            defectId,
            action: '상태 변경',
            user: 'developer1',
            date: new Date(Date.now() - 3600000), // 1시간 전
            details: '상태가 IN_PROGRESS에서 RESOLVED로 변경되었습니다.',
            type: 'status_change'
        }
    ];
    // 필터링 로직 (실제로는 데이터베이스 쿼리에서 처리)
    let filteredLogs = mockLogs;
    if (params.activityType) {
        filteredLogs = filteredLogs.filter(log => log.type === params.activityType);
    }
    if (params.user) {
        filteredLogs = filteredLogs.filter(log => log.user === params.user);
    }
    if (params.dateRange) {
        const now = new Date();
        let startDate;
        switch (params.dateRange) {
            case 'today':
                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                break;
            case 'week':
                startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                break;
            case 'month':
                startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                break;
            default:
                startDate = new Date(0); // 모든 날짜
        }
        filteredLogs = filteredLogs.filter(log => log.date >= startDate);
    }
    // 페이지네이션
    const startIndex = params.page * params.size;
    const endIndex = startIndex + params.size;
    const paginatedLogs = filteredLogs.slice(startIndex, endIndex);
    return {
        logs: paginatedLogs,
        total: filteredLogs.length,
        page: params.page,
        size: params.size
    };
};
exports.getDefectActivityLogs = getDefectActivityLogs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9kZWZlY3RzL3NlcnZpY2VzL2FjdGl2aXR5TG9nU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFVTyxNQUFNLHFCQUFxQixHQUFHLEtBQUssRUFDdEMsUUFBZ0IsRUFDaEIsTUFBeUIsRUFNMUIsRUFBRTtJQUNELHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsTUFBTSxRQUFRLEdBQWtCO1FBQzVCO1lBQ0ksRUFBRSxFQUFFLENBQUM7WUFDTCxRQUFRO1lBQ1IsTUFBTSxFQUFFLE9BQU87WUFDZixJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsT0FBTztZQUM5QyxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLElBQUksRUFBRSxRQUFRO1NBQ2pCO1FBQ0Q7WUFDSSxFQUFFLEVBQUUsQ0FBQztZQUNMLFFBQVE7WUFDUixNQUFNLEVBQUUsT0FBTztZQUNmLElBQUksRUFBRSxZQUFZO1lBQ2xCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsU0FBUztZQUNoRCxPQUFPLEVBQUUsa0NBQWtDO1lBQzNDLElBQUksRUFBRSxlQUFlO1NBQ3hCO1FBQ0Q7WUFDSSxFQUFFLEVBQUUsQ0FBQztZQUNMLFFBQVE7WUFDUixNQUFNLEVBQUUsUUFBUTtZQUNoQixJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsUUFBUTtZQUMvQyxPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLElBQUksRUFBRSxTQUFTO1NBQ2xCO1FBQ0Q7WUFDSSxFQUFFLEVBQUUsQ0FBQztZQUNMLFFBQVE7WUFDUixNQUFNLEVBQUUsT0FBTztZQUNmLElBQUksRUFBRSxZQUFZO1lBQ2xCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsUUFBUTtZQUM5QyxPQUFPLEVBQUUsc0NBQXNDO1lBQy9DLElBQUksRUFBRSxlQUFlO1NBQ3hCO0tBQ0osQ0FBQztJQUVGLCtCQUErQjtJQUMvQixJQUFJLFlBQVksR0FBRyxRQUFRLENBQUM7SUFFNUIsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBZSxDQUFDO1FBRXBCLFFBQVEsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssT0FBTztnQkFDUixTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDdkUsTUFBTTtZQUNWLEtBQUssTUFBTTtnQkFDUCxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztnQkFDOUQsTUFBTTtZQUNWLEtBQUssT0FBTztnQkFDUixTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQzNFLE1BQU07WUFDVjtnQkFDSSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQ3pDLENBQUM7UUFFRCxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELFNBQVM7SUFDVCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDN0MsTUFBTSxRQUFRLEdBQUcsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDMUMsTUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFL0QsT0FBTztRQUNILElBQUksRUFBRSxhQUFhO1FBQ25CLEtBQUssRUFBRSxZQUFZLENBQUMsTUFBTTtRQUMxQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0tBQ3BCLENBQUM7QUFDTixDQUFDLENBQUM7QUE3RlcsUUFBQSxxQkFBcUIseUJBNkZoQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9tYWluL2FwcC9kb21haW5zL2RlZmVjdHMvc2VydmljZXMvYWN0aXZpdHlMb2dTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2aXR5TG9nIH0gZnJvbSAnLi4vbW9kZWxzL0RlZmVjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZpdHlMb2dQYXJhbXMge1xuICAgIHBhZ2U6IG51bWJlcjtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgZGF0ZVJhbmdlPzogc3RyaW5nO1xuICAgIGFjdGl2aXR5VHlwZT86IHN0cmluZztcbiAgICB1c2VyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0RGVmZWN0QWN0aXZpdHlMb2dzID0gYXN5bmMgKFxuICAgIGRlZmVjdElkOiBudW1iZXIsIFxuICAgIHBhcmFtczogQWN0aXZpdHlMb2dQYXJhbXNcbik6IFByb21pc2U8e1xuICAgIGxvZ3M6IEFjdGl2aXR5TG9nW107XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBwYWdlOiBudW1iZXI7XG4gICAgc2l6ZTogbnVtYmVyO1xufT4gPT4ge1xuICAgIC8vIOyLpOygnCDqtaztmITsl5DshJzripQg642w7J207YSw67Kg7J207Iqk7JeQ7IScIOyhsO2ajFxuICAgIC8vIO2YhOyerOuKlCDrqqnsl4Ug642w7J207YSwIOuwmO2ZmFxuICAgIGNvbnN0IG1vY2tMb2dzOiBBY3Rpdml0eUxvZ1tdID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgIGRlZmVjdElkLFxuICAgICAgICAgICAgYWN0aW9uOiAn6rKw7ZWoIOyDneyEsScsXG4gICAgICAgICAgICB1c2VyOiAndGVzdGVyMScsXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gODY0MDAwMDApLCAvLyAx7J28IOyghFxuICAgICAgICAgICAgZGV0YWlsczogJ+yDiOuhnOyatCDqsrDtlajsnbQg7IOd7ISx65CY7JeI7Iq164uI64ukLicsXG4gICAgICAgICAgICB0eXBlOiAnY3JlYXRlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgIGRlZmVjdElkLFxuICAgICAgICAgICAgYWN0aW9uOiAn7IOB7YOcIOuzgOqyvScsXG4gICAgICAgICAgICB1c2VyOiAnZGV2ZWxvcGVyMScsXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNDMyMDAwMDApLCAvLyAxMuyLnOqwhCDsoIRcbiAgICAgICAgICAgIGRldGFpbHM6ICfsg4Htg5zqsIAgT1BFTuyXkOyEnCBJTl9QUk9HUkVTU+uhnCDrs4Dqsr3rkJjsl4jsirXri4jri6QuJyxcbiAgICAgICAgICAgIHR5cGU6ICdzdGF0dXNfY2hhbmdlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMyxcbiAgICAgICAgICAgIGRlZmVjdElkLFxuICAgICAgICAgICAgYWN0aW9uOiAn7L2U66mY7Yq4IOy2lOqwgCcsXG4gICAgICAgICAgICB1c2VyOiAndGVzdGVyMScsXG4gICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjE2MDAwMDApLCAvLyA27Iuc6rCEIOyghFxuICAgICAgICAgICAgZGV0YWlsczogJ+y2lOqwgCDthYzsiqTtirgg6rKw6rO866W8IO2ZleyduO2WiOyKteuLiOuLpC4nLFxuICAgICAgICAgICAgdHlwZTogJ2NvbW1lbnQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiA0LFxuICAgICAgICAgICAgZGVmZWN0SWQsXG4gICAgICAgICAgICBhY3Rpb246ICfsg4Htg5wg67OA6rK9JyxcbiAgICAgICAgICAgIHVzZXI6ICdkZXZlbG9wZXIxJyxcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgLSAzNjAwMDAwKSwgLy8gMeyLnOqwhCDsoIRcbiAgICAgICAgICAgIGRldGFpbHM6ICfsg4Htg5zqsIAgSU5fUFJPR1JFU1Psl5DshJwgUkVTT0xWRUTroZwg67OA6rK965CY7JeI7Iq164uI64ukLicsXG4gICAgICAgICAgICB0eXBlOiAnc3RhdHVzX2NoYW5nZSdcbiAgICAgICAgfVxuICAgIF07XG5cbiAgICAvLyDtlYTthLDrp4Eg66Gc7KeBICjsi6TsoJzroZzripQg642w7J207YSw67Kg7J207IqkIOy/vOumrOyXkOyEnCDsspjrpqwpXG4gICAgbGV0IGZpbHRlcmVkTG9ncyA9IG1vY2tMb2dzO1xuXG4gICAgaWYgKHBhcmFtcy5hY3Rpdml0eVR5cGUpIHtcbiAgICAgICAgZmlsdGVyZWRMb2dzID0gZmlsdGVyZWRMb2dzLmZpbHRlcihsb2cgPT4gbG9nLnR5cGUgPT09IHBhcmFtcy5hY3Rpdml0eVR5cGUpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudXNlcikge1xuICAgICAgICBmaWx0ZXJlZExvZ3MgPSBmaWx0ZXJlZExvZ3MuZmlsdGVyKGxvZyA9PiBsb2cudXNlciA9PT0gcGFyYW1zLnVzZXIpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZGF0ZVJhbmdlKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBzdGFydERhdGU6IERhdGU7XG5cbiAgICAgICAgc3dpdGNoIChwYXJhbXMuZGF0ZVJhbmdlKSB7XG4gICAgICAgICAgICBjYXNlICd0b2RheSc6XG4gICAgICAgICAgICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCBub3cuZ2V0RGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgLSA3ICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpIC0gMSwgbm93LmdldERhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKDApOyAvLyDrqqjrk6Ag64Kg7KecXG4gICAgICAgIH1cblxuICAgICAgICBmaWx0ZXJlZExvZ3MgPSBmaWx0ZXJlZExvZ3MuZmlsdGVyKGxvZyA9PiBsb2cuZGF0ZSA+PSBzdGFydERhdGUpO1xuICAgIH1cblxuICAgIC8vIO2OmOydtOyngOuEpOydtOyFmFxuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBwYXJhbXMucGFnZSAqIHBhcmFtcy5zaXplO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHBhcmFtcy5zaXplO1xuICAgIGNvbnN0IHBhZ2luYXRlZExvZ3MgPSBmaWx0ZXJlZExvZ3Muc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9nczogcGFnaW5hdGVkTG9ncyxcbiAgICAgICAgdG90YWw6IGZpbHRlcmVkTG9ncy5sZW5ndGgsXG4gICAgICAgIHBhZ2U6IHBhcmFtcy5wYWdlLFxuICAgICAgICBzaXplOiBwYXJhbXMuc2l6ZVxuICAgIH07XG59OyAiXSwidmVyc2lvbiI6M30=