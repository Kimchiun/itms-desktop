{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/repositories/executionRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/repositories/executionRepository.ts"],"sourcesContent":["import { Execution } from '../models/Execution';\nimport { getPgClient, ensurePgConnected } from '../../../infrastructure/database/pgClient';\n\nexport const executionRepository = {\n    async insert(execution: Omit<Execution, 'id' | 'createdAt' | 'updatedAt'>): Promise<Execution> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const now = new Date();\n        const result = await pgClient.query(\n            `INSERT INTO executions \n                (testcase_id, suite_id, release_id, status, executed_by, executed_at, repro_steps, screenshot_path, log_file_path, comment, created_at, updated_at)\n             VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)\n             RETURNING *`,\n            [\n                execution.testcaseId,\n                execution.suiteId ?? null,\n                execution.releaseId ?? null,\n                execution.status,\n                execution.executedBy,\n                execution.executedAt,\n                execution.reproSteps ?? null,\n                execution.screenshotPath ?? null,\n                execution.logFilePath ?? null,\n                execution.comment ?? null,\n                now,\n                now\n            ]\n        );\n        return mapRowToExecution(result.rows[0]);\n    },\n\n    async findById(id: number): Promise<Execution | null> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const result = await pgClient.query('SELECT * FROM executions WHERE id = $1', [id]);\n        return result.rows[0] ? mapRowToExecution(result.rows[0]) : null;\n    },\n\n    async findByTestCase(testcaseId: number): Promise<Execution[]> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        const result = await pgClient.query('SELECT * FROM executions WHERE testcase_id = $1', [testcaseId]);\n        return result.rows.map(mapRowToExecution);\n    },\n\n    async update(id: number, update: Partial<Omit<Execution, 'id' | 'createdAt'>>): Promise<Execution | null> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        // 동적 쿼리 빌드(간단화)\n        const fields = Object.keys(update);\n        if (fields.length === 0) return this.findById(id);\n        const setClause = fields.map((f, i) => `${toSnakeCase(f)} = $${i + 1}`).join(', ');\n        const values = fields.map(f => (update as any)[f]);\n        values.push(new Date()); // updated_at\n        const result = await pgClient.query(\n            `UPDATE executions SET ${setClause}, updated_at = $${fields.length + 1} WHERE id = $${fields.length + 2} RETURNING *`,\n            [...values, id]\n        );\n        return result.rows[0] ? mapRowToExecution(result.rows[0]) : null;\n    },\n\n    async delete(id: number): Promise<void> {\n        await ensurePgConnected();\n        const pgClient = getPgClient();\n        if (!pgClient) {\n            throw new Error('PostgreSQL 클라이언트가 초기화되지 않았습니다.');\n        }\n        await pgClient.query('DELETE FROM executions WHERE id = $1', [id]);\n    }\n};\n\nfunction mapRowToExecution(row: any): Execution {\n    return {\n        id: row.id,\n        testcaseId: row.testcase_id,\n        suiteId: row.suite_id,\n        releaseId: row.release_id,\n        status: row.status,\n        executedBy: row.executed_by,\n        executedAt: row.executed_at,\n        reproSteps: row.repro_steps,\n        screenshotPath: row.screenshot_path,\n        logFilePath: row.log_file_path,\n        comment: row.comment,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at\n    };\n}\n\nfunction toSnakeCase(str: string): string {\n    return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n} "],"version":3}