9d3a763ce40e7d9939784eee188a8187
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defectRepository = void 0;
const pgClient_1 = __importDefault(require("../../../infrastructure/database/pgClient"));
class DefectRepository {
    async create(defect) {
        const query = `
            INSERT INTO defects (
                title, description, status, priority, assignee, reporter, 
                created_by, test_case_id, release_id, created_at, updated_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
            RETURNING *
        `;
        const values = [
            defect.title,
            defect.description,
            defect.status,
            defect.priority,
            defect.assignee,
            defect.reporter,
            defect.createdBy,
            defect.testCaseId,
            defect.releaseId,
            defect.createdAt,
            defect.updatedAt
        ];
        const result = await pgClient_1.default.query(query, values);
        return result.rows[0];
    }
    async update(id, updates) {
        const setClause = Object.keys(updates)
            .filter(key => key !== 'id')
            .map((key, index) => `${key} = $${index + 2}`)
            .join(', ');
        const query = `
            UPDATE defects 
            SET ${setClause}
            WHERE id = $1
            RETURNING *
        `;
        const values = [id, ...Object.values(updates).filter(val => val !== undefined)];
        const result = await pgClient_1.default.query(query, values);
        return result.rows[0] || null;
    }
    async delete(id) {
        const query = 'DELETE FROM defects WHERE id = $1';
        const result = await pgClient_1.default.query(query, [id]);
        return (result.rowCount || 0) > 0;
    }
    async findById(id) {
        const query = 'SELECT * FROM defects WHERE id = $1';
        const result = await pgClient_1.default.query(query, [id]);
        return result.rows[0] || null;
    }
    async findWithPagination(params) {
        let whereClause = 'WHERE 1=1';
        const values = [];
        let valueIndex = 1;
        if (params.status) {
            whereClause += ` AND status = $${valueIndex++}`;
            values.push(params.status);
        }
        if (params.priority) {
            whereClause += ` AND priority = $${valueIndex++}`;
            values.push(params.priority);
        }
        if (params.assignee) {
            whereClause += ` AND assignee = $${valueIndex++}`;
            values.push(params.assignee);
        }
        // 총 개수 조회
        const countQuery = `SELECT COUNT(*) FROM defects ${whereClause}`;
        const countResult = await pgClient_1.default.query(countQuery, values);
        const total = parseInt(countResult.rows[0].count);
        // 페이지네이션된 데이터 조회
        const offset = params.page * params.size;
        const dataQuery = `
            SELECT * FROM defects 
            ${whereClause}
            ORDER BY created_at DESC
            LIMIT $${valueIndex} OFFSET $${valueIndex + 1}
        `;
        const dataResult = await pgClient_1.default.query(dataQuery, [...values, params.size, offset]);
        return {
            defects: dataResult.rows,
            total
        };
    }
}
exports.defectRepository = new DefectRepository();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,