{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/defects/repositories/defectRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/defects/repositories/defectRepository.ts"],"sourcesContent":["import pgClient from '../../../infrastructure/database/pgClient';\nimport { Defect, DefectStatus, DefectPriority } from '../models/Defect';\n\nexport interface DefectListParams {\n    page: number;\n    size: number;\n    status?: string;\n    priority?: string;\n    assignee?: string;\n}\n\nclass DefectRepository {\n    async create(defect: Omit<Defect, 'id'>): Promise<Defect> {\n        const query = `\n            INSERT INTO defects (\n                title, description, status, priority, assignee, reporter, \n                created_by, test_case_id, release_id, created_at, updated_at\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n            RETURNING *\n        `;\n        \n        const values = [\n            defect.title,\n            defect.description,\n            defect.status,\n            defect.priority,\n            defect.assignee,\n            defect.reporter,\n            defect.createdBy,\n            defect.testCaseId,\n            defect.releaseId,\n            defect.createdAt,\n            defect.updatedAt\n        ];\n        \n        const result = await pgClient.query(query, values);\n        return result.rows[0];\n    }\n\n    async update(id: number, updates: Partial<Defect>): Promise<Defect | null> {\n        const setClause = Object.keys(updates)\n            .filter(key => key !== 'id')\n            .map((key, index) => `${key} = $${index + 2}`)\n            .join(', ');\n        \n        const query = `\n            UPDATE defects \n            SET ${setClause}\n            WHERE id = $1\n            RETURNING *\n        `;\n        \n        const values = [id, ...Object.values(updates).filter(val => val !== undefined)];\n        const result = await pgClient.query(query, values);\n        \n        return result.rows[0] || null;\n    }\n\n    async delete(id: number): Promise<boolean> {\n        const query = 'DELETE FROM defects WHERE id = $1';\n        const result = await pgClient.query(query, [id]);\n        return (result.rowCount || 0) > 0;\n    }\n\n    async findById(id: number): Promise<Defect | null> {\n        const query = 'SELECT * FROM defects WHERE id = $1';\n        const result = await pgClient.query(query, [id]);\n        return result.rows[0] || null;\n    }\n\n    async findWithPagination(params: DefectListParams): Promise<{\n        defects: Defect[];\n        total: number;\n    }> {\n        let whereClause = 'WHERE 1=1';\n        const values: any[] = [];\n        let valueIndex = 1;\n\n        if (params.status) {\n            whereClause += ` AND status = $${valueIndex++}`;\n            values.push(params.status);\n        }\n\n        if (params.priority) {\n            whereClause += ` AND priority = $${valueIndex++}`;\n            values.push(params.priority);\n        }\n\n        if (params.assignee) {\n            whereClause += ` AND assignee = $${valueIndex++}`;\n            values.push(params.assignee);\n        }\n\n        // 총 개수 조회\n        const countQuery = `SELECT COUNT(*) FROM defects ${whereClause}`;\n        const countResult = await pgClient.query(countQuery, values);\n        const total = parseInt(countResult.rows[0].count);\n\n        // 페이지네이션된 데이터 조회\n        const offset = params.page * params.size;\n        const dataQuery = `\n            SELECT * FROM defects \n            ${whereClause}\n            ORDER BY created_at DESC\n            LIMIT $${valueIndex} OFFSET $${valueIndex + 1}\n        `;\n        \n        const dataResult = await pgClient.query(dataQuery, [...values, params.size, offset]);\n        \n        return {\n            defects: dataResult.rows,\n            total\n        };\n    }\n}\n\nexport const defectRepository = new DefectRepository(); "],"version":3}