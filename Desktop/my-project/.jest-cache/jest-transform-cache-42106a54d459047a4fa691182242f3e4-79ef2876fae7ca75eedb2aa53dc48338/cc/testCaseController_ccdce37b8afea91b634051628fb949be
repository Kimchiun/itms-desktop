d49fdd932718bf88244ca8a730db4177
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const testCaseService_1 = require("../services/testCaseService");
const testCaseRepository_1 = require("../repositories/testCaseRepository");
const testCaseIndexer_1 = require("../elasticsearch/testCaseIndexer");
const advancedSearchService_1 = require("../elasticsearch/advancedSearchService");
const router = (0, express_1.Router)();
router.get('/', async (req, res) => {
    const cases = await (0, testCaseRepository_1.listTestCases)();
    res.json(cases);
});
router.get('/:id', async (req, res) => {
    const tc = await (0, testCaseRepository_1.getTestCaseById)(Number(req.params.id));
    if (!tc)
        return res.status(404).json({ message: 'Not found' });
    res.json(tc);
});
router.post('/', async (req, res) => {
    const created = await (0, testCaseService_1.createTestCaseWithVersion)({ ...req.body, createdBy: req.body.createdBy });
    res.status(201).json(created);
});
router.put('/:id', async (req, res) => {
    const updated = await (0, testCaseService_1.updateTestCaseWithVersion)(Number(req.params.id), req.body, req.body.updatedBy);
    if (!updated)
        return res.status(404).json({ message: 'Not found' });
    res.json(updated);
});
router.delete('/:id', async (req, res) => {
    const ok = await (0, testCaseService_1.deleteTestCaseWithIndex)(Number(req.params.id));
    if (!ok)
        return res.status(404).json({ message: 'Not found' });
    res.status(204).send();
});
router.get('/:id/versions', async (req, res) => {
    const versions = await (0, testCaseService_1.getTestCaseVersions)(Number(req.params.id));
    res.json(versions);
});
router.post('/search', async (req, res) => {
    // req.body: Elasticsearch DSL 쿼리
    const results = await (0, testCaseIndexer_1.searchTestCases)(req.body);
    res.json(results);
});
// 고급 검색 API
router.post('/search/advanced', async (req, res) => {
    try {
        const { filters, page = 0, size = 20 } = req.body;
        const result = await (0, advancedSearchService_1.advancedSearch)(filters, page, size);
        res.json(result);
    }
    catch (error) {
        console.error('Advanced search error:', error);
        res.status(500).json({ message: '검색 중 오류가 발생했습니다.' });
    }
});
// 검색 프리셋 저장
router.post('/search/presets', async (req, res) => {
    try {
        const preset = await (0, advancedSearchService_1.saveSearchPreset)(req.body);
        res.status(201).json(preset);
    }
    catch (error) {
        console.error('Save preset error:', error);
        res.status(500).json({ message: '프리셋 저장 중 오류가 발생했습니다.' });
    }
});
// 검색 프리셋 목록 조회
router.get('/search/presets', async (req, res) => {
    try {
        const { createdBy } = req.query;
        const presets = await (0, advancedSearchService_1.getSearchPresets)(createdBy);
        res.json(presets);
    }
    catch (error) {
        console.error('Get presets error:', error);
        res.status(500).json({ message: '프리셋 조회 중 오류가 발생했습니다.' });
    }
});
// 검색 프리셋 삭제
router.delete('/search/presets/:id', async (req, res) => {
    try {
        const success = await (0, advancedSearchService_1.deleteSearchPreset)(req.params.id);
        if (success) {
            res.status(204).send();
        }
        else {
            res.status(404).json({ message: '프리셋을 찾을 수 없습니다.' });
        }
    }
    catch (error) {
        console.error('Delete preset error:', error);
        res.status(500).json({ message: '프리셋 삭제 중 오류가 발생했습니다.' });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,