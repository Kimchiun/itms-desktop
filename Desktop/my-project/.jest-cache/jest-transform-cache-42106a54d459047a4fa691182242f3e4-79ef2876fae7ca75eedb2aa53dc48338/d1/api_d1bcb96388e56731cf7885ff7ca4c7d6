4e7cf3d469b8af00a2bbe58825a1666c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBulkUpdateStatusMutation = exports.useBulkDeleteMutation = exports.useBulkCopyMutation = exports.useBulkMoveMutation = exports.useRegisterMutation = exports.useLoginMutation = exports.useCreateCommentMutation = exports.useGetCommentsQuery = exports.useUpdateDefectMutation = exports.useCreateDefectMutation = exports.useGetDefectQuery = exports.useGetDefectsQuery = exports.useUpdateExecutionMutation = exports.useCreateExecutionMutation = exports.useGetExecutionsQuery = exports.useCreateSuiteMutation = exports.useGetSuitesQuery = exports.useDeleteReleaseMutation = exports.useUpdateReleaseMutation = exports.useCreateReleaseMutation = exports.useGetReleaseQuery = exports.useGetReleasesQuery = exports.useDeleteTestCaseMutation = exports.useUpdateTestCaseMutation = exports.useCreateTestCaseMutation = exports.useGetTestCaseQuery = exports.useGetTestCasesQuery = exports.api = void 0;
const react_1 = require("@reduxjs/toolkit/query/react");
// 인증 토큰 관리
const getAuthToken = () => localStorage.getItem('accessToken');
const setAuthToken = (token) => localStorage.setItem('accessToken', token);
const removeAuthToken = () => localStorage.removeItem('accessToken');
// 토큰 갱신 함수
const refreshToken = async () => {
    try {
        const response = await fetch('http://localhost:3000/api/auth/refresh', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include',
        });
        if (response.ok) {
            const data = await response.json();
            setAuthToken(data.token);
            return data.token;
        }
    }
    catch (error) {
        console.error('Token refresh failed:', error);
    }
    return null;
};
// Base Query 설정
const baseQuery = (0, react_1.fetchBaseQuery)({
    baseUrl: 'http://localhost:3000',
    prepareHeaders: (headers) => {
        const token = getAuthToken();
        if (token) {
            headers.set('authorization', `Bearer ${token}`);
        }
        return headers;
    },
});
// 재시도 로직이 포함된 base query
const baseQueryWithReauth = async (args, api, extraOptions) => {
    let result = await baseQuery(args, api, extraOptions);
    if (result.error && result.error.status === 401) {
        // 토큰 갱신 시도
        const refreshResult = await refreshToken();
        if (refreshResult) {
            // 새로운 토큰으로 재시도
            result = await baseQuery(args, api, extraOptions);
        }
        else {
            // 갱신 실패 시 로그아웃
            removeAuthToken();
            window.location.href = '/login';
        }
    }
    return result;
};
// API 서비스 정의
exports.api = (0, react_1.createApi)({
    reducerPath: 'api',
    baseQuery: baseQueryWithReauth,
    tagTypes: ['TestCase', 'Release', 'Suite', 'Execution', 'Defect', 'Comment', 'User'],
    endpoints: (builder) => ({
        // TestCase API
        getTestCases: builder.query({
            query: () => '/api/testcases',
            providesTags: ['TestCase'],
        }),
        getTestCase: builder.query({
            query: (id) => `/api/testcases/${id}`,
            providesTags: (result, error, id) => [{ type: 'TestCase', id }],
        }),
        createTestCase: builder.mutation({
            query: (testCase) => ({
                url: '/api/testcases',
                method: 'POST',
                body: testCase,
            }),
            invalidatesTags: ['TestCase'],
        }),
        updateTestCase: builder.mutation({
            query: ({ id, data }) => ({
                url: `/api/testcases/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: (result, error, { id }) => [{ type: 'TestCase', id }],
        }),
        deleteTestCase: builder.mutation({
            query: (id) => ({
                url: `/api/testcases/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: ['TestCase'],
        }),
        // Release API
        getReleases: builder.query({
            query: () => '/api/releases',
            providesTags: ['Release'],
        }),
        getRelease: builder.query({
            query: (id) => `/api/releases/${id}`,
            providesTags: (result, error, id) => [{ type: 'Release', id }],
        }),
        createRelease: builder.mutation({
            query: (release) => ({
                url: '/api/releases',
                method: 'POST',
                body: release,
            }),
            invalidatesTags: ['Release'],
        }),
        updateRelease: builder.mutation({
            query: ({ id, data }) => ({
                url: `/api/releases/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: (result, error, { id }) => [{ type: 'Release', id }],
        }),
        deleteRelease: builder.mutation({
            query: (id) => ({
                url: `/api/releases/${id}`,
                method: 'DELETE',
            }),
            invalidatesTags: ['Release'],
        }),
        // Suite API
        getSuites: builder.query({
            query: () => '/api/suites',
            providesTags: ['Suite'],
        }),
        createSuite: builder.mutation({
            query: (suite) => ({
                url: '/api/suites',
                method: 'POST',
                body: suite,
            }),
            invalidatesTags: ['Suite'],
        }),
        // Execution API
        getExecutions: builder.query({
            query: (testcaseId) => `/api/executions/testcase/${testcaseId}`,
            providesTags: ['Execution'],
        }),
        createExecution: builder.mutation({
            query: (execution) => ({
                url: '/api/executions',
                method: 'POST',
                body: execution,
            }),
            invalidatesTags: ['Execution'],
        }),
        updateExecution: builder.mutation({
            query: ({ id, data }) => ({
                url: `/api/executions/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: (result, error, { id }) => [{ type: 'Execution', id }],
        }),
        // Defect API
        getDefects: builder.query({
            query: () => '/api/defects',
            providesTags: ['Defect'],
        }),
        getDefect: builder.query({
            query: (id) => `/api/defects/${id}`,
            providesTags: (result, error, id) => [{ type: 'Defect', id }],
        }),
        createDefect: builder.mutation({
            query: (defect) => ({
                url: '/api/defects',
                method: 'POST',
                body: defect,
            }),
            invalidatesTags: ['Defect'],
        }),
        updateDefect: builder.mutation({
            query: ({ id, data }) => ({
                url: `/api/defects/${id}`,
                method: 'PUT',
                body: data,
            }),
            invalidatesTags: (result, error, { id }) => [{ type: 'Defect', id }],
        }),
        // Comment API
        getComments: builder.query({
            query: (executionId) => `/api/comments/execution/${executionId}`,
            providesTags: ['Comment'],
        }),
        createComment: builder.mutation({
            query: (comment) => ({
                url: '/api/comments',
                method: 'POST',
                body: comment,
            }),
            invalidatesTags: ['Comment'],
        }),
        // Auth API
        login: builder.mutation({
            query: (credentials) => ({
                url: '/api/auth/login',
                method: 'POST',
                body: credentials,
            }),
        }),
        register: builder.mutation({
            query: (userData) => ({
                url: '/api/auth/register',
                method: 'POST',
                body: userData,
            }),
        }),
        // Bulk Operations
        bulkMove: builder.mutation({
            query: (data) => ({
                url: '/api/bulk/move',
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['TestCase'],
        }),
        bulkCopy: builder.mutation({
            query: (data) => ({
                url: '/api/bulk/copy',
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['TestCase'],
        }),
        bulkDelete: builder.mutation({
            query: (data) => ({
                url: '/api/bulk',
                method: 'DELETE',
                body: data,
            }),
            invalidatesTags: ['TestCase'],
        }),
        bulkUpdateStatus: builder.mutation({
            query: (data) => ({
                url: '/api/bulk/status',
                method: 'PATCH',
                body: data,
            }),
            invalidatesTags: ['TestCase'],
        }),
    }),
});
// Auto-generated hooks
// TestCase hooks
exports.useGetTestCasesQuery = exports.api.useGetTestCasesQuery, exports.useGetTestCaseQuery = exports.api.useGetTestCaseQuery, exports.useCreateTestCaseMutation = exports.api.useCreateTestCaseMutation, exports.useUpdateTestCaseMutation = exports.api.useUpdateTestCaseMutation, exports.useDeleteTestCaseMutation = exports.api.useDeleteTestCaseMutation, 
// Release hooks
exports.useGetReleasesQuery = exports.api.useGetReleasesQuery, exports.useGetReleaseQuery = exports.api.useGetReleaseQuery, exports.useCreateReleaseMutation = exports.api.useCreateReleaseMutation, exports.useUpdateReleaseMutation = exports.api.useUpdateReleaseMutation, exports.useDeleteReleaseMutation = exports.api.useDeleteReleaseMutation, 
// Suite hooks
exports.useGetSuitesQuery = exports.api.useGetSuitesQuery, exports.useCreateSuiteMutation = exports.api.useCreateSuiteMutation, 
// Execution hooks
exports.useGetExecutionsQuery = exports.api.useGetExecutionsQuery, exports.useCreateExecutionMutation = exports.api.useCreateExecutionMutation, exports.useUpdateExecutionMutation = exports.api.useUpdateExecutionMutation, 
// Defect hooks
exports.useGetDefectsQuery = exports.api.useGetDefectsQuery, exports.useGetDefectQuery = exports.api.useGetDefectQuery, exports.useCreateDefectMutation = exports.api.useCreateDefectMutation, exports.useUpdateDefectMutation = exports.api.useUpdateDefectMutation, 
// Comment hooks
exports.useGetCommentsQuery = exports.api.useGetCommentsQuery, exports.useCreateCommentMutation = exports.api.useCreateCommentMutation, 
// Auth hooks
exports.useLoginMutation = exports.api.useLoginMutation, exports.useRegisterMutation = exports.api.useRegisterMutation, 
// Bulk operation hooks
exports.useBulkMoveMutation = exports.api.useBulkMoveMutation, exports.useBulkCopyMutation = exports.api.useBulkCopyMutation, exports.useBulkDeleteMutation = exports.api.useBulkDeleteMutation, exports.useBulkUpdateStatusMutation = exports.api.useBulkUpdateStatusMutation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,