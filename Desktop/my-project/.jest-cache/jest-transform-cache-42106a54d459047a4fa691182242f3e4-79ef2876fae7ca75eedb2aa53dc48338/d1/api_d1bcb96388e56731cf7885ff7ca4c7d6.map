{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/services/api.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/services/api.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport type { \n  TestCase, \n  Release, \n  Suite, \n  Execution, \n  Defect, \n  Comment,\n  User \n} from '../types';\n\n// 인증 토큰 관리\nconst getAuthToken = () => localStorage.getItem('accessToken');\nconst setAuthToken = (token: string) => localStorage.setItem('accessToken', token);\nconst removeAuthToken = () => localStorage.removeItem('accessToken');\n\n// 토큰 갱신 함수\nconst refreshToken = async () => {\n  try {\n    const response = await fetch('http://localhost:3000/api/auth/refresh', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      setAuthToken(data.token);\n      return data.token;\n    }\n  } catch (error) {\n    console.error('Token refresh failed:', error);\n  }\n  return null;\n};\n\n// Base Query 설정\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3000',\n  prepareHeaders: (headers) => {\n    const token = getAuthToken();\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    return headers;\n  },\n});\n\n// 재시도 로직이 포함된 base query\nconst baseQueryWithReauth = async (args: any, api: any, extraOptions: any) => {\n  let result = await baseQuery(args, api, extraOptions);\n  \n  if (result.error && result.error.status === 401) {\n    // 토큰 갱신 시도\n    const refreshResult = await refreshToken();\n    if (refreshResult) {\n      // 새로운 토큰으로 재시도\n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      // 갱신 실패 시 로그아웃\n      removeAuthToken();\n      window.location.href = '/login';\n    }\n  }\n  \n  return result;\n};\n\n// API 서비스 정의\nexport const api = createApi({\n  reducerPath: 'api',\n  baseQuery: baseQueryWithReauth,\n  tagTypes: ['TestCase', 'Release', 'Suite', 'Execution', 'Defect', 'Comment', 'User'],\n  endpoints: (builder) => ({\n    // TestCase API\n    getTestCases: builder.query<TestCase[], void>({\n      query: () => '/api/testcases',\n      providesTags: ['TestCase'],\n    }),\n    \n    getTestCase: builder.query<TestCase, number>({\n      query: (id) => `/api/testcases/${id}`,\n      providesTags: (result, error, id) => [{ type: 'TestCase', id }],\n    }),\n    \n    createTestCase: builder.mutation<TestCase, Partial<TestCase>>({\n      query: (testCase) => ({\n        url: '/api/testcases',\n        method: 'POST',\n        body: testCase,\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n    \n    updateTestCase: builder.mutation<TestCase, { id: number; data: Partial<TestCase> }>({\n      query: ({ id, data }) => ({\n        url: `/api/testcases/${id}`,\n        method: 'PUT',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'TestCase', id }],\n    }),\n    \n    deleteTestCase: builder.mutation<void, number>({\n      query: (id) => ({\n        url: `/api/testcases/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n    \n    // Release API\n    getReleases: builder.query<Release[], void>({\n      query: () => '/api/releases',\n      providesTags: ['Release'],\n    }),\n    \n    getRelease: builder.query<Release, number>({\n      query: (id) => `/api/releases/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Release', id }],\n    }),\n    \n    createRelease: builder.mutation<Release, Partial<Release>>({\n      query: (release) => ({\n        url: '/api/releases',\n        method: 'POST',\n        body: release,\n      }),\n      invalidatesTags: ['Release'],\n    }),\n    \n    updateRelease: builder.mutation<Release, { id: number; data: Partial<Release> }>({\n      query: ({ id, data }) => ({\n        url: `/api/releases/${id}`,\n        method: 'PUT',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Release', id }],\n    }),\n    \n    deleteRelease: builder.mutation<void, number>({\n      query: (id) => ({\n        url: `/api/releases/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Release'],\n    }),\n    \n    // Suite API\n    getSuites: builder.query<Suite[], void>({\n      query: () => '/api/suites',\n      providesTags: ['Suite'],\n    }),\n    \n    createSuite: builder.mutation<Suite, Partial<Suite>>({\n      query: (suite) => ({\n        url: '/api/suites',\n        method: 'POST',\n        body: suite,\n      }),\n      invalidatesTags: ['Suite'],\n    }),\n    \n    // Execution API\n    getExecutions: builder.query<Execution[], number>({\n      query: (testcaseId) => `/api/executions/testcase/${testcaseId}`,\n      providesTags: ['Execution'],\n    }),\n    \n    createExecution: builder.mutation<Execution, Partial<Execution>>({\n      query: (execution) => ({\n        url: '/api/executions',\n        method: 'POST',\n        body: execution,\n      }),\n      invalidatesTags: ['Execution'],\n    }),\n    \n    updateExecution: builder.mutation<Execution, { id: number; data: Partial<Execution> }>({\n      query: ({ id, data }) => ({\n        url: `/api/executions/${id}`,\n        method: 'PUT',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Execution', id }],\n    }),\n    \n    // Defect API\n    getDefects: builder.query<Defect[], void>({\n      query: () => '/api/defects',\n      providesTags: ['Defect'],\n    }),\n    \n    getDefect: builder.query<Defect, number>({\n      query: (id) => `/api/defects/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Defect', id }],\n    }),\n    \n    createDefect: builder.mutation<Defect, Partial<Defect>>({\n      query: (defect) => ({\n        url: '/api/defects',\n        method: 'POST',\n        body: defect,\n      }),\n      invalidatesTags: ['Defect'],\n    }),\n    \n    updateDefect: builder.mutation<Defect, { id: number; data: Partial<Defect> }>({\n      query: ({ id, data }) => ({\n        url: `/api/defects/${id}`,\n        method: 'PUT',\n        body: data,\n      }),\n      invalidatesTags: (result, error, { id }) => [{ type: 'Defect', id }],\n    }),\n    \n    // Comment API\n    getComments: builder.query<Comment[], number>({\n      query: (executionId) => `/api/comments/execution/${executionId}`,\n      providesTags: ['Comment'],\n    }),\n    \n    createComment: builder.mutation<Comment, Partial<Comment>>({\n      query: (comment) => ({\n        url: '/api/comments',\n        method: 'POST',\n        body: comment,\n      }),\n      invalidatesTags: ['Comment'],\n    }),\n    \n    // Auth API\n    login: builder.mutation<{ token: string; user: User }, { username: string; password: string }>({\n      query: (credentials) => ({\n        url: '/api/auth/login',\n        method: 'POST',\n        body: credentials,\n      }),\n    }),\n    \n    register: builder.mutation<User, { username: string; password: string; role: string }>({\n      query: (userData) => ({\n        url: '/api/auth/register',\n        method: 'POST',\n        body: userData,\n      }),\n    }),\n    \n    // Bulk Operations\n    bulkMove: builder.mutation<void, { ids: number[]; targetFolder: string }>({\n      query: (data) => ({\n        url: '/api/bulk/move',\n        method: 'POST',\n        body: data,\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n    \n    bulkCopy: builder.mutation<void, { ids: number[]; targetFolder: string }>({\n      query: (data) => ({\n        url: '/api/bulk/copy',\n        method: 'POST',\n        body: data,\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n    \n    bulkDelete: builder.mutation<void, { ids: number[] }>({\n      query: (data) => ({\n        url: '/api/bulk',\n        method: 'DELETE',\n        body: data,\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n    \n    bulkUpdateStatus: builder.mutation<void, { ids: number[]; status: string }>({\n      query: (data) => ({\n        url: '/api/bulk/status',\n        method: 'PATCH',\n        body: data,\n      }),\n      invalidatesTags: ['TestCase'],\n    }),\n  }),\n});\n\n// Auto-generated hooks\nexport const {\n  // TestCase hooks\n  useGetTestCasesQuery,\n  useGetTestCaseQuery,\n  useCreateTestCaseMutation,\n  useUpdateTestCaseMutation,\n  useDeleteTestCaseMutation,\n  \n  // Release hooks\n  useGetReleasesQuery,\n  useGetReleaseQuery,\n  useCreateReleaseMutation,\n  useUpdateReleaseMutation,\n  useDeleteReleaseMutation,\n  \n  // Suite hooks\n  useGetSuitesQuery,\n  useCreateSuiteMutation,\n  \n  // Execution hooks\n  useGetExecutionsQuery,\n  useCreateExecutionMutation,\n  useUpdateExecutionMutation,\n  \n  // Defect hooks\n  useGetDefectsQuery,\n  useGetDefectQuery,\n  useCreateDefectMutation,\n  useUpdateDefectMutation,\n  \n  // Comment hooks\n  useGetCommentsQuery,\n  useCreateCommentMutation,\n  \n  // Auth hooks\n  useLoginMutation,\n  useRegisterMutation,\n  \n  // Bulk operation hooks\n  useBulkMoveMutation,\n  useBulkCopyMutation,\n  useBulkDeleteMutation,\n  useBulkUpdateStatusMutation,\n} = api; "],"version":3}