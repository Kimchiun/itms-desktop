a7200e291dcce1ad683982e5da8b2813
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const folderService = __importStar(require("../services/folderService"));
const router = (0, express_1.Router)();
// 폴더 목록 조회
router.get('/', async (req, res) => {
    try {
        const folders = await folderService.listFolders();
        res.json(folders);
    }
    catch (error) {
        console.error('폴더 목록 조회 실패:', error);
        res.status(500).json({ message: '폴더 목록 조회에 실패했습니다.' });
    }
});
// 폴더 트리 구조 조회
router.get('/tree', async (req, res) => {
    try {
        const folderTree = await folderService.getFolderTree();
        res.json(folderTree);
    }
    catch (error) {
        console.error('폴더 트리 조회 실패:', error);
        res.status(500).json({ message: '폴더 트리 조회에 실패했습니다.' });
    }
});
// 특정 폴더 조회
router.get('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });
        }
        const folder = await folderService.getFolderById(id);
        if (!folder) {
            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });
        }
        res.json(folder);
    }
    catch (error) {
        console.error('폴더 조회 실패:', error);
        res.status(500).json({ message: '폴더 조회에 실패했습니다.' });
    }
});
// 폴더 생성
router.post('/', async (req, res) => {
    try {
        const folderData = {
            name: req.body.name,
            description: req.body.description,
            parentId: req.body.parentId,
            sortOrder: req.body.sortOrder,
            createdBy: req.body.createdBy || 'system'
        };
        const folder = await folderService.createFolder(folderData);
        res.status(201).json(folder);
    }
    catch (error) {
        console.error('폴더 생성 실패:', error);
        res.status(400).json({ message: '폴더 생성에 실패했습니다.' });
    }
});
// 폴더 수정
router.put('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });
        }
        const updateData = {
            name: req.body.name,
            description: req.body.description,
            parentId: req.body.parentId,
            sortOrder: req.body.sortOrder,
            updatedBy: req.body.updatedBy || 'system'
        };
        const folder = await folderService.updateFolder(id, updateData);
        if (!folder) {
            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });
        }
        res.json(folder);
    }
    catch (error) {
        console.error('폴더 수정 실패:', error);
        res.status(400).json({ message: '폴더 수정에 실패했습니다.' });
    }
});
// 폴더 삭제
router.delete('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });
        }
        const success = await folderService.deleteFolder(id);
        if (!success) {
            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });
        }
        res.json({ message: '폴더가 성공적으로 삭제되었습니다.' });
    }
    catch (error) {
        console.error('폴더 삭제 실패:', error);
        res.status(400).json({ message: '폴더 삭제에 실패했습니다.' });
    }
});
// 드래그 앤 드롭 처리
router.post('/dragdrop', async (req, res) => {
    try {
        const { draggedNodeId, targetNodeId, dropType, position } = req.body;
        if (!draggedNodeId || !targetNodeId || !dropType) {
            return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });
        }
        const result = await folderService.handleFolderDragDrop({
            draggedNodeId,
            targetNodeId,
            dropType,
            position
        });
        res.json(result);
    }
    catch (error) {
        console.error('드래그 앤 드롭 실패:', error);
        res.status(400).json({ message: '드래그 앤 드롭에 실패했습니다.' });
    }
});
// 드롭 영역 유효성 검사
router.post('/validate-drop', async (req, res) => {
    try {
        const { draggedNodeId, targetNodeId, dropZone } = req.body;
        if (!draggedNodeId || !targetNodeId || !dropZone) {
            return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });
        }
        const validation = await folderService.validateDropZone(draggedNodeId, targetNodeId, dropZone);
        res.json({ isValid: validation });
    }
    catch (error) {
        console.error('드롭 영역 유효성 검사 실패:', error);
        res.status(500).json({ message: '드롭 영역 유효성 검사에 실패했습니다.' });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,