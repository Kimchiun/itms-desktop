{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/controllers/folderController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/controllers/folderController.ts"],"sourcesContent":["import { Router } from 'express';\nimport * as folderService from '../services/folderService';\nimport { CreateFolderRequest, UpdateFolderRequest } from '../models/Folder';\n\nconst router = Router();\n\n// 폴더 목록 조회\nrouter.get('/', async (req, res) => {\n    try {\n        const folders = await folderService.listFolders();\n        res.json(folders);\n    } catch (error) {\n        console.error('폴더 목록 조회 실패:', error);\n        res.status(500).json({ message: '폴더 목록 조회에 실패했습니다.' });\n    }\n});\n\n// 폴더 트리 구조 조회\nrouter.get('/tree', async (req, res) => {\n    try {\n        const folderTree = await folderService.getFolderTree();\n        res.json(folderTree);\n    } catch (error) {\n        console.error('폴더 트리 조회 실패:', error);\n        res.status(500).json({ message: '폴더 트리 조회에 실패했습니다.' });\n    }\n});\n\n// 특정 폴더 조회\nrouter.get('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        if (isNaN(id)) {\n            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });\n        }\n\n        const folder = await folderService.getFolderById(id);\n        if (!folder) {\n            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });\n        }\n\n        res.json(folder);\n    } catch (error) {\n        console.error('폴더 조회 실패:', error);\n        res.status(500).json({ message: '폴더 조회에 실패했습니다.' });\n    }\n});\n\n// 폴더 생성\nrouter.post('/', async (req, res) => {\n    try {\n        const folderData: CreateFolderRequest = {\n            name: req.body.name,\n            description: req.body.description,\n            parentId: req.body.parentId,\n            sortOrder: req.body.sortOrder,\n            createdBy: req.body.createdBy || 'system'\n        };\n\n        const folder = await folderService.createFolder(folderData);\n        res.status(201).json(folder);\n    } catch (error) {\n        console.error('폴더 생성 실패:', error);\n        res.status(400).json({ message: '폴더 생성에 실패했습니다.' });\n    }\n});\n\n// 폴더 수정\nrouter.put('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        if (isNaN(id)) {\n            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });\n        }\n\n        const updateData: UpdateFolderRequest = {\n            name: req.body.name,\n            description: req.body.description,\n            parentId: req.body.parentId,\n            sortOrder: req.body.sortOrder,\n            updatedBy: req.body.updatedBy || 'system'\n        };\n\n        const folder = await folderService.updateFolder(id, updateData);\n        if (!folder) {\n            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });\n        }\n\n        res.json(folder);\n    } catch (error) {\n        console.error('폴더 수정 실패:', error);\n        res.status(400).json({ message: '폴더 수정에 실패했습니다.' });\n    }\n});\n\n// 폴더 삭제\nrouter.delete('/:id', async (req, res) => {\n    try {\n        const id = parseInt(req.params.id);\n        if (isNaN(id)) {\n            return res.status(400).json({ message: '유효하지 않은 폴더 ID입니다.' });\n        }\n\n        const success = await folderService.deleteFolder(id);\n        if (!success) {\n            return res.status(404).json({ message: '폴더를 찾을 수 없습니다.' });\n        }\n\n        res.json({ message: '폴더가 성공적으로 삭제되었습니다.' });\n    } catch (error) {\n        console.error('폴더 삭제 실패:', error);\n        res.status(400).json({ message: '폴더 삭제에 실패했습니다.' });\n    }\n});\n\n// 드래그 앤 드롭 처리\nrouter.post('/dragdrop', async (req, res) => {\n    try {\n        const { draggedNodeId, targetNodeId, dropType, position } = req.body;\n\n        if (!draggedNodeId || !targetNodeId || !dropType) {\n            return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });\n        }\n\n        const result = await folderService.handleFolderDragDrop({\n            draggedNodeId,\n            targetNodeId,\n            dropType,\n            position\n        });\n\n        res.json(result);\n    } catch (error) {\n        console.error('드래그 앤 드롭 실패:', error);\n        res.status(400).json({ message: '드래그 앤 드롭에 실패했습니다.' });\n    }\n});\n\n// 드롭 영역 유효성 검사\nrouter.post('/validate-drop', async (req, res) => {\n    try {\n        const { draggedNodeId, targetNodeId, dropZone } = req.body;\n\n        if (!draggedNodeId || !targetNodeId || !dropZone) {\n            return res.status(400).json({ message: '필수 파라미터가 누락되었습니다.' });\n        }\n\n        const validation = await folderService.validateDropZone(draggedNodeId, targetNodeId, dropZone);\n        res.json({ isValid: validation });\n    } catch (error) {\n        console.error('드롭 영역 유효성 검사 실패:', error);\n        res.status(500).json({ message: '드롭 영역 유효성 검사에 실패했습니다.' });\n    }\n});\n\nexport default router; "],"version":3}