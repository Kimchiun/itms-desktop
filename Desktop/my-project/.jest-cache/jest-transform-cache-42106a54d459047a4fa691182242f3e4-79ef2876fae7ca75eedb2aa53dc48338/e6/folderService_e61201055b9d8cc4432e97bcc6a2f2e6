1fa178cec1d099e8bd6dae2f4d7fe9a6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.listFolders = listFolders;
exports.getFolderTree = getFolderTree;
exports.moveFolder = moveFolder;
exports.addTestCaseToFolder = addTestCaseToFolder;
exports.validateDropZone = validateDropZone;
exports.handleFolderDragDrop = handleFolderDragDrop;
const folderRepository_1 = require("../repositories/folderRepository");
async function createFolder(folderData) {
    return await (0, folderRepository_1.createFolder)(folderData);
}
async function getFolderById(id) {
    return await (0, folderRepository_1.getFolderById)(id);
}
async function updateFolder(id, folderData) {
    return await (0, folderRepository_1.updateFolder)(id, folderData);
}
async function deleteFolder(id) {
    return await (0, folderRepository_1.deleteFolder)(id);
}
async function listFolders() {
    return await (0, folderRepository_1.listFolders)();
}
async function getFolderTree() {
    const folders = await (0, folderRepository_1.listFolders)();
    return buildFolderTree(folders);
}
async function moveFolder(folderId, moveData) {
    // 순환 참조 방지
    if (folderId === moveData.targetParentId) {
        throw new Error('자기 자신을 부모로 설정할 수 없습니다.');
    }
    // 대상 폴더가 현재 폴더의 하위 폴더인지 확인
    if (moveData.targetParentId) {
        const targetFolder = await (0, folderRepository_1.getFolderById)(moveData.targetParentId);
        if (!targetFolder) {
            throw new Error('대상 폴더를 찾을 수 없습니다.');
        }
        if (await isDescendant(folderId, moveData.targetParentId)) {
            throw new Error('하위 폴더를 부모로 설정할 수 없습니다.');
        }
    }
    return await (0, folderRepository_1.updateFolder)(folderId, {
        parentId: moveData.targetParentId,
        updatedBy: moveData.updatedBy
    });
}
async function addTestCaseToFolder(testCaseId, folderId) {
    // 폴더 존재 확인
    const folder = await (0, folderRepository_1.getFolderById)(folderId);
    if (!folder) {
        throw new Error('폴더를 찾을 수 없습니다.');
    }
    return await (0, folderRepository_1.addTestCaseToFolder)(testCaseId, folderId);
}
async function validateDropZone(draggedNodeId, targetNodeId, dropZone) {
    // 같은 노드로 드롭하는 경우
    if (draggedNodeId === targetNodeId) {
        return false;
    }
    // 폴더를 폴더에 드롭하는 경우
    const draggedFolder = await (0, folderRepository_1.getFolderById)(draggedNodeId);
    const targetFolder = await (0, folderRepository_1.getFolderById)(targetNodeId);
    if (draggedFolder && targetFolder) {
        // 순환 참조 방지
        if (dropZone === 'inside' && await isDescendant(draggedNodeId, targetNodeId)) {
            return false;
        }
        return true;
    }
    return true;
}
async function handleFolderDragDrop(dragDropRequest) {
    const { draggedNodeId, targetNodeId, dropType } = dragDropRequest;
    // 유효성 검사
    const isValid = await validateDropZone(draggedNodeId, targetNodeId, dropType);
    if (!isValid) {
        throw new Error('유효하지 않은 드롭 영역입니다.');
    }
    const draggedFolder = await (0, folderRepository_1.getFolderById)(draggedNodeId);
    const targetFolder = await (0, folderRepository_1.getFolderById)(targetNodeId);
    if (!draggedFolder || !targetFolder) {
        throw new Error('폴더를 찾을 수 없습니다.');
    }
    let newParentId;
    let newSortOrder;
    switch (dropType) {
        case 'inside':
            newParentId = targetNodeId;
            break;
        case 'before':
        case 'after':
            newParentId = targetFolder.parentId;
            // 정렬 순서 조정 로직 (실제로는 더 복잡한 로직 필요)
            newSortOrder = dropType === 'before' ? targetFolder.sortOrder - 1 : targetFolder.sortOrder + 1;
            break;
    }
    return await (0, folderRepository_1.updateFolder)(draggedNodeId, {
        parentId: newParentId,
        sortOrder: newSortOrder,
        updatedBy: 'system'
    });
}
// 헬퍼 함수들
function buildFolderTree(folders) {
    const folderMap = new Map();
    const rootFolders = [];
    // 모든 폴더를 맵에 추가
    folders.forEach(folder => {
        folderMap.set(folder.id, {
            id: folder.id,
            name: folder.name,
            type: 'folder',
            parentId: folder.parentId,
            children: [],
            sortOrder: folder.sortOrder,
            createdBy: folder.createdBy,
            createdAt: folder.createdAt,
            updatedAt: folder.updatedAt
        });
    });
    // 트리 구조 생성
    folders.forEach(folder => {
        const folderTree = folderMap.get(folder.id);
        if (folder.parentId) {
            const parent = folderMap.get(folder.parentId);
            if (parent) {
                parent.children.push(folderTree);
            }
        }
        else {
            rootFolders.push(folderTree);
        }
    });
    return rootFolders;
}
async function isDescendant(parentId, childId) {
    const child = await (0, folderRepository_1.getFolderById)(childId);
    if (!child || !child.parentId) {
        return false;
    }
    if (child.parentId === parentId) {
        return true;
    }
    return await isDescendant(parentId, child.parentId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9mb2xkZXJzL3NlcnZpY2VzL2ZvbGRlclNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7QUFXQSxvQ0FFQztBQUVELHNDQUVDO0FBRUQsb0NBRUM7QUFFRCxvQ0FFQztBQUVELGtDQUVDO0FBRUQsc0NBR0M7QUFFRCxnQ0FzQkM7QUFFRCxrREFRQztBQUVELDRDQW1CQztBQUVELG9EQXlDQztBQXBJRCx1RUFRMEM7QUFHbkMsS0FBSyxVQUFVLFlBQVksQ0FBQyxVQUErQjtJQUM5RCxPQUFPLE1BQU0sSUFBQSwrQkFBZ0IsRUFBQyxVQUFVLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRU0sS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUFVO0lBQzFDLE9BQU8sTUFBTSxJQUFBLGdDQUFpQixFQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQVUsRUFBRSxVQUErQjtJQUMxRSxPQUFPLE1BQU0sSUFBQSwrQkFBZ0IsRUFBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVNLEtBQUssVUFBVSxZQUFZLENBQUMsRUFBVTtJQUN6QyxPQUFPLE1BQU0sSUFBQSwrQkFBZ0IsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRU0sS0FBSyxVQUFVLFdBQVc7SUFDN0IsT0FBTyxNQUFNLElBQUEsOEJBQWUsR0FBRSxDQUFDO0FBQ25DLENBQUM7QUFFTSxLQUFLLFVBQVUsYUFBYTtJQUMvQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsOEJBQWUsR0FBRSxDQUFDO0lBQ3hDLE9BQU8sZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUFDLFFBQWdCLEVBQUUsUUFBMkI7SUFDMUUsV0FBVztJQUNYLElBQUksUUFBUSxLQUFLLFFBQVEsQ0FBQyxjQUFjLEVBQUUs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QUMsQ0FBQztJQUVILFdBQVc7SUFDWCxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxDQUFDO1FBRTdDLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLElBQUksTUFBTSxFQUFFLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLFFBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEMsQ0FBQztRQUNMLENBQUM7YUFBTSxDQUFDO1lBQ0osV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFdBQVcsQ0FBQztBQUN2QixDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxRQUFnQixFQUFFLE9BQWU7SUFDekQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLGdDQUFpQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxNQUFNLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9mb2xkZXJzL3NlcnZpY2VzL2ZvbGRlclNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgXG4gICAgY3JlYXRlRm9sZGVyIGFzIGNyZWF0ZUZvbGRlclJlcG8sIFxuICAgIGdldEZvbGRlckJ5SWQgYXMgZ2V0Rm9sZGVyQnlJZFJlcG8sXG4gICAgdXBkYXRlRm9sZGVyIGFzIHVwZGF0ZUZvbGRlclJlcG8sXG4gICAgZGVsZXRlRm9sZGVyIGFzIGRlbGV0ZUZvbGRlclJlcG8sXG4gICAgbGlzdEZvbGRlcnMgYXMgbGlzdEZvbGRlcnNSZXBvLFxuICAgIGdldEZvbGRlcnNCeVBhcmVudElkIGFzIGdldEZvbGRlcnNCeVBhcmVudElkUmVwbyxcbiAgICBhZGRUZXN0Q2FzZVRvRm9sZGVyIGFzIGFkZFRlc3RDYXNlVG9Gb2xkZXJSZXBvXG59IGZyb20gJy4uL3JlcG9zaXRvcmllcy9mb2xkZXJSZXBvc2l0b3J5JztcbmltcG9ydCB7IEZvbGRlciwgQ3JlYXRlRm9sZGVyUmVxdWVzdCwgVXBkYXRlRm9sZGVyUmVxdWVzdCwgTW92ZUZvbGRlclJlcXVlc3QsIEZvbGRlclRyZWUgfSBmcm9tICcuLi9tb2RlbHMvRm9sZGVyJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUZvbGRlcihmb2xkZXJEYXRhOiBDcmVhdGVGb2xkZXJSZXF1ZXN0KTogUHJvbWlzZTxGb2xkZXI+IHtcbiAgICByZXR1cm4gYXdhaXQgY3JlYXRlRm9sZGVyUmVwbyhmb2xkZXJEYXRhKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZvbGRlckJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8Rm9sZGVyIHwgbnVsbD4ge1xuICAgIHJldHVybiBhd2FpdCBnZXRGb2xkZXJCeUlkUmVwbyhpZCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVGb2xkZXIoaWQ6IG51bWJlciwgZm9sZGVyRGF0YTogVXBkYXRlRm9sZGVyUmVxdWVzdCk6IFByb21pc2U8Rm9sZGVyIHwgbnVsbD4ge1xuICAgIHJldHVybiBhd2FpdCB1cGRhdGVGb2xkZXJSZXBvKGlkLCBmb2xkZXJEYXRhKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUZvbGRlcihpZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIGF3YWl0IGRlbGV0ZUZvbGRlclJlcG8oaWQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlzdEZvbGRlcnMoKTogUHJvbWlzZTxGb2xkZXJbXT4ge1xuICAgIHJldHVybiBhd2FpdCBsaXN0Rm9sZGVyc1JlcG8oKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZvbGRlclRyZWUoKTogUHJvbWlzZTxGb2xkZXJUcmVlW10+IHtcbiAgICBjb25zdCBmb2xkZXJzID0gYXdhaXQgbGlzdEZvbGRlcnNSZXBvKCk7XG4gICAgcmV0dXJuIGJ1aWxkRm9sZGVyVHJlZShmb2xkZXJzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1vdmVGb2xkZXIoZm9sZGVySWQ6IG51bWJlciwgbW92ZURhdGE6IE1vdmVGb2xkZXJSZXF1ZXN0KTogUHJvbWlzZTxGb2xkZXIgfCBudWxsPiB7XG4gICAgLy8g7Iic7ZmYIOywuOyhsCDrsKnsp4BcbiAgICBpZiAoZm9sZGVySWQgPT09IG1vdmVEYXRhLnRhcmdldFBhcmVudElkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign7J6Q6riwIOyekOyLoOydhCDrtoDrqqjroZwg7ISk7KCV7ZWgIOyImCDsl4bsirXri4jri6QuJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIOuMgOyDgSDtj7TrjZTqsIAg7ZiE7J6sIO2PtOuNlOydmCDtlZjsnIQg7Y+0642U7J247KeAIO2ZleyduFxuICAgIGlmIChtb3ZlRGF0YS50YXJnZXRQYXJlbnRJZCkge1xuICAgICAgICBjb25zdCB0YXJnZXRGb2xkZXIgPSBhd2FpdCBnZXRGb2xkZXJCeUlkUmVwbyhtb3ZlRGF0YS50YXJnZXRQYXJlbnRJZCk7XG4gICAgICAgIGlmICghdGFyZ2V0Rm9sZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+uMgOyDgSDtj7TrjZTrpbwg7LC+7J2EIOyImCDsl4bsirXri4jri6QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChhd2FpdCBpc0Rlc2NlbmRhbnQoZm9sZGVySWQsIG1vdmVEYXRhLnRhcmdldFBhcmVudElkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCftlZjsnIQg7Y+0642U66W8IOu2gOuqqOuhnCDshKTsoJXtlaAg7IiYIOyXhuyKteuLiOuLpC4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYXdhaXQgdXBkYXRlRm9sZGVyUmVwbyhmb2xkZXJJZCwge1xuICAgICAgICBwYXJlbnRJZDogbW92ZURhdGEudGFyZ2V0UGFyZW50SWQsXG4gICAgICAgIHVwZGF0ZWRCeTogbW92ZURhdGEudXBkYXRlZEJ5XG4gICAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRUZXN0Q2FzZVRvRm9sZGVyKHRlc3RDYXNlSWQ6IG51bWJlciwgZm9sZGVySWQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIC8vIO2PtOuNlCDsobTsnqwg7ZmV7J24XG4gICAgY29uc3QgZm9sZGVyID0gYXdhaXQgZ2V0Rm9sZGVyQnlJZFJlcG8oZm9sZGVySWQpO1xuICAgIGlmICghZm9sZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign7Y+0642U66W8IOywvuydhCDsiJgg7JeG7Iq164uI64ukLicpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYXdhaXQgYWRkVGVzdENhc2VUb0ZvbGRlclJlcG8odGVzdENhc2VJZCwgZm9sZGVySWQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVEcm9wWm9uZShkcmFnZ2VkTm9kZUlkOiBudW1iZXIsIHRhcmdldE5vZGVJZDogbnVtYmVyLCBkcm9wWm9uZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8g6rCZ7J2AIOuFuOuTnOuhnCDrk5zroa3tlZjripQg6rK97JqwXG4gICAgaWYgKGRyYWdnZWROb2RlSWQgPT09IHRhcmdldE5vZGVJZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8vIO2PtOuNlOulvCDtj7TrjZTsl5Ag65Oc66Gt7ZWY64qUIOqyveyasFxuICAgIGNvbnN0IGRyYWdnZWRGb2xkZXIgPSBhd2FpdCBnZXRGb2xkZXJCeUlkUmVwbyhkcmFnZ2VkTm9kZUlkKTtcbiAgICBjb25zdCB0YXJnZXRGb2xkZXIgPSBhd2FpdCBnZXRGb2xkZXJCeUlkUmVwbyh0YXJnZXROb2RlSWQpO1xuICAgIFxuICAgIGlmIChkcmFnZ2VkRm9sZGVyICYmIHRhcmdldEZvbGRlcikge1xuICAgICAgICAvLyDsiJztmZgg7LC47KGwIOuwqeyngFxuICAgICAgICBpZiAoZHJvcFpvbmUgPT09ICdpbnNpZGUnICYmIGF3YWl0IGlzRGVzY2VuZGFudChkcmFnZ2VkTm9kZUlkLCB0YXJnZXROb2RlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRm9sZGVyRHJhZ0Ryb3AoZHJhZ0Ryb3BSZXF1ZXN0OiB7XG4gICAgZHJhZ2dlZE5vZGVJZDogbnVtYmVyO1xuICAgIHRhcmdldE5vZGVJZDogbnVtYmVyO1xuICAgIGRyb3BUeXBlOiAnYmVmb3JlJyB8ICdhZnRlcicgfCAnaW5zaWRlJztcbiAgICBwb3NpdGlvbj86IG51bWJlcjtcbn0pOiBQcm9taXNlPEZvbGRlciB8IG51bGw+IHtcbiAgICBjb25zdCB7IGRyYWdnZWROb2RlSWQsIHRhcmdldE5vZGVJZCwgZHJvcFR5cGUgfSA9IGRyYWdEcm9wUmVxdWVzdDtcbiAgICBcbiAgICAvLyDsnKDtmqjshLEg6rKA7IKsXG4gICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IHZhbGlkYXRlRHJvcFpvbmUoZHJhZ2dlZE5vZGVJZCwgdGFyZ2V0Tm9kZUlkLCBkcm9wVHlwZSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign7Jyg7Zqo7ZWY7KeAIOyViuydgCDrk5zroa0g7JiB7Jet7J6F64uI64ukLicpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBkcmFnZ2VkRm9sZGVyID0gYXdhaXQgZ2V0Rm9sZGVyQnlJZFJlcG8oZHJhZ2dlZE5vZGVJZCk7XG4gICAgY29uc3QgdGFyZ2V0Rm9sZGVyID0gYXdhaXQgZ2V0Rm9sZGVyQnlJZFJlcG8odGFyZ2V0Tm9kZUlkKTtcbiAgICBcbiAgICBpZiAoIWRyYWdnZWRGb2xkZXIgfHwgIXRhcmdldEZvbGRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+2PtOuNlOulvCDssL7snYQg7IiYIOyXhuyKteuLiOuLpC4nKTtcbiAgICB9XG4gICAgXG4gICAgbGV0IG5ld1BhcmVudElkOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgbGV0IG5ld1NvcnRPcmRlcjogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIFxuICAgIHN3aXRjaCAoZHJvcFR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW5zaWRlJzpcbiAgICAgICAgICAgIG5ld1BhcmVudElkID0gdGFyZ2V0Tm9kZUlkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JlZm9yZSc6XG4gICAgICAgIGNhc2UgJ2FmdGVyJzpcbiAgICAgICAgICAgIG5ld1BhcmVudElkID0gdGFyZ2V0Rm9sZGVyLnBhcmVudElkO1xuICAgICAgICAgICAgLy8g7KCV66CsIOyInOyEnCDsobDsoJUg66Gc7KeBICjsi6TsoJzroZzripQg642UIOuzteyeoe2VnCDroZzsp4Eg7ZWE7JqUKVxuICAgICAgICAgICAgbmV3U29ydE9yZGVyID0gZHJvcFR5cGUgPT09ICdiZWZvcmUnID8gdGFyZ2V0Rm9sZGVyLnNvcnRPcmRlciEgLSAxIDogdGFyZ2V0Rm9sZGVyLnNvcnRPcmRlciEgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBhd2FpdCB1cGRhdGVGb2xkZXJSZXBvKGRyYWdnZWROb2RlSWQsIHtcbiAgICAgICAgcGFyZW50SWQ6IG5ld1BhcmVudElkLFxuICAgICAgICBzb3J0T3JkZXI6IG5ld1NvcnRPcmRlcixcbiAgICAgICAgdXBkYXRlZEJ5OiAnc3lzdGVtJ1xuICAgIH0pO1xufVxuXG4vLyDtl6ztjbwg7ZWo7IiY65OkXG5mdW5jdGlvbiBidWlsZEZvbGRlclRyZWUoZm9sZGVyczogRm9sZGVyW10pOiBGb2xkZXJUcmVlW10ge1xuICAgIGNvbnN0IGZvbGRlck1hcCA9IG5ldyBNYXA8bnVtYmVyLCBGb2xkZXJUcmVlPigpO1xuICAgIGNvbnN0IHJvb3RGb2xkZXJzOiBGb2xkZXJUcmVlW10gPSBbXTtcbiAgICBcbiAgICAvLyDrqqjrk6Ag7Y+0642U66W8IOunteyXkCDstpTqsIBcbiAgICBmb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcbiAgICAgICAgZm9sZGVyTWFwLnNldChmb2xkZXIuaWQsIHtcbiAgICAgICAgICAgIGlkOiBmb2xkZXIuaWQsXG4gICAgICAgICAgICBuYW1lOiBmb2xkZXIubmFtZSxcbiAgICAgICAgICAgIHR5cGU6ICdmb2xkZXInLFxuICAgICAgICAgICAgcGFyZW50SWQ6IGZvbGRlci5wYXJlbnRJZCxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIHNvcnRPcmRlcjogZm9sZGVyLnNvcnRPcmRlcixcbiAgICAgICAgICAgIGNyZWF0ZWRCeTogZm9sZGVyLmNyZWF0ZWRCeSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogZm9sZGVyLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogZm9sZGVyLnVwZGF0ZWRBdFxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyDtirjrpqwg6rWs7KGwIOyDneyEsVxuICAgIGZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xuICAgICAgICBjb25zdCBmb2xkZXJUcmVlID0gZm9sZGVyTWFwLmdldChmb2xkZXIuaWQpITtcbiAgICAgICAgXG4gICAgICAgIGlmIChmb2xkZXIucGFyZW50SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGZvbGRlck1hcC5nZXQoZm9sZGVyLnBhcmVudElkKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4hLnB1c2goZm9sZGVyVHJlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290Rm9sZGVycy5wdXNoKGZvbGRlclRyZWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHJvb3RGb2xkZXJzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQocGFyZW50SWQ6IG51bWJlciwgY2hpbGRJZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgY2hpbGQgPSBhd2FpdCBnZXRGb2xkZXJCeUlkUmVwbyhjaGlsZElkKTtcbiAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5wYXJlbnRJZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIGlmIChjaGlsZC5wYXJlbnRJZCA9PT0gcGFyZW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBhd2FpdCBpc0Rlc2NlbmRhbnQocGFyZW50SWQsIGNoaWxkLnBhcmVudElkKTtcbn0gIl0sInZlcnNpb24iOjN9