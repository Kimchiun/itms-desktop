{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts"],"sourcesContent":["import { \n    createFolder as createFolderRepo, \n    getFolderById as getFolderByIdRepo,\n    updateFolder as updateFolderRepo,\n    deleteFolder as deleteFolderRepo,\n    listFolders as listFoldersRepo,\n    getFoldersByParentId as getFoldersByParentIdRepo,\n    addTestCaseToFolder as addTestCaseToFolderRepo\n} from '../repositories/folderRepository';\nimport { Folder, CreateFolderRequest, UpdateFolderRequest, MoveFolderRequest, FolderTree } from '../models/Folder';\n\nexport async function createFolder(folderData: CreateFolderRequest): Promise<Folder> {\n    return await createFolderRepo(folderData);\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n    return await getFolderByIdRepo(id);\n}\n\nexport async function updateFolder(id: number, folderData: UpdateFolderRequest): Promise<Folder | null> {\n    return await updateFolderRepo(id, folderData);\n}\n\nexport async function deleteFolder(id: number): Promise<boolean> {\n    return await deleteFolderRepo(id);\n}\n\nexport async function listFolders(): Promise<Folder[]> {\n    return await listFoldersRepo();\n}\n\nexport async function getFolderTree(): Promise<FolderTree[]> {\n    const folders = await listFoldersRepo();\n    return buildFolderTree(folders);\n}\n\nexport async function moveFolder(folderId: number, moveData: MoveFolderRequest): Promise<Folder | null> {\n    // 순환 참조 방지\n    if (folderId === moveData.targetParentId) {\n        throw new Error('자기 자신을 부모로 설정할 수 없습니다.');\n    }\n    \n    // 대상 폴더가 현재 폴더의 하위 폴더인지 확인\n    if (moveData.targetParentId) {\n        const targetFolder = await getFolderByIdRepo(moveData.targetParentId);\n        if (!targetFolder) {\n            throw new Error('대상 폴더를 찾을 수 없습니다.');\n        }\n        \n        if (await isDescendant(folderId, moveData.targetParentId)) {\n            throw new Error('하위 폴더를 부모로 설정할 수 없습니다.');\n        }\n    }\n    \n    return await updateFolderRepo(folderId, {\n        parentId: moveData.targetParentId,\n        updatedBy: moveData.updatedBy\n    });\n}\n\nexport async function addTestCaseToFolder(testCaseId: number, folderId: number): Promise<boolean> {\n    // 폴더 존재 확인\n    const folder = await getFolderByIdRepo(folderId);\n    if (!folder) {\n        throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    return await addTestCaseToFolderRepo(testCaseId, folderId);\n}\n\nexport async function validateDropZone(draggedNodeId: number, targetNodeId: number, dropZone: string): Promise<boolean> {\n    // 같은 노드로 드롭하는 경우\n    if (draggedNodeId === targetNodeId) {\n        return false;\n    }\n    \n    // 폴더를 폴더에 드롭하는 경우\n    const draggedFolder = await getFolderByIdRepo(draggedNodeId);\n    const targetFolder = await getFolderByIdRepo(targetNodeId);\n    \n    if (draggedFolder && targetFolder) {\n        // 순환 참조 방지\n        if (dropZone === 'inside' && await isDescendant(draggedNodeId, targetNodeId)) {\n            return false;\n        }\n        return true;\n    }\n    \n    return true;\n}\n\nexport async function handleFolderDragDrop(dragDropRequest: {\n    draggedNodeId: number;\n    targetNodeId: number;\n    dropType: 'before' | 'after' | 'inside';\n    position?: number;\n}): Promise<Folder | null> {\n    const { draggedNodeId, targetNodeId, dropType } = dragDropRequest;\n    \n    // 유효성 검사\n    const isValid = await validateDropZone(draggedNodeId, targetNodeId, dropType);\n    if (!isValid) {\n        throw new Error('유효하지 않은 드롭 영역입니다.');\n    }\n    \n    const draggedFolder = await getFolderByIdRepo(draggedNodeId);\n    const targetFolder = await getFolderByIdRepo(targetNodeId);\n    \n    if (!draggedFolder || !targetFolder) {\n        throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    let newParentId: number | undefined;\n    let newSortOrder: number | undefined;\n    \n    switch (dropType) {\n        case 'inside':\n            newParentId = targetNodeId;\n            break;\n        case 'before':\n        case 'after':\n            newParentId = targetFolder.parentId;\n            // 정렬 순서 조정 로직 (실제로는 더 복잡한 로직 필요)\n            newSortOrder = dropType === 'before' ? targetFolder.sortOrder! - 1 : targetFolder.sortOrder! + 1;\n            break;\n    }\n    \n    return await updateFolderRepo(draggedNodeId, {\n        parentId: newParentId,\n        sortOrder: newSortOrder,\n        updatedBy: 'system'\n    });\n}\n\n// 헬퍼 함수들\nfunction buildFolderTree(folders: Folder[]): FolderTree[] {\n    const folderMap = new Map<number, FolderTree>();\n    const rootFolders: FolderTree[] = [];\n    \n    // 모든 폴더를 맵에 추가\n    folders.forEach(folder => {\n        folderMap.set(folder.id, {\n            id: folder.id,\n            name: folder.name,\n            type: 'folder',\n            parentId: folder.parentId,\n            children: [],\n            sortOrder: folder.sortOrder,\n            createdBy: folder.createdBy,\n            createdAt: folder.createdAt,\n            updatedAt: folder.updatedAt\n        });\n    });\n    \n    // 트리 구조 생성\n    folders.forEach(folder => {\n        const folderTree = folderMap.get(folder.id)!;\n        \n        if (folder.parentId) {\n            const parent = folderMap.get(folder.parentId);\n            if (parent) {\n                parent.children!.push(folderTree);\n            }\n        } else {\n            rootFolders.push(folderTree);\n        }\n    });\n    \n    return rootFolders;\n}\n\nasync function isDescendant(parentId: number, childId: number): Promise<boolean> {\n    const child = await getFolderByIdRepo(childId);\n    if (!child || !child.parentId) {\n        return false;\n    }\n    \n    if (child.parentId === parentId) {\n        return true;\n    }\n    \n    return await isDescendant(parentId, child.parentId);\n} "],"version":3}