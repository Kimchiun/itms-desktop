766a352f789fd43ed3d5bcca96088ba9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensurePgConnected = ensurePgConnected;
exports.testPgConnection = testPgConnection;
exports.getPgClient = getPgClient;
const pg_1 = require("pg");
let pgClient = null;
let isConnected = false;
function createClient() {
    const config = {
        user: process.env.PGUSER || 'postgres',
        host: process.env.PGHOST || 'localhost',
        database: process.env.PGDATABASE || 'itms',
        password: process.env.PGPASSWORD,
        port: Number(process.env.PGPORT) || 5432,
    };
    // 비밀번호가 설정되지 않은 경우 에러 발생
    if (!config.password) {
        throw new Error('PGPASSWORD 환경 변수가 설정되지 않았습니다. env.example 파일을 참고하여 .env 파일을 생성하세요.');
    }
    return new pg_1.Client(config);
}
async function ensurePgConnected() {
    if (!isConnected) {
        if (!pgClient) {
            pgClient = createClient();
        }
        await pgClient.connect();
        isConnected = true;
    }
}
async function testPgConnection() {
    try {
        await ensurePgConnected();
        if (pgClient) {
            await pgClient.query('SELECT NOW()');
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
function getPgClient() {
    return pgClient;
}
exports.default = pgClient;
// users 테이블 생성 예시
// CREATE TABLE users (
//   id SERIAL PRIMARY KEY,
//   username VARCHAR(64) UNIQUE NOT NULL,
//   password VARCHAR(128) NOT NULL,
//   role VARCHAR(16) NOT NULL,
//   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// ); 
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvcGdDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7QUFzQkEsOENBUUM7QUFFRCw0Q0FVQztBQUVELGtDQUVDO0FBOUNELDJCQUE0QjtBQUU1QixJQUFJLFFBQVEsR0FBa0IsSUFBSSxDQUFDO0FBQ25DLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztBQUV4QixTQUFTLFlBQVk7SUFDakIsTUFBTSxNQUFNLEdBQUc7UUFDWCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksVUFBVTtRQUN0QyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksV0FBVztRQUN2QyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksTUFBTTtRQUMxQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO1FBQ2hDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJO0tBQzNDLENBQUM7SUFFRix5QkFBeUI7SUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVELE9BQU8sSUFBSSxXQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVNLEtBQUssVUFBVSxpQkFBaUI7SUFDbkMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ1osUUFBUSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQzlCLENBQUM7UUFDRCxNQUFNLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QixXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7QUFDTCxDQUFDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQjtJQUNsQyxJQUFJLENBQUM7UUFDRCxNQUFNLGlCQUFpQixFQUFFLENBQUM7UUFDMUIsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNYLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDWCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQWdCLFdBQVc7SUFDdkIsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUVELGtCQUFlLFFBQVEsQ0FBQztBQUV4QixrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLDJCQUEyQjtBQUMzQiwwQ0FBMEM7QUFDMUMsb0NBQW9DO0FBQ3BDLCtCQUErQjtBQUMvQixtREFBbUQ7QUFDbkQsTUFBTSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9wZ0NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tICdwZyc7XG5cbmxldCBwZ0NsaWVudDogQ2xpZW50IHwgbnVsbCA9IG51bGw7XG5sZXQgaXNDb25uZWN0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuUEdVU0VSIHx8ICdwb3N0Z3JlcycsXG4gICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LlBHSE9TVCB8fCAnbG9jYWxob3N0JyxcbiAgICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LlBHREFUQUJBU0UgfHwgJ2l0bXMnLFxuICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUEdQQVNTV09SRCxcbiAgICAgICAgcG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LlBHUE9SVCkgfHwgNTQzMixcbiAgICB9O1xuXG4gICAgLy8g67mE67CA67KI7Zi46rCAIOyEpOygleuQmOyngCDslYrsnYAg6rK97JqwIOyXkOufrCDrsJzsg51cbiAgICBpZiAoIWNvbmZpZy5wYXNzd29yZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BHUEFTU1dPUkQg7ZmY6rK9IOuzgOyImOqwgCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukLiBlbnYuZXhhbXBsZSDtjIzsnbzsnYQg7LC46rOg7ZWY7JesIC5lbnYg7YyM7J287J2EIOyDneyEse2VmOyEuOyalC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENsaWVudChjb25maWcpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5zdXJlUGdDb25uZWN0ZWQoKSB7XG4gICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgICBpZiAoIXBnQ2xpZW50KSB7XG4gICAgICAgICAgICBwZ0NsaWVudCA9IGNyZWF0ZUNsaWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHBnQ2xpZW50LmNvbm5lY3QoKTtcbiAgICAgICAgaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRlc3RQZ0Nvbm5lY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZW5zdXJlUGdDb25uZWN0ZWQoKTtcbiAgICAgICAgaWYgKHBnQ2xpZW50KSB7XG4gICAgICAgICAgICBhd2FpdCBwZ0NsaWVudC5xdWVyeSgnU0VMRUNUIE5PVygpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZ0NsaWVudCgpIHtcbiAgICByZXR1cm4gcGdDbGllbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBnQ2xpZW50O1xuXG4vLyB1c2VycyDthYzsnbTruJQg7IOd7ISxIOyYiOyLnFxuLy8gQ1JFQVRFIFRBQkxFIHVzZXJzIChcbi8vICAgaWQgU0VSSUFMIFBSSU1BUlkgS0VZLFxuLy8gICB1c2VybmFtZSBWQVJDSEFSKDY0KSBVTklRVUUgTk9UIE5VTEwsXG4vLyAgIHBhc3N3b3JkIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcbi8vICAgcm9sZSBWQVJDSEFSKDE2KSBOT1QgTlVMTCxcbi8vICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUFxuLy8gKTsgIl0sInZlcnNpb24iOjN9