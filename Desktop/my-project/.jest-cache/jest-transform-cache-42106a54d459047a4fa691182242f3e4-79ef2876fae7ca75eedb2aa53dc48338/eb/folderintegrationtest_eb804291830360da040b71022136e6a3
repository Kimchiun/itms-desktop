37b7b2b74b2f17068db51eaeee03140d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../src/main/app/app"));
const initDatabase_1 = require("../src/main/app/infrastructure/database/initDatabase");
const pgClient_1 = require("../src/main/app/infrastructure/database/pgClient");
(0, globals_1.describe)('폴더 드래그 앤 드롭 통합 테스트', () => {
    (0, globals_1.beforeAll)(async () => {
        await (0, initDatabase_1.initializeDatabase)();
    });
    (0, globals_1.beforeEach)(async () => {
        // 테스트 데이터 초기화
        const client = (0, pgClient_1.getPgClient)();
        if (client) {
            await client.query('DELETE FROM folders WHERE id > 1');
            await client.query(`
        INSERT INTO folders (id, name, parent_id, created_by, sort_order) VALUES 
        (2, '개발', 1, 'test', 1),
        (3, '기획', 1, 'test', 2),
        (4, '프론트엔드', 2, 'test', 1),
        (5, '백엔드', 2, 'test', 2)
      `);
        }
    });
    (0, globals_1.describe)('POST /api/folders/dragdrop', () => {
        (0, globals_1.it)('폴더 순서 변경을 성공적으로 처리해야 함', async () => {
            // Arrange
            const dragDropData = {
                draggedFolderId: 3,
                dropZone: {
                    type: 'REORDER',
                    targetId: 2,
                    position: 'after'
                }
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send(dragDropData)
                .expect(200);
            // Assert
            (0, globals_1.expect)(response.body.success).toBe(true);
            (0, globals_1.expect)(response.body.message).toContain('폴더 순서가 변경되었습니다');
        });
        (0, globals_1.it)('폴더 계층 변경을 성공적으로 처리해야 함', async () => {
            // Arrange
            const dragDropData = {
                draggedFolderId: 4,
                dropZone: {
                    type: 'HIERARCHY',
                    targetId: 3
                }
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send(dragDropData)
                .expect(200);
            // Assert
            (0, globals_1.expect)(response.body.success).toBe(true);
            (0, globals_1.expect)(response.body.message).toContain('폴더가 이동되었습니다');
        });
        (0, globals_1.it)('순환 참조가 있는 드롭을 거부해야 함', async () => {
            // Arrange - 폴더 2를 폴더 4의 하위로 이동
            await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send({
                draggedFolderId: 2,
                dropZone: {
                    type: 'HIERARCHY',
                    targetId: 4
                }
            });
            // Act - 폴더 4를 폴더 2의 하위로 이동 (순환 참조)
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send({
                draggedFolderId: 4,
                dropZone: {
                    type: 'HIERARCHY',
                    targetId: 2
                }
            })
                .expect(400);
            // Assert
            (0, globals_1.expect)(response.body.success).toBe(false);
            (0, globals_1.expect)(response.body.message).toContain('순환 참조가 감지되었습니다');
        });
        (0, globals_1.it)('존재하지 않는 폴더를 드래그하면 실패해야 함', async () => {
            // Arrange
            const dragDropData = {
                draggedFolderId: 999,
                dropZone: {
                    type: 'REORDER',
                    targetId: 2,
                    position: 'after'
                }
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send(dragDropData)
                .expect(400);
            // Assert
            (0, globals_1.expect)(response.body.success).toBe(false);
            (0, globals_1.expect)(response.body.message).toContain('폴더를 찾을 수 없습니다');
        });
        (0, globals_1.it)('필수 파라미터가 누락되면 실패해야 함', async () => {
            // Arrange
            const invalidData = {
                draggedFolderId: 1
                // dropZone 누락
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders/dragdrop')
                .send(invalidData)
                .expect(400);
            // Assert
            (0, globals_1.expect)(response.body.message).toContain('필수 파라미터가 누락되었습니다');
        });
    });
    (0, globals_1.describe)('GET /api/folders/tree', () => {
        (0, globals_1.it)('폴더 트리를 올바른 계층 구조로 반환해야 함', async () => {
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .get('/api/folders/tree')
                .expect(200);
            // Assert
            (0, globals_1.expect)(response.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            // 루트 폴더 확인
            const rootFolder = response.body.find((folder) => folder.id === 1);
            (0, globals_1.expect)(rootFolder).toBeDefined();
            (0, globals_1.expect)(rootFolder.children).toBeInstanceOf(Array);
            // 하위 폴더 확인
            const devFolder = rootFolder.children.find((folder) => folder.name === '개발');
            (0, globals_1.expect)(devFolder).toBeDefined();
            (0, globals_1.expect)(devFolder.children).toBeInstanceOf(Array);
        });
    });
    (0, globals_1.describe)('폴더 CRUD 작업', () => {
        (0, globals_1.it)('새 폴더를 성공적으로 생성해야 함', async () => {
            // Arrange
            const newFolder = {
                name: '테스트 폴더',
                description: '테스트용 폴더입니다',
                parentId: 1,
                createdBy: 'test'
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .post('/api/folders')
                .send(newFolder)
                .expect(201);
            // Assert
            (0, globals_1.expect)(response.body.name).toBe(newFolder.name);
            (0, globals_1.expect)(response.body.description).toBe(newFolder.description);
            (0, globals_1.expect)(response.body.parentId).toBe(newFolder.parentId);
        });
        (0, globals_1.it)('폴더를 성공적으로 수정해야 함', async () => {
            // Arrange
            const updateData = {
                name: '수정된 폴더',
                description: '수정된 설명',
                updatedBy: 'test'
            };
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .put('/api/folders/2')
                .send(updateData)
                .expect(200);
            // Assert
            (0, globals_1.expect)(response.body.name).toBe(updateData.name);
            (0, globals_1.expect)(response.body.description).toBe(updateData.description);
        });
        (0, globals_1.it)('폴더를 성공적으로 삭제해야 함', async () => {
            // Act
            const response = await (0, supertest_1.default)(app_1.default)
                .delete('/api/folders/5')
                .expect(200);
            // Assert
            (0, globals_1.expect)(response.body.message).toContain('폴더가 삭제되었습니다');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9mb2xkZXItaW50ZWdyYXRpb24udGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUFzRjtBQUN0RiwwREFBZ0M7QUFDaEMsOERBQXNDO0FBQ3RDLHVGQUEwRjtBQUMxRiwrRUFBK0U7QUFFL0UsSUFBQSxrQkFBUSxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFBLG1CQUFTLEVBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLGlDQUFrQixHQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLG9CQUFVLEVBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsY0FBYztRQUNkLE1BQU0sTUFBTSxHQUFHLElBQUEsc0JBQVcsR0FBRSxDQUFDO1FBQzdCLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztZQUN2RCxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7OztPQU1sQixDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1FBQzFDLElBQUEsWUFBRSxFQUFDLHdCQUF3QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RDLFVBQVU7WUFDVixNQUFNLFlBQVksR0FBRztnQkFDbkIsZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLFFBQVEsRUFBRTtvQkFDUixJQUFJLEVBQUUsU0FBUztvQkFDZixRQUFRLEVBQUUsQ0FBQztvQkFDWCxRQUFRLEVBQUUsT0FBTztpQkFDbEI7YUFDRixDQUFDO1lBRUYsTUFBTTtZQUNOLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLGFBQUcsQ0FBQztpQkFDaEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO2lCQUM3QixJQUFJLENBQUMsWUFBWSxDQUFD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SyxJQUFJLEVBQUU7WUFDaEMsTUFBTTtZQUNOLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLGFBQUcsQ0FBQztpQkFDaEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO2lCQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixTQUFTO1lBQ1QsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3Rlc3RzL2ZvbGRlci1pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsLCBiZWZvcmVFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IGFwcCBmcm9tICcuLi9zcmMvbWFpbi9hcHAvYXBwJztcbmltcG9ydCB7IGluaXRpYWxpemVEYXRhYmFzZSB9IGZyb20gJy4uL3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9pbml0RGF0YWJhc2UnO1xuaW1wb3J0IHsgZ2V0UGdDbGllbnQgfSBmcm9tICcuLi9zcmMvbWFpbi9hcHAvaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvcGdDbGllbnQnO1xuXG5kZXNjcmliZSgn7Y+0642UIOuTnOuemOq3uCDslaQg65Oc66GtIO2Gte2VqSDthYzsiqTtirgnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgaW5pdGlhbGl6ZURhdGFiYXNlKCk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIO2FjOyKpO2KuCDrjbDsnbTthLAg7LSI6riw7ZmUXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGdDbGllbnQoKTtcbiAgICBpZiAoY2xpZW50KSB7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0RFTEVURSBGUk9NIGZvbGRlcnMgV0hFUkUgaWQgPiAxJyk7XG4gICAgICBhd2FpdCBjbGllbnQucXVlcnkoYFxuICAgICAgICBJTlNFUlQgSU5UTyBmb2xkZXJzIChpZCwgbmFtZSwgcGFyZW50X2lkLCBjcmVhdGVkX2J5LCBzb3J0X29yZGVyKSBWQUxVRVMgXG4gICAgICAgICgyLCAn6rCc67CcJywgMSwgJ3Rlc3QnLCAxKSxcbiAgICAgICAgKDMsICfquLDtmo0nLCAxLCAndGVzdCcsIDIpLFxuICAgICAgICAoNCwgJ+2UhOuhoO2KuOyXlOuTnCcsIDIsICd0ZXN0JywgMSksXG4gICAgICAgICg1LCAn67Cx7JeU65OcJywgMiwgJ3Rlc3QnLCAyKVxuICAgICAgYCk7XG4gICAgfVxuICB9KTtcblxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnLCAoKSA9PiB7XG4gICAgaXQoJ+2PtOuNlCDsiJzshJwg67OA6rK97J2EIOyEseqzteyggeycvOuhnCDsspjrpqztlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgZHJhZ0Ryb3BEYXRhID0ge1xuICAgICAgICBkcmFnZ2VkRm9sZGVySWQ6IDMsXG4gICAgICAgIGRyb3Bab25lOiB7XG4gICAgICAgICAgdHlwZTogJ1JFT1JERVInLFxuICAgICAgICAgIHRhcmdldElkOiAyLFxuICAgICAgICAgIHBvc2l0aW9uOiAnYWZ0ZXInXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvZm9sZGVycy9kcmFnZHJvcCcpXG4gICAgICAgIC5zZW5kKGRyYWdEcm9wRGF0YSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0NvbnRhaW4oJ+2PtOuNlCDsiJzshJzqsIAg67OA6rK965CY7JeI7Iq164uI64ukJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn7Y+0642UIOqzhOy4tSDrs4Dqsr3snYQg7ISx6rO17KCB7Jy866GcIOyymOumrO2VtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBkcmFnRHJvcERhdGEgPSB7XG4gICAgICAgIGRyYWdnZWRGb2xkZXJJZDogNCxcbiAgICAgICAgZHJvcFpvbmU6IHtcbiAgICAgICAgICB0eXBlOiAnSElFUkFSQ0hZJyxcbiAgICAgICAgICB0YXJnZXRJZDogM1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnKVxuICAgICAgICAuc2VuZChkcmFnRHJvcERhdGEpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCftj7TrjZTqsIAg7J2064+Z65CY7JeI7Iq164uI64ukJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn7Iic7ZmYIOywuOyhsOqwgCDsnojripQg65Oc66Gt7J2EIOqxsOu2gO2VtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlIC0g7Y+0642UIDLrpbwg7Y+0642UIDTsnZgg7ZWY7JyE66GcIOydtOuPmVxuICAgICAgYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZHJhZ2dlZEZvbGRlcklkOiAyLFxuICAgICAgICAgIGRyb3Bab25lOiB7XG4gICAgICAgICAgICB0eXBlOiAnSElFUkFSQ0hZJyxcbiAgICAgICAgICAgIHRhcmdldElkOiA0XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgLy8gQWN0IC0g7Y+0642UIDTrpbwg7Y+0642UIDLsnZgg7ZWY7JyE66GcIOydtOuPmSAo7Iic7ZmYIOywuOyhsClcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgZHJhZ2dlZEZvbGRlcklkOiA0LFxuICAgICAgICAgIGRyb3Bab25lOiB7XG4gICAgICAgICAgICB0eXBlOiAnSElFUkFSQ0hZJyxcbiAgICAgICAgICAgIHRhcmdldElkOiAyXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0NvbnRhaW4oJ+yInO2ZmCDssLjsobDqsIAg6rCQ7KeA65CY7JeI7Iq164uI64ukJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn7KG07J6s7ZWY7KeAIOyViuuKlCDtj7TrjZTrpbwg65Oc656Y6re47ZWY66m0IOyLpO2MqO2VtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBkcmFnRHJvcERhdGEgPSB7XG4gICAgICAgIGRyYWdnZWRGb2xkZXJJZDogOTk5LFxuICAgICAgICBkcm9wWm9uZToge1xuICAgICAgICAgIHR5cGU6ICdSRU9SREVSJyxcbiAgICAgICAgICB0YXJnZXRJZDogMixcbiAgICAgICAgICBwb3NpdGlvbjogJ2FmdGVyJ1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnKVxuICAgICAgICAuc2VuZChkcmFnRHJvcERhdGEpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbign7Y+0642U66W8IOywvuydhCDsiJgg7JeG7Iq164uI64ukJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn7ZWE7IiYIO2MjOudvOuvuO2EsOqwgCDriITrnb3rkJjrqbQg7Iuk7Yyo7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGludmFsaWREYXRhID0ge1xuICAgICAgICBkcmFnZ2VkRm9sZGVySWQ6IDFcbiAgICAgICAgLy8gZHJvcFpvbmUg64iE6529XG4gICAgICB9O1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL2ZvbGRlcnMvZHJhZ2Ryb3AnKVxuICAgICAgICAuc2VuZChpbnZhbGlkRGF0YSlcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbign7ZWE7IiYIO2MjOudvOuvuO2EsOqwgCDriITrnb3rkJjsl4jsirXri4jri6QnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2ZvbGRlcnMvdHJlZScsICgpID0+IHtcbiAgICBpdCgn7Y+0642UIO2KuOumrOulvCDsmKzrsJTrpbgg6rOE7Li1IOq1rOyhsOuhnCDrsJjtmZjtlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAuZ2V0KCcvYXBpL2ZvbGRlcnMvdHJlZScpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBcbiAgICAgIC8vIOujqO2KuCDtj7TrjZQg7ZmV7J24XG4gICAgICBjb25zdCByb290Rm9sZGVyID0gcmVzcG9uc2UuYm9keS5maW5kKChmb2xkZXI6IGFueSkgPT4gZm9sZGVyLmlkID09PSAxKTtcbiAgICAgIGV4cGVjdChyb290Rm9sZGVyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJvb3RGb2xkZXIuY2hpbGRyZW4pLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIFxuICAgICAgLy8g7ZWY7JyEIO2PtOuNlCDtmZXsnbhcbiAgICAgIGNvbnN0IGRldkZvbGRlciA9IHJvb3RGb2xkZXIuY2hpbGRyZW4uZmluZCgoZm9sZGVyOiBhbnkpID0+IGZvbGRlci5uYW1lID09PSAn6rCc67CcJyk7XG4gICAgICBleHBlY3QoZGV2Rm9sZGVyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRldkZvbGRlci5jaGlsZHJlbikudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn7Y+0642UIENSVUQg7J6R7JeFJywgKCkgPT4ge1xuICAgIGl0KCfsg4gg7Y+0642U66W8IOyEseqzteyggeycvOuhnCDsg53shLHtlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbmV3Rm9sZGVyID0ge1xuICAgICAgICBuYW1lOiAn7YWM7Iqk7Yq4IO2PtOuNlCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAn7YWM7Iqk7Yq47JqpIO2PtOuNlOyeheuLiOuLpCcsXG4gICAgICAgIHBhcmVudElkOiAxLFxuICAgICAgICBjcmVhdGVkQnk6ICd0ZXN0J1xuICAgICAgfTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9mb2xkZXJzJylcbiAgICAgICAgLnNlbmQobmV3Rm9sZGVyKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubmFtZSkudG9CZShuZXdGb2xkZXIubmFtZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kZXNjcmlwdGlvbikudG9CZShuZXdGb2xkZXIuZGVzY3JpcHRpb24pO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucGFyZW50SWQpLnRvQmUobmV3Rm9sZGVyLnBhcmVudElkKTtcbiAgICB9KTtcblxuICAgIGl0KCftj7TrjZTrpbwg7ISx6rO17KCB7Jy866GcIOyImOygle2VtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCB1cGRhdGVEYXRhID0ge1xuICAgICAgICBuYW1lOiAn7IiY7KCV65CcIO2PtOuNlCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAn7IiY7KCV65CcIOyEpOuqhScsXG4gICAgICAgIHVwZGF0ZWRCeTogJ3Rlc3QnXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wdXQoJy9hcGkvZm9sZGVycy8yJylcbiAgICAgICAgLnNlbmQodXBkYXRlRGF0YSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm5hbWUpLnRvQmUodXBkYXRlRGF0YS5uYW1lKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRlc2NyaXB0aW9uKS50b0JlKHVwZGF0ZURhdGEuZGVzY3JpcHRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+2PtOuNlOulvCDshLHqs7XsoIHsnLzroZwg7IKt7KCc7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLmRlbGV0ZSgnL2FwaS9mb2xkZXJzLzUnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCftj7TrjZTqsIAg7IKt7KCc65CY7JeI7Iq164uI64ukJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7ICJdLCJ2ZXJzaW9uIjozfQ==