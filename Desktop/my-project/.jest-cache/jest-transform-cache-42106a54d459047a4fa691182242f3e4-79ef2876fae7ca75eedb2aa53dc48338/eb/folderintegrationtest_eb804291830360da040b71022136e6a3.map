{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-integration.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/folder-integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport request from 'supertest';\nimport app from '../src/main/app/app';\nimport { initializeDatabase } from '../src/main/app/infrastructure/database/initDatabase';\nimport { getPgClient } from '../src/main/app/infrastructure/database/pgClient';\n\ndescribe('폴더 드래그 앤 드롭 통합 테스트', () => {\n  beforeAll(async () => {\n    await initializeDatabase();\n  });\n\n  beforeEach(async () => {\n    // 테스트 데이터 초기화\n    const client = getPgClient();\n    if (client) {\n      await client.query('DELETE FROM folders WHERE id > 1');\n      await client.query(`\n        INSERT INTO folders (id, name, parent_id, created_by, sort_order) VALUES \n        (2, '개발', 1, 'test', 1),\n        (3, '기획', 1, 'test', 2),\n        (4, '프론트엔드', 2, 'test', 1),\n        (5, '백엔드', 2, 'test', 2)\n      `);\n    }\n  });\n\n  describe('POST /api/folders/dragdrop', () => {\n    it('폴더 순서 변경을 성공적으로 처리해야 함', async () => {\n      // Arrange\n      const dragDropData = {\n        draggedFolderId: 3,\n        dropZone: {\n          type: 'REORDER',\n          targetId: 2,\n          position: 'after'\n        }\n      };\n\n      // Act\n      const response = await request(app)\n        .post('/api/folders/dragdrop')\n        .send(dragDropData)\n        .expect(200);\n\n      // Assert\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('폴더 순서가 변경되었습니다');\n    });\n\n    it('폴더 계층 변경을 성공적으로 처리해야 함', async () => {\n      // Arrange\n      const dragDropData = {\n        draggedFolderId: 4,\n        dropZone: {\n          type: 'HIERARCHY',\n          targetId: 3\n        }\n      };\n\n      // Act\n      const response = await request(app)\n        .post('/api/folders/dragdrop')\n        .send(dragDropData)\n        .expect(200);\n\n      // Assert\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('폴더가 이동되었습니다');\n    });\n\n    it('순환 참조가 있는 드롭을 거부해야 함', async () => {\n      // Arrange - 폴더 2를 폴더 4의 하위로 이동\n      await request(app)\n        .post('/api/folders/dragdrop')\n        .send({\n          draggedFolderId: 2,\n          dropZone: {\n            type: 'HIERARCHY',\n            targetId: 4\n          }\n        });\n\n      // Act - 폴더 4를 폴더 2의 하위로 이동 (순환 참조)\n      const response = await request(app)\n        .post('/api/folders/dragdrop')\n        .send({\n          draggedFolderId: 4,\n          dropZone: {\n            type: 'HIERARCHY',\n            targetId: 2\n          }\n        })\n        .expect(400);\n\n      // Assert\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('순환 참조가 감지되었습니다');\n    });\n\n    it('존재하지 않는 폴더를 드래그하면 실패해야 함', async () => {\n      // Arrange\n      const dragDropData = {\n        draggedFolderId: 999,\n        dropZone: {\n          type: 'REORDER',\n          targetId: 2,\n          position: 'after'\n        }\n      };\n\n      // Act\n      const response = await request(app)\n        .post('/api/folders/dragdrop')\n        .send(dragDropData)\n        .expect(400);\n\n      // Assert\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('폴더를 찾을 수 없습니다');\n    });\n\n    it('필수 파라미터가 누락되면 실패해야 함', async () => {\n      // Arrange\n      const invalidData = {\n        draggedFolderId: 1\n        // dropZone 누락\n      };\n\n      // Act\n      const response = await request(app)\n        .post('/api/folders/dragdrop')\n        .send(invalidData)\n        .expect(400);\n\n      // Assert\n      expect(response.body.message).toContain('필수 파라미터가 누락되었습니다');\n    });\n  });\n\n  describe('GET /api/folders/tree', () => {\n    it('폴더 트리를 올바른 계층 구조로 반환해야 함', async () => {\n      // Act\n      const response = await request(app)\n        .get('/api/folders/tree')\n        .expect(200);\n\n      // Assert\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      // 루트 폴더 확인\n      const rootFolder = response.body.find((folder: any) => folder.id === 1);\n      expect(rootFolder).toBeDefined();\n      expect(rootFolder.children).toBeInstanceOf(Array);\n      \n      // 하위 폴더 확인\n      const devFolder = rootFolder.children.find((folder: any) => folder.name === '개발');\n      expect(devFolder).toBeDefined();\n      expect(devFolder.children).toBeInstanceOf(Array);\n    });\n  });\n\n  describe('폴더 CRUD 작업', () => {\n    it('새 폴더를 성공적으로 생성해야 함', async () => {\n      // Arrange\n      const newFolder = {\n        name: '테스트 폴더',\n        description: '테스트용 폴더입니다',\n        parentId: 1,\n        createdBy: 'test'\n      };\n\n      // Act\n      const response = await request(app)\n        .post('/api/folders')\n        .send(newFolder)\n        .expect(201);\n\n      // Assert\n      expect(response.body.name).toBe(newFolder.name);\n      expect(response.body.description).toBe(newFolder.description);\n      expect(response.body.parentId).toBe(newFolder.parentId);\n    });\n\n    it('폴더를 성공적으로 수정해야 함', async () => {\n      // Arrange\n      const updateData = {\n        name: '수정된 폴더',\n        description: '수정된 설명',\n        updatedBy: 'test'\n      };\n\n      // Act\n      const response = await request(app)\n        .put('/api/folders/2')\n        .send(updateData)\n        .expect(200);\n\n      // Assert\n      expect(response.body.name).toBe(updateData.name);\n      expect(response.body.description).toBe(updateData.description);\n    });\n\n    it('폴더를 성공적으로 삭제해야 함', async () => {\n      // Act\n      const response = await request(app)\n        .delete('/api/folders/5')\n        .expect(200);\n\n      // Assert\n      expect(response.body.message).toContain('폴더가 삭제되었습니다');\n    });\n  });\n}); "],"version":3}