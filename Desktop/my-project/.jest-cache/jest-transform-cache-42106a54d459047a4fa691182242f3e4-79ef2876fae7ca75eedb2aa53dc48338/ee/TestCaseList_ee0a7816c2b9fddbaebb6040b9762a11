159521a3a396ef3b9cd5a5441fa4c8b0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const styled_components_1 = __importDefault(require("styled-components"));
const axios_1 = __importDefault(require("../../../utils/axios"));
const Container = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: 16px;
`;
const Header = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
`;
const Title = styled_components_1.default.h3 `
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #1e293b;
`;
const ActionButton = styled_components_1.default.button `
  padding: 8px 16px;
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: background 0.2s;
  
  &:hover {
    background: #2563eb;
  }
`;
const SearchRow = styled_components_1.default.div `
  display: flex;
  gap: 12px;
  margin-bottom: 16px;
`;
const SearchInput = styled_components_1.default.input `
  flex: 1;
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
`;
const FilterSelect = styled_components_1.default.select `
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  background: white;
`;
const Table = styled_components_1.default.table `
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
`;
const Th = styled_components_1.default.th `
  background: #f8fafc;
  padding: 12px;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 1px solid #e5e7eb;
`;
const Td = styled_components_1.default.td `
  padding: 12px;
  border-bottom: 1px solid #f3f4f6;
  vertical-align: middle;
`;
const PriorityBadge = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  background: ${({ priority }) => priority === 'High' ? '#fef2f2' :
    priority === 'Medium' ? '#fffbeb' : '#f0fdf4'};
  color: ${({ priority }) => priority === 'High' ? '#dc2626' :
    priority === 'Medium' ? '#d97706' : '#059669'};
`;
const StatusBadge = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  background: ${({ status }) => status === 'Active' ? '#f0fdf4' : '#f9fafb'};
  color: ${({ status }) => status === 'Active' ? '#059669' : '#6b7280'};
`;
const EmptyState = styled_components_1.default.div `
  text-align: center;
  padding: 40px;
  color: #6b7280;
`;
const TestCaseList = ({ releaseId, testCases: propTestCases, onDataChange, searchTerm: propSearchTerm, priorityFilter: propPriorityFilter, statusFilter: propStatusFilter, onSearchChange, onPriorityFilterChange, onStatusFilterChange, folderId, searchPlaceholder, onTestCaseSelect }) => {
    const [searchTerm, setSearchTerm] = (0, react_1.useState)(propSearchTerm || '');
    const [priorityFilter, setPriorityFilter] = (0, react_1.useState)(propPriorityFilter || '');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)(propStatusFilter || '');
    const [testCases, setTestCases] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(true);
    // 컴포넌트가 마운트될 때 테스트케이스 데이터를 가져옵니다
    (0, react_1.useEffect)(() => {
        const fetchTestCases = async () => {
            try {
                setLoading(true);
                const response = await axios_1.default.get('/api/testcases');
                setTestCases(response.data);
            }
            catch (error) {
                console.error('테스트케이스 로드 실패:', error);
                // 에러 시 빈 배열로 설정
                setTestCases([]);
            }
            finally {
                setLoading(false);
            }
        };
        // propTestCases가 제공되지 않은 경우에만 API 호출
        if (!propTestCases) {
            fetchTestCases();
        }
        else {
            setTestCases(propTestCases);
            setLoading(false);
        }
    }, [propTestCases]);
    const filteredTestCases = (0, react_1.useMemo)(() => {
        return testCases.filter(testCase => {
            const matchesSearch = testCase.title.toLowerCase().includes(searchTerm.toLowerCase());
            const matchesPriority = !priorityFilter || testCase.priority === priorityFilter;
            const matchesStatus = !statusFilter || testCase.status === statusFilter;
            return matchesSearch && matchesPriority && matchesStatus;
        });
    }, [testCases, searchTerm, priorityFilter, statusFilter]);
    // 부모 컴포넌트에서 전달받은 콜백 함수들을 사용
    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchTerm(value);
        onSearchChange?.(value);
    };
    const handlePriorityFilterChange = (e) => {
        const value = e.target.value;
        setPriorityFilter(value);
        onPriorityFilterChange?.(value);
    };
    const handleStatusFilterChange = (e) => {
        const value = e.target.value;
        setStatusFilter(value);
        onStatusFilterChange?.(value);
    };
    const handleCreateTestCase = async () => {
        try {
            await axios_1.default.post('/api/testcases', {
                title: '새 테스트케이스',
                priority: 'Medium',
                status: 'Active',
                createdBy: 'current-user',
                steps: ['1. 테스트 스텝'],
                expected: '예상 결과'
            });
            // 데이터 새로고침
            if (onDataChange) {
                onDataChange();
            }
            else {
                // 독립 실행 시 로컬 상태 업데이트
                const response = await axios_1.default.get('/api/testcases');
                setTestCases(response.data);
            }
        }
        catch (error) {
            console.error('테스트케이스 생성 실패:', error);
        }
    };
    const handleDeleteTestCase = async (id) => {
        try {
            await axios_1.default.delete(`/api/testcases/${id}`);
            // 데이터 새로고침
            if (onDataChange) {
                onDataChange();
            }
            else {
                // 독립 실행 시 로컬 상태 업데이트
                setTestCases(prev => prev.filter(tc => tc.id !== id));
            }
        }
        catch (error) {
            console.error('테스트케이스 삭제 실패:', error);
        }
    };
    if (loading) {
        return ((0, jsx_runtime_1.jsx)(Container, { children: (0, jsx_runtime_1.jsx)(EmptyState, { children: "\uB85C\uB529 \uC911..." }) }));
    }
    return ((0, jsx_runtime_1.jsxs)(Container, { children: [(0, jsx_runtime_1.jsxs)(SearchRow, { children: [(0, jsx_runtime_1.jsx)(SearchInput, { type: "text", placeholder: searchPlaceholder || "테스트 케이스 검색...", value: searchTerm, onChange: handleSearchChange }), (0, jsx_runtime_1.jsxs)(FilterSelect, { value: priorityFilter, onChange: handlePriorityFilterChange, children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "\uBAA8\uB4E0 \uC6B0\uC120\uC21C\uC704" }), (0, jsx_runtime_1.jsx)("option", { value: "High", children: "\uB192\uC74C" }), (0, jsx_runtime_1.jsx)("option", { value: "Medium", children: "\uBCF4\uD1B5" }), (0, jsx_runtime_1.jsx)("option", { value: "Low", children: "\uB0AE\uC74C" })] }), (0, jsx_runtime_1.jsxs)(FilterSelect, { value: statusFilter, onChange: handleStatusFilterChange, children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "\uBAA8\uB4E0 \uC0C1\uD0DC" }), (0, jsx_runtime_1.jsx)("option", { value: "Active", children: "\uD65C\uC131" }), (0, jsx_runtime_1.jsx)("option", { value: "Archived", children: "\uBCF4\uAD00" })] }), (0, jsx_runtime_1.jsx)(ActionButton, { onClick: handleCreateTestCase, children: "+ \uC0C8 \uD14C\uC2A4\uD2B8 \uCF00\uC774\uC2A4" })] }), filteredTestCases.length === 0 ? ((0, jsx_runtime_1.jsx)(EmptyState, { children: testCases.length === 0 ? '테스트케이스가 없습니다.' : '검색 결과가 없습니다.' })) : ((0, jsx_runtime_1.jsxs)(Table, { children: [(0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsxs)("tr", { children: [(0, jsx_runtime_1.jsx)(Th, { children: "\uC81C\uBAA9" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC6B0\uC120\uC21C\uC704" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0C1\uD0DC" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0DD\uC131\uC790" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0DD\uC131\uC77C" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC791\uC5C5" })] }) }), (0, jsx_runtime_1.jsx)("tbody", { children: filteredTestCases.map((testCase) => ((0, jsx_runtime_1.jsxs)("tr", { "data-testid": `testcase-row-${testCase.id}`, children: [(0, jsx_runtime_1.jsx)(Td, { children: testCase.title }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(PriorityBadge, { priority: testCase.priority, children: testCase.priority === 'High' ? '높음' :
                                            testCase.priority === 'Medium' ? '보통' : '낮음' }) }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(StatusBadge, { status: testCase.status, children: testCase.status === 'Active' ? '활성' : '보관' }) }), (0, jsx_runtime_1.jsx)(Td, { children: testCase.createdBy }), (0, jsx_runtime_1.jsx)(Td, { children: new Date(testCase.createdAt).toLocaleDateString() }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)("button", { onClick: () => handleDeleteTestCase(testCase.id), style: {
                                            padding: '4px 8px',
                                            background: '#ef4444',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: '4px',
                                            fontSize: '12px',
                                            cursor: 'pointer'
                                        }, "data-testid": `delete-testcase-${testCase.id}`, children: "\uC0AD\uC81C" }) })] }, testCase.id))) })] }))] }));
};
exports.default = TestCaseList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,