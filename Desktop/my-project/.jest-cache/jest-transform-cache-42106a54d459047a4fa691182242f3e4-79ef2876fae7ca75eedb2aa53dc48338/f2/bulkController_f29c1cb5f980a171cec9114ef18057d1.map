{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/controllers/bulkController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/controllers/bulkController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport pgClient from '../infrastructure/database/pgClient';\n\ninterface BulkOperationRequest {\n  ids: number[];\n  type: 'testcase' | 'folder';\n  targetFolderId?: number;\n  newStatus?: string;\n}\n\nexport const bulkMove = async (req: Request, res: Response) => {\n  try {\n    const { ids, type, targetFolderId }: BulkOperationRequest = req.body;\n    \n    if (!ids || ids.length === 0) {\n      return res.status(400).json({ error: '선택된 항목이 없습니다.' });\n    }\n    \n    if (!targetFolderId) {\n      return res.status(400).json({ error: '대상 폴더가 지정되지 않았습니다.' });\n    }\n\n    try {\n      await pgClient.query('BEGIN');\n      \n      if (type === 'testcase') {\n        const updateQuery = `\n          UPDATE testcases \n          SET folder_id = $1, updated_at = NOW() \n          WHERE id = ANY($2)\n        `;\n        await pgClient.query(updateQuery, [targetFolderId, ids]);\n      } else if (type === 'folder') {\n        const updateQuery = `\n          UPDATE folders \n          SET parent_id = $1, updated_at = NOW() \n          WHERE id = ANY($2)\n        `;\n        await pgClient.query(updateQuery, [targetFolderId, ids]);\n      }\n      \n      await pgClient.query('COMMIT');\n      \n      res.json({ \n        success: true, \n        message: `${ids.length}개 항목이 이동되었습니다.`,\n        movedCount: ids.length \n      });\n    } catch (error) {\n      await pgClient.query('ROLLBACK');\n      throw error;\n    }\n  } catch (error) {\n    console.error('일괄 이동 오류:', error);\n    res.status(500).json({ error: '일괄 이동 중 오류가 발생했습니다.' });\n  }\n};\n\nexport const bulkCopy = async (req: Request, res: Response) => {\n  try {\n    const { ids, type, targetFolderId }: BulkOperationRequest = req.body;\n    \n    if (!ids || ids.length === 0) {\n      return res.status(400).json({ error: '선택된 항목이 없습니다.' });\n    }\n    \n    if (!targetFolderId) {\n      return res.status(400).json({ error: '대상 폴더가 지정되지 않았습니다.' });\n    }\n\n    try {\n      await pgClient.query('BEGIN');\n      \n      if (type === 'testcase') {\n        // 테스트 케이스 복사\n        const selectQuery = `\n          SELECT title, description, steps, expected_result, priority, tags, status\n          FROM testcases WHERE id = ANY($1)\n        `;\n        const { rows } = await pgClient.query(selectQuery, [ids]);\n        \n        for (const row of rows) {\n          const insertQuery = `\n            INSERT INTO testcases (title, description, steps, expected_result, priority, tags, status, folder_id, created_at, updated_at)\n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())\n          `;\n          await pgClient.query(insertQuery, [\n            row.title + ' (복사본)',\n            row.description,\n            row.steps,\n            row.expected_result,\n            row.priority,\n            row.tags,\n            row.status,\n            targetFolderId\n          ]);\n        }\n      } else if (type === 'folder') {\n        // 폴더 복사 (재귀적 복사 로직 필요)\n        const selectQuery = `\n          SELECT name, description, parent_id\n          FROM folders WHERE id = ANY($1)\n        `;\n        const { rows } = await pgClient.query(selectQuery, [ids]);\n        \n        for (const row of rows) {\n          const insertQuery = `\n            INSERT INTO folders (name, description, parent_id, created_at, updated_at)\n            VALUES ($1, $2, $3, NOW(), NOW())\n          `;\n          await pgClient.query(insertQuery, [\n            row.name + ' (복사본)',\n            row.description,\n            targetFolderId\n          ]);\n        }\n      }\n      \n      await pgClient.query('COMMIT');\n      \n      res.json({ \n        success: true, \n        message: `${ids.length}개 항목이 복사되었습니다.`,\n        copiedCount: ids.length \n      });\n    } catch (error) {\n      await pgClient.query('ROLLBACK');\n      throw error;\n    }\n  } catch (error) {\n    console.error('일괄 복사 오류:', error);\n    res.status(500).json({ error: '일괄 복사 중 오류가 발생했습니다.' });\n  }\n};\n\nexport const bulkDelete = async (req: Request, res: Response) => {\n  try {\n    const { ids, type }: BulkOperationRequest = req.body;\n    \n    if (!ids || ids.length === 0) {\n      return res.status(400).json({ error: '선택된 항목이 없습니다.' });\n    }\n\n    try {\n      await pgClient.query('BEGIN');\n      \n      if (type === 'testcase') {\n        const deleteQuery = `DELETE FROM testcases WHERE id = ANY($1)`;\n        await pgClient.query(deleteQuery, [ids]);\n      } else if (type === 'folder') {\n        // 폴더 삭제 시 하위 항목도 함께 삭제\n        const deleteQuery = `DELETE FROM folders WHERE id = ANY($1)`;\n        await pgClient.query(deleteQuery, [ids]);\n      }\n      \n      await pgClient.query('COMMIT');\n      \n      res.json({ \n        success: true, \n        message: `${ids.length}개 항목이 삭제되었습니다.`,\n        deletedCount: ids.length \n      });\n    } catch (error) {\n      await pgClient.query('ROLLBACK');\n      throw error;\n    }\n  } catch (error) {\n    console.error('일괄 삭제 오류:', error);\n    res.status(500).json({ error: '일괄 삭제 중 오류가 발생했습니다.' });\n  }\n};\n\nexport const bulkUpdateStatus = async (req: Request, res: Response) => {\n  try {\n    const { ids, newStatus }: BulkOperationRequest = req.body;\n    \n    if (!ids || ids.length === 0) {\n      return res.status(400).json({ error: '선택된 항목이 없습니다.' });\n    }\n    \n    if (!newStatus) {\n      return res.status(400).json({ error: '새로운 상태가 지정되지 않았습니다.' });\n    }\n\n    try {\n      await pgClient.query('BEGIN');\n      \n      const updateQuery = `\n        UPDATE testcases \n        SET status = $1, updated_at = NOW() \n        WHERE id = ANY($2)\n      `;\n      await pgClient.query(updateQuery, [newStatus, ids]);\n      \n      await pgClient.query('COMMIT');\n      \n      res.json({ \n        success: true, \n        message: `${ids.length}개 테스트 케이스의 상태가 변경되었습니다.`,\n        updatedCount: ids.length \n      });\n    } catch (error) {\n      await pgClient.query('ROLLBACK');\n      throw error;\n    }\n  } catch (error) {\n    console.error('일괄 상태 변경 오류:', error);\n    res.status(500).json({ error: '일괄 상태 변경 중 오류가 발생했습니다.' });\n  }\n}; "],"version":3}