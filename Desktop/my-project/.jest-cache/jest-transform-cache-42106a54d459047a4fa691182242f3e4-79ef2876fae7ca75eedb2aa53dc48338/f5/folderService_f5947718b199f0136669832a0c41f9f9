1a354382ba6667ba9acfedbe0bef7299
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.getAllFolders = getAllFolders;
exports.getFolderTree = getFolderTree;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.moveFolder = moveFolder;
exports.getTestCasesInFolder = getTestCasesInFolder;
exports.addTestCaseToFolder = addTestCaseToFolder;
exports.removeTestCaseFromFolder = removeTestCaseFromFolder;
exports.moveTestCase = moveTestCase;
exports.reorderFolder = reorderFolder;
exports.handleFolderDragDrop = handleFolderDragDrop;
exports.validateDropZone = validateDropZone;
const folderRepository = __importStar(require("../repositories/folderRepository"));
const Folder_1 = require("../models/Folder");
const performanceMonitor_1 = require("../../../utils/performanceMonitor");
async function createFolder(request) {
    return await (0, performanceMonitor_1.measureOperation)('folder-create', async () => {
        // 순환 참조 검사
        if (request.parentId) {
            const hasCircularReference = await folderRepository.checkCircularReference(0, request.parentId);
            if (hasCircularReference) {
                throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
            }
        }
        return await folderRepository.createFolder({
            name: request.name,
            description: request.description,
            parentId: request.parentId,
            createdBy: request.createdBy
        });
    });
}
async function getFolderById(id) {
    return await (0, performanceMonitor_1.measureOperation)('folder-get-by-id', async () => {
        return await folderRepository.getFolderById(id);
    });
}
async function getAllFolders() {
    return await (0, performanceMonitor_1.measureOperation)('folder-get-all', async () => {
        return await folderRepository.getAllFolders();
    });
}
async function getFolderTree() {
    return await (0, performanceMonitor_1.measureOperation)('folder-get-tree', async () => {
        return await folderRepository.getFolderTree();
    });
}
async function updateFolder(id, request) {
    return await (0, performanceMonitor_1.measureOperation)('folder-update', async () => {
        const folder = await folderRepository.getFolderById(id);
        if (!folder) {
            throw new Error('폴더를 찾을 수 없습니다.');
        }
        // 순환 참조 검사 (parentId가 변경되는 경우)
        if (request.parentId !== undefined && request.parentId !== folder.parentId) {
            const hasCircularReference = await folderRepository.checkCircularReference(id, request.parentId);
            if (hasCircularReference) {
                throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
            }
        }
        return await folderRepository.updateFolder(id, request);
    });
}
async function deleteFolder(id) {
    return await (0, performanceMonitor_1.measureOperation)('folder-delete', async () => {
        const folder = await folderRepository.getFolderById(id);
        if (!folder) {
            throw new Error('폴더를 찾을 수 없습니다.');
        }
        // 루트 폴더는 삭제 불가
        if (folder.name === 'Root') {
            throw new Error('루트 폴더는 삭제할 수 없습니다.');
        }
        return await folderRepository.deleteFolder(id);
    });
}
async function moveFolder(id, request) {
    return await (0, performanceMonitor_1.measureOperation)('folder-move', async () => {
        const folder = await folderRepository.getFolderById(id);
        if (!folder) {
            throw new Error('폴더를 찾을 수 없습니다.');
        }
        // 순환 참조 검사
        if (request.targetParentId !== undefined) {
            const hasCircularReference = await folderRepository.checkCircularReference(id, request.targetParentId);
            if (hasCircularReference) {
                throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');
            }
        }
        return await folderRepository.updateFolder(id, {
            parentId: request.targetParentId
        });
    });
}
async function getTestCasesInFolder(folderId) {
    return await (0, performanceMonitor_1.measureOperation)('folder-get-testcases', async () => {
        return await folderRepository.getTestCasesInFolder(folderId);
    });
}
async function addTestCaseToFolder(testCaseId, folderId) {
    return await (0, performanceMonitor_1.measureOperation)('folder-add-testcase', async () => {
        await folderRepository.addTestCaseToFolder(testCaseId, folderId);
    });
}
async function removeTestCaseFromFolder(testCaseId, folderId) {
    return await (0, performanceMonitor_1.measureOperation)('folder-remove-testcase', async () => {
        await folderRepository.removeTestCaseFromFolder(testCaseId, folderId);
    });
}
async function moveTestCase(testCaseId, fromFolderId, toFolderId) {
    return await (0, performanceMonitor_1.measureOperation)('folder-move-testcase', async () => {
        await folderRepository.moveTestCase(testCaseId, fromFolderId, toFolderId);
    });
}
async function reorderFolder(folderId, targetFolderId, position) {
    return await (0, performanceMonitor_1.measureOperation)('folder-reorder', async () => {
        const folder = await folderRepository.getFolderById(folderId);
        if (!folder) {
            throw new Error('폴더를 찾을 수 없습니다.');
        }
        const targetFolder = await folderRepository.getFolderById(targetFolderId);
        if (!targetFolder) {
            throw new Error('대상 폴더를 찾을 수 없습니다.');
        }
        // 같은 부모 폴더 내에서만 순서 변경 가능
        if (folder.parentId !== targetFolder.parentId) {
            throw new Error('같은 부모 폴더 내에서만 순서를 변경할 수 있습니다.');
        }
        const newSortOrder = position === 'before'
            ? targetFolder.sortOrder || 0
            : (targetFolder.sortOrder || 0) + 1;
        return await folderRepository.updateFolder(folderId, {
            sortOrder: newSortOrder
        });
    });
}
async function handleFolderDragDrop(draggedFolderId, dropZone) {
    return await (0, performanceMonitor_1.measureOperation)('folder-dragdrop', async () => {
        const draggedFolder = await folderRepository.getFolderById(draggedFolderId);
        if (!draggedFolder) {
            return { success: false, message: '드래그한 폴더를 찾을 수 없습니다.' };
        }
        if (dropZone.type === Folder_1.DropType.REORDER) {
            // 순서 변경 로직
            const targetFolder = await folderRepository.getFolderById(dropZone.targetId);
            if (!targetFolder) {
                return { success: false, message: '대상 폴더를 찾을 수 없습니다.' };
            }
            // 같은 부모 폴더 내에서만 순서 변경 가능
            if (draggedFolder.parentId !== targetFolder.parentId) {
                return { success: false, message: '같은 부모 폴더 내에서만 순서를 변경할 수 있습니다.' };
            }
            const newSortOrder = dropZone.position === 'before'
                ? targetFolder.sortOrder || 0
                : (targetFolder.sortOrder || 0) + 1;
            const updatedFolder = await folderRepository.updateFolder(draggedFolderId, {
                sortOrder: newSortOrder
            });
            return {
                success: true,
                message: '폴더 순서가 변경되었습니다.',
                folder: updatedFolder || undefined
            };
        }
        else if (dropZone.type === Folder_1.DropType.HIERARCHY) {
            // 계층 변경 로직
            const hasCircularReference = await folderRepository.checkCircularReference(draggedFolderId, dropZone.targetId);
            if (hasCircularReference) {
                return { success: false, message: '순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.' };
            }
            const updatedFolder = await folderRepository.updateFolder(draggedFolderId, {
                parentId: dropZone.targetId
            });
            return {
                success: true,
                message: '폴더가 이동되었습니다.',
                folder: updatedFolder || undefined
            };
        }
        return { success: false, message: '지원하지 않는 드롭 타입입니다.' };
    }, {
        draggedFolderId,
        dropZoneType: dropZone.type,
        targetId: dropZone.targetId,
        position: dropZone.position
    });
}
async function validateDropZone(draggedFolderId, dropZone) {
    return await (0, performanceMonitor_1.measureOperation)('folder-validate-drop', async () => {
        // 자기 자신으로의 드롭 방지
        if (draggedFolderId === dropZone.targetId) {
            return { isValid: false, message: '자기 자신으로는 이동할 수 없습니다.' };
        }
        // 순환 참조 검사 (계층 변경인 경우)
        if (dropZone.type === Folder_1.DropType.HIERARCHY) {
            const hasCircularReference = await folderRepository.checkCircularReference(draggedFolderId, dropZone.targetId);
            if (hasCircularReference) {
                return { isValid: false, message: '순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.' };
            }
        }
        return { isValid: true };
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,