b346adcc9e22ae341b59624361728786
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDefects = exports.getDefectById = exports.deleteDefect = exports.updateDefect = exports.createDefect = void 0;
const defectRepository_1 = require("../repositories/defectRepository");
const createDefect = async (data) => {
    const defect = await defectRepository_1.defectRepository.create({
        ...data,
        createdAt: new Date(),
        updatedAt: new Date()
    });
    return defect;
};
exports.createDefect = createDefect;
const updateDefect = async (id, data) => {
    const defect = await defectRepository_1.defectRepository.update(id, {
        ...data,
        updatedAt: new Date()
    });
    return defect;
};
exports.updateDefect = updateDefect;
const deleteDefect = async (id) => {
    return await defectRepository_1.defectRepository.delete(id);
};
exports.deleteDefect = deleteDefect;
const getDefectById = async (id) => {
    return await defectRepository_1.defectRepository.findById(id);
};
exports.getDefectById = getDefectById;
const listDefects = async (params) => {
    const { defects, total } = await defectRepository_1.defectRepository.findWithPagination(params);
    return {
        defects,
        total,
        page: params.page,
        size: params.size
    };
};
exports.listDefects = listDefects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9kZWZlY3RzL3NlcnZpY2VzL2RlZmVjdFNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUVBQW9FO0FBK0I3RCxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsSUFBc0IsRUFBbUIsRUFBRTtJQUMxRSxNQUFNLE1BQU0sR0FBRyxNQUFNLG1DQUFnQixDQUFDLE1BQU0sQ0FBQztRQUN6QyxHQUFHLElBQUk7UUFDUCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7UUFDckIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO0tBQ3hCLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQVBXLFFBQUEsWUFBWSxnQkFPdkI7QUFFSyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsRUFBVSxFQUFFLElBQXNCLEVBQTBCLEVBQUU7SUFDN0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxtQ0FBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQzdDLEdBQUcsSUFBSTtRQUNQLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtLQUN4QixDQUFDLENBQUM7SUFDSCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUM7QUFOVyxRQUFBLFlBQVksZ0JBTXZCO0FBRUssTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBb0IsRUFBRTtJQUMvRCxPQUFPLE1BQU0sbUNBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUZXLFFBQUEsWUFBWSxnQkFFdkI7QUFFSyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsRUFBVSxFQUEwQixFQUFFO0lBQ3RFLE9BQU8sTUFBTSxtQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBRlcsUUFBQSxhQUFhLGlCQUV4QjtBQUVLLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxNQUF3QixFQUt2RCxFQUFFO0lBQ0QsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLG1DQUFnQixDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdFLE9BQU87UUFDSCxPQUFPO1FBQ1AsS0FBSztRQUNMLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtRQUNqQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7S0FDcEIsQ0FBQztBQUNOLENBQUMsQ0FBQztBQWJXLFFBQUEsV0FBVyxlQWF0QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9tYWluL2FwcC9kb21haW5zL2RlZmVjdHMvc2VydmljZXMvZGVmZWN0U2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZlY3QsIERlZmVjdFN0YXR1cywgRGVmZWN0UHJpb3JpdHkgfSBmcm9tICcuLi9tb2RlbHMvRGVmZWN0JztcbmltcG9ydCB7IGRlZmVjdFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvZGVmZWN0UmVwb3NpdG9yeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlRGVmZWN0RGF0YSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHN0YXR1czogRGVmZWN0U3RhdHVzO1xuICAgIHByaW9yaXR5OiBEZWZlY3RQcmlvcml0eTtcbiAgICBhc3NpZ25lZT86IHN0cmluZztcbiAgICByZXBvcnRlcjogc3RyaW5nO1xuICAgIGNyZWF0ZWRCeTogc3RyaW5nO1xuICAgIHRlc3RDYXNlSWQ/OiBudW1iZXI7XG4gICAgcmVsZWFzZUlkPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZURlZmVjdERhdGEge1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHN0YXR1cz86IERlZmVjdFN0YXR1cztcbiAgICBwcmlvcml0eT86IERlZmVjdFByaW9yaXR5O1xuICAgIGFzc2lnbmVlPzogc3RyaW5nO1xuICAgIHVwZGF0ZWRCeTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZmVjdExpc3RQYXJhbXMge1xuICAgIHBhZ2U6IG51bWJlcjtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIHByaW9yaXR5Pzogc3RyaW5nO1xuICAgIGFzc2lnbmVlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlRGVmZWN0ID0gYXN5bmMgKGRhdGE6IENyZWF0ZURlZmVjdERhdGEpOiBQcm9taXNlPERlZmVjdD4gPT4ge1xuICAgIGNvbnN0IGRlZmVjdCA9IGF3YWl0IGRlZmVjdFJlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZURlZmVjdCA9IGFzeW5jIChpZDogbnVtYmVyLCBkYXRhOiBVcGRhdGVEZWZlY3REYXRhKTogUHJvbWlzZTxEZWZlY3QgfCBudWxsPiA9PiB7XG4gICAgY29uc3QgZGVmZWN0ID0gYXdhaXQgZGVmZWN0UmVwb3NpdG9yeS51cGRhdGUoaWQsIHtcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfSk7XG4gICAgcmV0dXJuIGRlZmVjdDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxldGVEZWZlY3QgPSBhc3luYyAoaWQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHJldHVybiBhd2FpdCBkZWZlY3RSZXBvc2l0b3J5LmRlbGV0ZShpZCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RGVmZWN0QnlJZCA9IGFzeW5jIChpZDogbnVtYmVyKTogUHJvbWlzZTxEZWZlY3QgfCBudWxsPiA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IGRlZmVjdFJlcG9zaXRvcnkuZmluZEJ5SWQoaWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxpc3REZWZlY3RzID0gYXN5bmMgKHBhcmFtczogRGVmZWN0TGlzdFBhcmFtcyk6IFByb21pc2U8e1xuICAgIGRlZmVjdHM6IERlZmVjdFtdO1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgcGFnZTogbnVtYmVyO1xuICAgIHNpemU6IG51bWJlcjtcbn0+ID0+IHtcbiAgICBjb25zdCB7IGRlZmVjdHMsIHRvdGFsIH0gPSBhd2FpdCBkZWZlY3RSZXBvc2l0b3J5LmZpbmRXaXRoUGFnaW5hdGlvbihwYXJhbXMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlZmVjdHMsXG4gICAgICAgIHRvdGFsLFxuICAgICAgICBwYWdlOiBwYXJhbXMucGFnZSxcbiAgICAgICAgc2l6ZTogcGFyYW1zLnNpemVcbiAgICB9O1xufTsgIl0sInZlcnNpb24iOjN9