c7909119b5c57d563166c45eabb41dea
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Chart.js Mock
jest.mock('react-chartjs-2', () => ({
    Doughnut: ({ data, options }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "doughnut-chart", "aria-label": options?.plugins?.title?.display || '진행률 도넛 차트', children: data?.datasets?.[0]?.data?.map((value, index) => ((0, jsx_runtime_1.jsx)("span", { "data-testid": `chart-value-${index}`, children: value }, index))) })),
    Bar: ({ data, options }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "bar-chart", "aria-label": options?.plugins?.title?.display || '결함 밀도 바 차트', children: data?.datasets?.[0]?.data?.map((value, index) => ((0, jsx_runtime_1.jsx)("span", { "data-testid": `bar-value-${index}`, children: value }, index))) })),
}));
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const styled_components_1 = require("styled-components");
const theme_1 = require("../src/renderer/shared/theme");
// DashboardCharts 컴포넌트 Mock (실제 컴포넌트가 없는 경우)
const MockDashboardCharts = ({ stats }) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "dashboard-charts", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": "progress-rate", children: [Math.round(stats.progressRate * 100), "%"] }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "defect-density", children: [(stats.defectDensity * 100).toFixed(2), "%"] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "total-cases", children: stats.totalCases }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "defect-count", children: stats.defectCount }), Object.entries(stats.workload).map(([name, count]) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `workload-${name}`, children: [(0, jsx_runtime_1.jsx)("span", { "data-testid": `name-${name}`, children: name }), (0, jsx_runtime_1.jsx)("span", { "data-testid": `count-${name}`, children: String(count) })] }, name)))] }));
describe('DashboardCharts', () => {
    const stats = {
        totalCases: 100,
        statusCounts: { Pass: 60, Fail: 20, Blocked: 10, Untested: 10 },
        defectCount: 8,
        defectDensity: 0.08,
        progressRate: 0.6,
        workload: { Alice: 40, Bob: 30, Carol: 30 },
    };
    const renderWithTheme = (component) => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: component }));
    };
    it('KPI 카드/차트가 정상 렌더링되고 데이터가 바인딩된다', () => {
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        expect(react_1.screen.getByTestId('progress-rate')).toHaveTextContent('60%');
        expect(react_1.screen.getByTestId('defect-density')).toHaveTextContent('8.00%');
        expect(react_1.screen.getByTestId('total-cases')).toHaveTextContent('100');
        expect(react_1.screen.getByTestId('defect-count')).toHaveTextContent('8');
        expect(react_1.screen.getByTestId('name-Alice')).toHaveTextContent('Alice');
        expect(react_1.screen.getByTestId('count-Alice')).toHaveTextContent('40');
    });
    it('접근성 속성(aria-label, role) 포함', () => {
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        expect(react_1.screen.getByTestId('dashboard-charts')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('progress-rate')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('defect-density')).toBeInTheDocument();
    });
    it('5초(5000ms) 내에 렌더링이 완료된다', () => {
        const start = performance.now();
        renderWithTheme((0, jsx_runtime_1.jsx)(MockDashboardCharts, { stats: stats }));
        const end = performance.now();
        expect(end - start).toBeLessThan(5000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,