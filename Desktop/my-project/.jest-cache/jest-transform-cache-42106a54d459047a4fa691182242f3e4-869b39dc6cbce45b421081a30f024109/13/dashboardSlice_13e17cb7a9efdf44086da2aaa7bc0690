b5211f25492de94cadfb09fab23a61ad
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchDashboardStats = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = __importDefault(require("../../../utils/axios"));
const initialState = {
    stats: null,
    loading: false,
    error: null,
};
exports.fetchDashboardStats = (0, toolkit_1.createAsyncThunk)('dashboard/fetchStats', async () => {
    const res = await axios_1.default.get('/api/dashboard/stats');
    return res.data;
});
const dashboardSlice = (0, toolkit_1.createSlice)({
    name: 'dashboard',
    initialState,
    reducers: {},
    extraReducers: builder => {
        builder
            .addCase(exports.fetchDashboardStats.pending, state => {
            state.loading = true;
            state.error = null;
        })
            .addCase(exports.fetchDashboardStats.fulfilled, (state, action) => {
            state.loading = false;
            state.stats = action.payload;
        })
            .addCase(exports.fetchDashboardStats.rejected, (state, action) => {
            state.loading = false;
            state.error = action.error.message || null;
        });
    },
});
exports.default = dashboardSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvZmVhdHVyZXMvRGFzaGJvYXJkL3N0b3JlL2Rhc2hib2FyZFNsaWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUFnRjtBQUVoRixpRUFBdUM7QUFpQnZDLE1BQU0sWUFBWSxHQUFtQjtJQUNuQyxLQUFLLEVBQUUsSUFBSTtJQUNYLE9BQU8sRUFBRSxLQUFLO0lBQ2QsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDO0FBRVcsUUFBQSxtQkFBbUIsR0FBRyxJQUFBLDBCQUFnQixFQUNqRCxzQkFBc0IsRUFDdEIsS0FBSyxJQUFJLEVBQUU7SUFDVCxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUcsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNsRCxPQUFPLEdBQUcsQ0FBQyxJQUFzQixDQUFDO0FBQ3BDLENBQUMsQ0FDRixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQUcsSUFBQSxxQkFBVyxFQUFDO0lBQ2pDLElBQUksRUFBRSxXQUFXO0lBQ2pCLFlBQVk7SUFDWixRQUFRLEVBQUUsRUFBRTtJQUNaLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUN2QixPQUFPO2FBQ0osT0FBTyxDQUFDLDJCQUFtQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtZQUM1QyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNyQixLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNyQixDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsMkJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQXFDLEVBQUUsRUFBRTtZQUN2RixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLDJCQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN2RCxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxrQkFBZSxjQUFjLENBQUMsT0FBTyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3Qvc3JjL3JlbmRlcmVyL2ZlYXR1cmVzL0Rhc2hib2FyZC9zdG9yZS9kYXNoYm9hcmRTbGljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTbGljZSwgY3JlYXRlQXN5bmNUaHVuaywgUGF5bG9hZEFjdGlvbiB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBhcGkgZnJvbSAnLi4vLi4vLi4vdXRpbHMvYXhpb3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhc2hib2FyZFN0YXRzIHtcbiAgdG90YWxDYXNlczogbnVtYmVyO1xuICBzdGF0dXNDb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIGRlZmVjdENvdW50OiBudW1iZXI7XG4gIGRlZmVjdERlbnNpdHk6IG51bWJlcjtcbiAgcHJvZ3Jlc3NSYXRlOiBudW1iZXI7XG4gIHdvcmtsb2FkOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhc2hib2FyZFN0YXRlIHtcbiAgc3RhdHM6IERhc2hib2FyZFN0YXRzIHwgbnVsbDtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogRGFzaGJvYXJkU3RhdGUgPSB7XG4gIHN0YXRzOiBudWxsLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgZXJyb3I6IG51bGwsXG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hEYXNoYm9hcmRTdGF0cyA9IGNyZWF0ZUFzeW5jVGh1bmsoXG4gICdkYXNoYm9hcmQvZmV0Y2hTdGF0cycsXG4gIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KCcvYXBpL2Rhc2hib2FyZC9zdGF0cycpO1xuICAgIHJldHVybiByZXMuZGF0YSBhcyBEYXNoYm9hcmRTdGF0cztcbiAgfVxuKTtcblxuY29uc3QgZGFzaGJvYXJkU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdkYXNoYm9hcmQnLFxuICBpbml0aWFsU3RhdGUsXG4gIHJlZHVjZXJzOiB7fSxcbiAgZXh0cmFSZWR1Y2VyczogYnVpbGRlciA9PiB7XG4gICAgYnVpbGRlclxuICAgICAgLmFkZENhc2UoZmV0Y2hEYXNoYm9hcmRTdGF0cy5wZW5kaW5nLCBzdGF0ZSA9PiB7XG4gICAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5lcnJvciA9IG51bGw7XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UoZmV0Y2hEYXNoYm9hcmRTdGF0cy5mdWxmaWxsZWQsIChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPERhc2hib2FyZFN0YXRzPikgPT4ge1xuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnN0YXRzID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UoZmV0Y2hEYXNoYm9hcmRTdGF0cy5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5lcnJvci5tZXNzYWdlIHx8IG51bGw7XG4gICAgICB9KTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXNoYm9hcmRTbGljZS5yZWR1Y2VyOyAiXSwidmVyc2lvbiI6M30=