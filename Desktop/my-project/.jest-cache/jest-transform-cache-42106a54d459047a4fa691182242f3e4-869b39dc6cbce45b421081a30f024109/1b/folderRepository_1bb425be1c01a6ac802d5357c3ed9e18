64d156d5a1b259a603eb60917e813bfe
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFolder = createFolder;
exports.getFolderById = getFolderById;
exports.getAllFolders = getAllFolders;
exports.getFolderTree = getFolderTree;
exports.getFolderTreePaginated = getFolderTreePaginated;
exports.getFolderTreeWithLazyLoading = getFolderTreeWithLazyLoading;
exports.updateFolder = updateFolder;
exports.deleteFolder = deleteFolder;
exports.getTestCasesInFolder = getTestCasesInFolder;
exports.addTestCaseToFolder = addTestCaseToFolder;
exports.removeTestCaseFromFolder = removeTestCaseFromFolder;
exports.moveTestCase = moveTestCase;
exports.moveTestCasesBatch = moveTestCasesBatch;
exports.checkCircularReference = checkCircularReference;
const pgClient_1 = __importDefault(require("../../../infrastructure/database/pgClient"));
async function createFolder(folder) {
    const result = await pgClient_1.default.query('INSERT INTO folders (name, description, parent_id, created_by) VALUES ($1, $2, $3, $4) RETURNING *', [folder.name, folder.description, folder.parentId, folder.createdBy]);
    return result.rows[0];
}
async function getFolderById(id) {
    const result = await pgClient_1.default.query('SELECT * FROM folders WHERE id = $1', [id]);
    return result.rows[0] || null;
}
async function getAllFolders() {
    const result = await pgClient_1.default.query('SELECT * FROM folders ORDER BY name');
    return result.rows;
}
async function getFolderTree() {
    // 모든 폴더 조회
    const folders = await getAllFolders();
    // 테스트 케이스 수 조회
    const testCaseCounts = await pgClient_1.default.query(`
        SELECT folder_id, COUNT(*) as count 
        FROM case_folders 
        GROUP BY folder_id
    `);
    const countMap = new Map();
    testCaseCounts.rows.forEach(row => {
        countMap.set(row.folder_id, parseInt(row.count));
    });
    // 트리 구조 생성
    const folderMap = new Map();
    const rootFolders = [];
    folders.forEach(folder => {
        const folderTree = {
            ...folder,
            children: [],
            testCaseCount: countMap.get(folder.id) || 0
        };
        folderMap.set(folder.id, folderTree);
    });
    folders.forEach(folder => {
        const folderTree = folderMap.get(folder.id);
        if (folder.parentId) {
            const parent = folderMap.get(folder.parentId);
            if (parent) {
                parent.children.push(folderTree);
            }
        }
        else {
            rootFolders.push(folderTree);
        }
    });
    return rootFolders;
}
async function getFolderTreePaginated(page = 1, limit = 100) {
    const offset = (page - 1) * limit;
    // 전체 개수 조회
    const countResult = await pgClient_1.default.query('SELECT COUNT(*) as total FROM folders');
    const total = parseInt(countResult.rows[0].total);
    // 페이징된 폴더 조회
    const result = await pgClient_1.default.query('SELECT * FROM folders ORDER BY name LIMIT $1 OFFSET $2', [limit, offset]);
    const folders = result.rows.map(row => ({
        ...row,
        children: [],
        testCaseCount: 0
    }));
    return { folders, total };
}
async function getFolderTreeWithLazyLoading(parentId) {
    const whereClause = parentId ? 'WHERE parent_id = $1' : 'WHERE parent_id IS NULL';
    const params = parentId ? [parentId] : [];
    const result = await pgClient_1.default.query(`SELECT * FROM folders ${whereClause} ORDER BY name`, params);
    return result.rows.map(row => ({
        ...row,
        children: [],
        testCaseCount: 0
    }));
}
async function updateFolder(id, updates) {
    const fields = [];
    const values = [];
    let paramIndex = 1;
    if (updates.name !== undefined) {
        fields.push(`name = $${paramIndex++}`);
        values.push(updates.name);
    }
    if (updates.description !== undefined) {
        fields.push(`description = $${paramIndex++}`);
        values.push(updates.description);
    }
    if (updates.parentId !== undefined) {
        fields.push(`parent_id = $${paramIndex++}`);
        values.push(updates.parentId);
    }
    fields.push(`updated_at = CURRENT_TIMESTAMP`);
    values.push(id);
    const result = await pgClient_1.default.query(`UPDATE folders SET ${fields.join(', ')} WHERE id = $${paramIndex} RETURNING *`, values);
    return result.rows[0] || null;
}
async function deleteFolder(id) {
    const result = await pgClient_1.default.query('DELETE FROM folders WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function getTestCasesInFolder(folderId) {
    const result = await pgClient_1.default.query('SELECT testcase_id FROM case_folders WHERE folder_id = $1', [folderId]);
    return result.rows.map(row => row.testcase_id);
}
async function addTestCaseToFolder(testCaseId, folderId) {
    const result = await pgClient_1.default.query('INSERT INTO case_folders (testcase_id, folder_id) VALUES ($1, $2) ON CONFLICT DO NOTHING RETURNING id', [testCaseId, folderId]);
    if (result.rowCount === 0) {
        throw new Error('이미 해당 폴더에 포함된 테스트케이스입니다.');
    }
}
async function removeTestCaseFromFolder(testCaseId, folderId) {
    await pgClient_1.default.query('DELETE FROM case_folders WHERE testcase_id = $1 AND folder_id = $2', [testCaseId, folderId]);
}
async function moveTestCase(testCaseId, fromFolderId, toFolderId) {
    await pgClient_1.default.query('BEGIN');
    try {
        await removeTestCaseFromFolder(testCaseId, fromFolderId);
        await addTestCaseToFolder(testCaseId, toFolderId);
        await pgClient_1.default.query('COMMIT');
    }
    catch (error) {
        await pgClient_1.default.query('ROLLBACK');
        throw error;
    }
}
async function moveTestCasesBatch(testCaseIds, fromFolderId, toFolderId) {
    await pgClient_1.default.query('BEGIN');
    try {
        // 기존 관계 제거
        await pgClient_1.default.query('DELETE FROM case_folders WHERE testcase_id = ANY($1) AND folder_id = $2', [testCaseIds, fromFolderId]);
        // 새 관계 추가 (배치 처리)
        const values = testCaseIds.map((_, index) => `($${index + 1}, $${testCaseIds.length + 1})`).join(', ');
        await pgClient_1.default.query(`INSERT INTO case_folders (testcase_id, folder_id) VALUES ${values}`, [...testCaseIds, toFolderId]);
        await pgClient_1.default.query('COMMIT');
    }
    catch (error) {
        await pgClient_1.default.query('ROLLBACK');
        throw error;
    }
}
async function checkCircularReference(folderId, newParentId) {
    if (!newParentId)
        return false;
    const visited = new Set();
    let currentId = newParentId;
    while (currentId) {
        if (visited.has(currentId) || currentId === folderId) {
            return true; // 순환 참조 발견
        }
        visited.add(currentId);
        const result = await pgClient_1.default.query('SELECT parent_id FROM folders WHERE id = $1', [currentId]);
        if (result.rows.length === 0)
            break;
        currentId = result.rows[0].parent_id;
    }
    return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,