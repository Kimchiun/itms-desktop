8858559b5560b2a204adc4dd14ec9ff6
"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnstableContext = exports.TreeContext = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * Webpack has bug for import loop, which is not the same behavior as ES module.
 * When util.js imports the TreeNode for tree generate will cause treeContextTypes be empty.
 */

var TreeContext = exports.TreeContext = /*#__PURE__*/React.createContext(null);

/** Internal usage, safe to remove. Do not use in prod */
var UnstableContext = exports.UnstableContext = /*#__PURE__*/React.createContext({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVW5zdGFibGVDb250ZXh0IiwiVHJlZUNvbnRleHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImNyZWF0ZUNvbnRleHQiXSwic291cmNlcyI6WyJjb250ZXh0VHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVW5zdGFibGVDb250ZXh0ID0gZXhwb3J0cy5UcmVlQ29udGV4dCA9IHZvaWQgMDtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IF90eXBlb2YoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHUpKSB7IHZhciBpID0gYSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdSkgOiBudWxsOyBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgdSwgaSkgOiBuW3VdID0gZVt1XTsgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfVxuLyoqXG4gKiBXZWJwYWNrIGhhcyBidWcgZm9yIGltcG9ydCBsb29wLCB3aGljaCBpcyBub3QgdGhlIHNhbWUgYmVoYXZpb3IgYXMgRVMgbW9kdWxlLlxuICogV2hlbiB1dGlsLmpzIGltcG9ydHMgdGhlIFRyZWVOb2RlIGZvciB0cmVlIGdlbmVyYXRlIHdpbGwgY2F1c2UgdHJlZUNvbnRleHRUeXBlcyBiZSBlbXB0eS5cbiAqL1xuXG52YXIgVHJlZUNvbnRleHQgPSBleHBvcnRzLlRyZWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8qKiBJbnRlcm5hbCB1c2FnZSwgc2FmZSB0byByZW1vdmUuIERvIG5vdCB1c2UgaW4gcHJvZCAqL1xudmFyIFVuc3RhYmxlQ29udGV4dCA9IGV4cG9ydHMuVW5zdGFibGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztBQUN0REMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGVBQWUsR0FBR0YsT0FBTyxDQUFDRyxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3RELElBQUlDLEtBQUssR0FBR0MsdUJBQXVCLENBQUNSLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxTQUFTUyx3QkFBd0JBLENBQUNDLENBQUMsRUFBRTtFQUFFLElBQUksVUFBVSxJQUFJLE9BQU9DLE9BQU8sRUFBRSxPQUFPLElBQUk7RUFBRSxJQUFJQyxDQUFDLEdBQUcsSUFBSUQsT0FBTyxDQUFDLENBQUM7SUFBRUUsQ0FBQyxHQUFHLElBQUlGLE9BQU8sQ0FBQyxDQUFDO0VBQUUsT0FBTyxDQUFDRix3QkFBd0IsR0FBRyxTQUFTQSx3QkFBd0JBLENBQUNDLENBQUMsRUFBRTtJQUFFLE9BQU9BLENBQUMsR0FBR0csQ0FBQyxHQUFHRCxDQUFDO0VBQUUsQ0FBQyxFQUFFRixDQUFDLENBQUM7QUFBRTtBQUNuTyxTQUFTRix1QkFBdUJBLENBQUNFLENBQUMsRUFBRUUsQ0FBQyxFQUFFO0VBQUUsSUFBSSxDQUFDQSxDQUFDLElBQUlGLENBQUMsSUFBSUEsQ0FBQyxDQUFDSSxVQUFVLEVBQUUsT0FBT0osQ0FBQztFQUFFLElBQUksSUFBSSxLQUFLQSxDQUFDLElBQUksUUFBUSxJQUFJWCxPQUFPLENBQUNXLENBQUMsQ0FBQyxJQUFJLFVBQVUsSUFBSSxPQUFPQSxDQUFDLEVBQUUsT0FBTztJQUFFSyxPQUFPLEVBQUVMO0VBQUUsQ0FBQztFQUFFLElBQUlHLENBQUMsR0FBR0osd0JBQXdCLENBQUNHLENBQUMsQ0FBQztFQUFFLElBQUlDLENBQUMsSUFBSUEsQ0FBQyxDQUFDRyxHQUFHLENBQUNOLENBQUMsQ0FBQyxFQUFFLE9BQU9HLENBQUMsQ0FBQ0ksR0FBRyxDQUFDUCxDQUFDLENBQUM7RUFBRSxJQUFJUSxDQUFDLEdBQUc7TUFBRUMsU0FBUyxFQUFFO0lBQUssQ0FBQztJQUFFQyxDQUFDLEdBQUduQixNQUFNLENBQUNDLGNBQWMsSUFBSUQsTUFBTSxDQUFDb0Isd0JBQXdCO0VBQUUsS0FBSyxJQUFJQyxDQUFDLElBQUlaLENBQUMsRUFBRSxJQUFJLFNBQVMsS0FBS1ksQ0FBQyxJQUFJckIsTUFBTSxDQUFDc0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ2YsQ0FBQyxFQUFFWSxDQUFDLENBQUMsRUFBRTtJQUFFLElBQUlJLENBQUMsR0FBR04sQ0FBQyxHQUFHbkIsTUFBTSxDQUFDb0Isd0JBQXdCLENBQUNYLENBQUMsRUFBRVksQ0FBQyxDQUFDLEdBQUcsSUFBSTtJQUFFSSxDQUFDLEtBQUtBLENBQUMsQ0FBQ1QsR0FBRyxJQUFJUyxDQUFDLENBQUNDLEdBQUcsQ0FBQyxHQUFHMUIsTUFBTSxDQUFDQyxjQUFjLENBQUNnQixDQUFDLEVBQUVJLENBQUMsRUFBRUksQ0FBQyxDQUFDLEdBQUdSLENBQUMsQ0FBQ0ksQ0FBQyxDQUFDLEdBQUdaLENBQUMsQ0FBQ1ksQ0FBQyxDQUFDO0VBQUU7RUFBRSxPQUFPSixDQUFDLENBQUNILE9BQU8sR0FBR0wsQ0FBQyxFQUFFRyxDQUFDLElBQUlBLENBQUMsQ0FBQ2MsR0FBRyxDQUFDakIsQ0FBQyxFQUFFUSxDQUFDLENBQUMsRUFBRUEsQ0FBQztBQUFFO0FBQ2xsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJWixXQUFXLEdBQUdILE9BQU8sQ0FBQ0csV0FBVyxHQUFHLGFBQWFDLEtBQUssQ0FBQ3FCLGFBQWEsQ0FBQyxJQUFJLENBQUM7O0FBRTlFO0FBQ0EsSUFBSXZCLGVBQWUsR0FBR0YsT0FBTyxDQUFDRSxlQUFlLEdBQUcsYUFBYUUsS0FBSyxDQUFDcUIsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119