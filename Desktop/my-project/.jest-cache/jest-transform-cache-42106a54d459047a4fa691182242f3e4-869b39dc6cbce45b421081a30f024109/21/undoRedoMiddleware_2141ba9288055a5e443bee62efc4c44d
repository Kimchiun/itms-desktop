cabe43c1fa6a6f4d8f03da0ca9c9a57b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canRedo = exports.canUndo = exports.setupUndoRedoShortcuts = exports.undoRedoMiddleware = void 0;
const MAX_HISTORY_SIZE = 50;
const undoRedoMiddleware = store => {
    let history = {
        past: [],
        present: store.getState(),
        future: []
    };
    let isUndoRedoAction = false;
    return next => (action) => {
        // Undo/Redo 액션 처리
        if (action.type === 'UNDO') {
            if (history.past.length === 0)
                return;
            const previous = history.past[history.past.length - 1];
            const newPast = history.past.slice(0, history.past.length - 1);
            history = {
                past: newPast,
                present: previous,
                future: [history.present, ...history.future]
            };
            isUndoRedoAction = true;
            store.dispatch({ type: 'RESTORE_STATE', payload: previous });
            return;
        }
        if (action.type === 'REDO') {
            if (history.future.length === 0)
                return;
            const next = history.future[0];
            const newFuture = history.future.slice(1);
            history = {
                past: [...history.past, history.present],
                present: next,
                future: newFuture
            };
            isUndoRedoAction = true;
            store.dispatch({ type: 'RESTORE_STATE', payload: next });
            return;
        }
        // RESTORE_STATE 액션은 히스토리에 추가하지 않음
        if (action.type === 'RESTORE_STATE') {
            return next(action);
        }
        // 일반 액션 처리
        const result = next(action);
        if (!isUndoRedoAction) {
            const newPresent = store.getState();
            // 히스토리 크기 제한
            const newPast = [...history.past, history.present];
            if (newPast.length > MAX_HISTORY_SIZE) {
                newPast.shift();
            }
            history = {
                past: newPast,
                present: newPresent,
                future: []
            };
        }
        isUndoRedoAction = false;
        return result;
    };
};
exports.undoRedoMiddleware = undoRedoMiddleware;
// 키보드 단축키 처리
const setupUndoRedoShortcuts = (store) => {
    const handleKeyDown = (event) => {
        if (event.ctrlKey || event.metaKey) {
            if (event.key === 'z' && !event.shiftKey) {
                event.preventDefault();
                store.dispatch({ type: 'UNDO' });
            }
            else if ((event.key === 'y') || (event.key === 'z' && event.shiftKey)) {
                event.preventDefault();
                store.dispatch({ type: 'REDO' });
            }
        }
    };
    document.addEventListener('keydown', handleKeyDown);
    // 클린업 함수 반환
    return () => {
        document.removeEventListener('keydown', handleKeyDown);
    };
};
exports.setupUndoRedoShortcuts = setupUndoRedoShortcuts;
// Undo/Redo 가능 여부 확인
const canUndo = (state) => {
    // 실제 구현에서는 히스토리 상태를 확인
    return true;
};
exports.canUndo = canUndo;
const canRedo = (state) => {
    // 실제 구현에서는 히스토리 상태를 확인
    return true;
};
exports.canRedo = canRedo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvdW5kb1JlZG9NaWRkbGV3YXJlLnRzIiwibWFwcGluZ3MiOiI7OztBQXdCQSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUVyQixNQUFNLGtCQUFrQixHQUE4QixLQUFLLENBQUMsRUFBRTtJQUNuRSxJQUFJLE9BQU8sR0FBaUI7UUFDMUIsSUFBSSxFQUFFLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUN6QixNQUFNLEVBQUUsRUFBRTtLQUNYLENBQUM7SUFFRixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUU3QixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtRQUM3QixrQkFBa0I7UUFDbEIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQzNCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFBRSxPQUFPO1lBRXRDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRS9ELE9BQU8sR0FBRztnQkFDUixJQUFJLEVBQUUsT0FBTztnQkFDYixPQUFPLEVBQUUsUUFBUTtnQkFDakIsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7YUFDN0MsQ0FBQztZQUVGLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUN4QixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVB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QUcsRUFBRTtRQUNWLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbkJXLFFBQUEsc0JBQXNCLDBCQW1CakM7QUFFRixxQkFBcUI7QUFDZCxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWdCLEVBQVcsRUFBRTtJQUNuRCx1QkFBdUI7SUFDdkIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFIVyxRQUFBLE9BQU8sV0FHbEI7QUFFSyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWdCLEVBQVcsRUFBRTtJQUNuRCx1QkFBdUI7SUFDdkIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFIVyxRQUFBLE9BQU8sV0FHbEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvdW5kb1JlZG9NaWRkbGV3YXJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5cbi8vIFJvb3RTdGF0ZSDtg4DsnoXsnYQg7KeB7KCRIOygleydmO2VmOyXrCDsiJztmZgg7LC47KGwIOuwqeyngFxuaW50ZXJmYWNlIFJvb3RTdGF0ZSB7XG4gIHRlc3RjYXNlczogYW55O1xuICByZWxlYXNlczogYW55O1xuICBkYXNoYm9hcmQ6IGFueTtcbiAgZXhlY3V0aW9uczogYW55O1xuICBjb21tZW50czogYW55O1xuICBub3RpZmljYXRpb25zOiBhbnk7XG4gIHNlbGVjdGlvbjogYW55O1xuICB1c2VyczogYW55O1xufVxuXG5pbnRlcmZhY2UgSGlzdG9yeVN0YXRlIHtcbiAgcGFzdDogUm9vdFN0YXRlW107XG4gIHByZXNlbnQ6IFJvb3RTdGF0ZTtcbiAgZnV0dXJlOiBSb290U3RhdGVbXTtcbn1cblxuaW50ZXJmYWNlIFVuZG9SZWRvQWN0aW9uIHtcbiAgdHlwZTogJ1VORE8nIHwgJ1JFRE8nO1xufVxuXG5jb25zdCBNQVhfSElTVE9SWV9TSVpFID0gNTA7XG5cbmV4cG9ydCBjb25zdCB1bmRvUmVkb01pZGRsZXdhcmU6IE1pZGRsZXdhcmU8e30sIFJvb3RTdGF0ZT4gPSBzdG9yZSA9PiB7XG4gIGxldCBoaXN0b3J5OiBIaXN0b3J5U3RhdGUgPSB7XG4gICAgcGFzdDogW10sXG4gICAgcHJlc2VudDogc3RvcmUuZ2V0U3RhdGUoKSxcbiAgICBmdXR1cmU6IFtdXG4gIH07XG5cbiAgbGV0IGlzVW5kb1JlZG9BY3Rpb24gPSBmYWxzZTtcblxuICByZXR1cm4gbmV4dCA9PiAoYWN0aW9uOiBhbnkpID0+IHtcbiAgICAvLyBVbmRvL1JlZG8g7JWh7IWYIOyymOumrFxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VORE8nKSB7XG4gICAgICBpZiAoaGlzdG9yeS5wYXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgXG4gICAgICBjb25zdCBwcmV2aW91cyA9IGhpc3RvcnkucGFzdFtoaXN0b3J5LnBhc3QubGVuZ3RoIC0gMV07XG4gICAgICBjb25zdCBuZXdQYXN0ID0gaGlzdG9yeS5wYXN0LnNsaWNlKDAsIGhpc3RvcnkucGFzdC5sZW5ndGggLSAxKTtcbiAgICAgIFxuICAgICAgaGlzdG9yeSA9IHtcbiAgICAgICAgcGFzdDogbmV3UGFzdCxcbiAgICAgICAgcHJlc2VudDogcHJldmlvdXMsXG4gICAgICAgIGZ1dHVyZTogW2hpc3RvcnkucHJlc2VudCwgLi4uaGlzdG9yeS5mdXR1cmVdXG4gICAgICB9O1xuICAgICAgXG4gICAgICBpc1VuZG9SZWRvQWN0aW9uID0gdHJ1ZTtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ1JFU1RPUkVfU1RBVEUnLCBwYXlsb2FkOiBwcmV2aW91cyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdSRURPJykge1xuICAgICAgaWYgKGhpc3RvcnkuZnV0dXJlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgXG4gICAgICBjb25zdCBuZXh0ID0gaGlzdG9yeS5mdXR1cmVbMF07XG4gICAgICBjb25zdCBuZXdGdXR1cmUgPSBoaXN0b3J5LmZ1dHVyZS5zbGljZSgxKTtcbiAgICAgIFxuICAgICAgaGlzdG9yeSA9IHtcbiAgICAgICAgcGFzdDogWy4uLmhpc3RvcnkucGFzdCwgaGlzdG9yeS5wcmVzZW50XSxcbiAgICAgICAgcHJlc2VudDogbmV4dCxcbiAgICAgICAgZnV0dXJlOiBuZXdGdXR1cmVcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGlzVW5kb1JlZG9BY3Rpb24gPSB0cnVlO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnUkVTVE9SRV9TVEFURScsIHBheWxvYWQ6IG5leHQgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUkVTVE9SRV9TVEFURSDslaHshZjsnYAg7Z6I7Iqk7Yag66as7JeQIOy2lOqwgO2VmOyngCDslYrsnYxcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdSRVNUT1JFX1NUQVRFJykge1xuICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyDsnbzrsJgg7JWh7IWYIOyymOumrFxuICAgIGNvbnN0IHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcbiAgICBcbiAgICBpZiAoIWlzVW5kb1JlZG9BY3Rpb24pIHtcbiAgICAgIGNvbnN0IG5ld1ByZXNlbnQgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgXG4gICAgICAvLyDtnojsiqTthqDrpqwg7YGs6riwIOygnO2VnFxuICAgICAgY29uc3QgbmV3UGFzdCA9IFsuLi5oaXN0b3J5LnBhc3QsIGhpc3RvcnkucHJlc2VudF07XG4gICAgICBpZiAobmV3UGFzdC5sZW5ndGggPiBNQVhfSElTVE9SWV9TSVpFKSB7XG4gICAgICAgIG5ld1Bhc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaGlzdG9yeSA9IHtcbiAgICAgICAgcGFzdDogbmV3UGFzdCxcbiAgICAgICAgcHJlc2VudDogbmV3UHJlc2VudCxcbiAgICAgICAgZnV0dXJlOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgaXNVbmRvUmVkb0FjdGlvbiA9IGZhbHNlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG4vLyDtgqTrs7Trk5wg64uo7LaV7YKkIOyymOumrFxuZXhwb3J0IGNvbnN0IHNldHVwVW5kb1JlZG9TaG9ydGN1dHMgPSAoc3RvcmU6IGFueSkgPT4ge1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkge1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ3onICYmICFldmVudC5zaGlmdEtleSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICdVTkRPJyB9KTtcbiAgICAgIH0gZWxzZSBpZiAoKGV2ZW50LmtleSA9PT0gJ3knKSB8fCAoZXZlbnQua2V5ID09PSAneicgJiYgZXZlbnQuc2hpZnRLZXkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ1JFRE8nIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gIFxuICAvLyDtgbTrprDsl4Ug7ZWo7IiYIOuwmO2ZmFxuICByZXR1cm4gKCkgPT4ge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgfTtcbn07XG5cbi8vIFVuZG8vUmVkbyDqsIDriqUg7Jes67aAIO2ZleyduFxuZXhwb3J0IGNvbnN0IGNhblVuZG8gPSAoc3RhdGU6IFJvb3RTdGF0ZSk6IGJvb2xlYW4gPT4ge1xuICAvLyDsi6TsoJwg6rWs7ZiE7JeQ7ISc64qUIO2eiOyKpO2GoOumrCDsg4Htg5zrpbwg7ZmV7J24XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhblJlZG8gPSAoc3RhdGU6IFJvb3RTdGF0ZSk6IGJvb2xlYW4gPT4ge1xuICAvLyDsi6TsoJwg6rWs7ZiE7JeQ7ISc64qUIO2eiOyKpO2GoOumrCDsg4Htg5zrpbwg7ZmV7J24XG4gIHJldHVybiB0cnVlO1xufTsgIl0sInZlcnNpb24iOjN9