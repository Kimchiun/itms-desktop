{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/undoRedoMiddleware.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/undoRedoMiddleware.ts"],"sourcesContent":["import { Middleware } from 'redux';\n\n// RootState 타입을 직접 정의하여 순환 참조 방지\ninterface RootState {\n  testcases: any;\n  releases: any;\n  dashboard: any;\n  executions: any;\n  comments: any;\n  notifications: any;\n  selection: any;\n  users: any;\n}\n\ninterface HistoryState {\n  past: RootState[];\n  present: RootState;\n  future: RootState[];\n}\n\ninterface UndoRedoAction {\n  type: 'UNDO' | 'REDO';\n}\n\nconst MAX_HISTORY_SIZE = 50;\n\nexport const undoRedoMiddleware: Middleware<{}, RootState> = store => {\n  let history: HistoryState = {\n    past: [],\n    present: store.getState(),\n    future: []\n  };\n\n  let isUndoRedoAction = false;\n\n  return next => (action: any) => {\n    // Undo/Redo 액션 처리\n    if (action.type === 'UNDO') {\n      if (history.past.length === 0) return;\n      \n      const previous = history.past[history.past.length - 1];\n      const newPast = history.past.slice(0, history.past.length - 1);\n      \n      history = {\n        past: newPast,\n        present: previous,\n        future: [history.present, ...history.future]\n      };\n      \n      isUndoRedoAction = true;\n      store.dispatch({ type: 'RESTORE_STATE', payload: previous });\n      return;\n    }\n\n    if (action.type === 'REDO') {\n      if (history.future.length === 0) return;\n      \n      const next = history.future[0];\n      const newFuture = history.future.slice(1);\n      \n      history = {\n        past: [...history.past, history.present],\n        present: next,\n        future: newFuture\n      };\n      \n      isUndoRedoAction = true;\n      store.dispatch({ type: 'RESTORE_STATE', payload: next });\n      return;\n    }\n\n    // RESTORE_STATE 액션은 히스토리에 추가하지 않음\n    if (action.type === 'RESTORE_STATE') {\n      return next(action);\n    }\n\n    // 일반 액션 처리\n    const result = next(action);\n    \n    if (!isUndoRedoAction) {\n      const newPresent = store.getState();\n      \n      // 히스토리 크기 제한\n      const newPast = [...history.past, history.present];\n      if (newPast.length > MAX_HISTORY_SIZE) {\n        newPast.shift();\n      }\n      \n      history = {\n        past: newPast,\n        present: newPresent,\n        future: []\n      };\n    }\n    \n    isUndoRedoAction = false;\n    return result;\n  };\n};\n\n// 키보드 단축키 처리\nexport const setupUndoRedoShortcuts = (store: any) => {\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.ctrlKey || event.metaKey) {\n      if (event.key === 'z' && !event.shiftKey) {\n        event.preventDefault();\n        store.dispatch({ type: 'UNDO' });\n      } else if ((event.key === 'y') || (event.key === 'z' && event.shiftKey)) {\n        event.preventDefault();\n        store.dispatch({ type: 'REDO' });\n      }\n    }\n  };\n\n  document.addEventListener('keydown', handleKeyDown);\n  \n  // 클린업 함수 반환\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown);\n  };\n};\n\n// Undo/Redo 가능 여부 확인\nexport const canUndo = (state: RootState): boolean => {\n  // 실제 구현에서는 히스토리 상태를 확인\n  return true;\n};\n\nexport const canRedo = (state: RootState): boolean => {\n  // 실제 구현에서는 히스토리 상태를 확인\n  return true;\n}; "],"version":3}