5fc2b6a5a902429537fbac515f057815
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const Input_1 = __importDefault(require("./Input"));
const Button_1 = __importDefault(require("./Button"));
const StyledForm = styled_components_1.default.form `
  display: flex;
  flex-direction: ${({ $layout }) => $layout === 'horizontal' ? 'row' : 'column'};
  gap: 16px;
  background: ${({ $variant, theme }) => $variant === 'bordered' ? theme.color.background : 'none'};
  border-radius: ${({ theme }) => theme.radius.md};
  padding: ${({ $variant }) => $variant === 'bordered' ? '16px' : '0'};
`;
const FieldWrapper = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: 4px;
`;
const Label = styled_components_1.default.label `
  font-size: 15px;
  font-weight: 500;
  color: #22223b;
`;
const Required = styled_components_1.default.span `
  color: #ef4444;
  margin-left: 2px;
`;
const StyledTextarea = styled_components_1.default.textarea `
  width: 100%;
  min-height: 80px;
  padding: 8px 12px;
  font-size: 16px;
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  font-family: inherit;
  color: #22223b;
  background: #fff;
  transition: border 0.15s;
  &:focus-visible {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
    border-color: #2563eb;
    z-index: 1;
  }
`;
const StyledSelect = styled_components_1.default.select `
  width: 100%;
  padding: 8px 12px;
  font-size: 16px;
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  font-family: inherit;
  color: #22223b;
  background: #fff;
  transition: border 0.15s;
  &:focus-visible {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
    border-color: #2563eb;
    z-index: 1;
  }
`;
const Form = ({ fields, initialValues = {}, onSubmit, layout = 'vertical', variant = 'default', submitLabel = '저장', style, ariaLabel, ariaDescribedby, id }) => {
    const [values, setValues] = react_1.default.useState(initialValues);
    const formId = id || react_1.default.useId();
    const handleChange = (e) => {
        setValues(v => ({ ...v, [e.target.name]: e.target.value }));
    };
    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit(values);
    };
    return ((0, jsx_runtime_1.jsxs)(StyledForm, { "$layout": layout, "$variant": variant, onSubmit: handleSubmit, style: style, role: "form", "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, id: formId, children: [fields.map(field => {
                const inputId = `${formId}-${field.name}`;
                return ((0, jsx_runtime_1.jsxs)(FieldWrapper, { children: [(0, jsx_runtime_1.jsxs)(Label, { htmlFor: inputId, children: [field.label, field.required && (0, jsx_runtime_1.jsx)(Required, { "aria-hidden": "true", children: "*" })] }), field.type === 'textarea' ? ((0, jsx_runtime_1.jsx)(StyledTextarea, { id: inputId, name: field.name, value: values[field.name] ?? '', onChange: handleChange, placeholder: field.placeholder, "aria-label": field.label, "aria-required": field.required, required: field.required })) : field.type === 'select' && field.options ? ((0, jsx_runtime_1.jsx)(StyledSelect, { id: inputId, name: field.name, value: values[field.name] ?? '', onChange: handleChange, "aria-label": field.label, "aria-required": field.required, required: field.required, children: field.options.map(opt => ((0, jsx_runtime_1.jsx)("option", { value: opt.value, children: opt.label }, opt.value))) })) : ((0, jsx_runtime_1.jsx)(Input_1.default, { id: inputId, name: field.name, type: field.type, value: values[field.name] ?? '', onChange: handleChange, placeholder: field.placeholder, "aria-label": field.label, "aria-required": field.required, required: field.required }))] }, field.name));
            }), (0, jsx_runtime_1.jsx)(Button_1.default, { type: "submit", "aria-label": submitLabel, children: submitLabel })] }));
};
exports.default = Form;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,