{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/comments/repositories/commentRepository.ts","mappings":";;;;;;AACA,yFAAwF;AAE3E,QAAA,iBAAiB,GAAG;IAC/B,KAAK,CAAC,MAAM,CAAC,OAAwD;QACnE,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,kBAAQ,CAAC,KAAK,CACjC;uDACiD,EACjD;YACE,OAAO,CAAC,UAAU;YAClB,OAAO,CAAC,QAAQ;YAChB,OAAO,CAAC,MAAM;YACd,OAAO,CAAC,OAAO;YACf,OAAO,CAAC,QAAQ;YAChB,GAAG;YACH,GAAG;SACJ,CACF,CAAC;QACF,OAAO,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IACD,KAAK,CAAC,YAAY,CAAC,UAAkB,EAAE,QAAgB;QACrD,MAAM,MAAM,GAAG,MAAM,kBAAQ,CAAC,KAAK,CACjC,0FAA0F,EAC1F,CAAC,UAAU,EAAE,QAAQ,CAAC,CACvB,CAAC;QACF,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,OAAe,EAAE,QAAkB;QAC1D,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,MAAM,GAAG,MAAM,kBAAQ,CAAC,KAAK,CACjC,4FAA4F,EAC5F,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAC7B,CAAC;QACF,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QAC1C,OAAO,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,MAAM,GAAG,MAAM,kBAAQ,CAAC,KAAK,CACjC,oCAAoC,EACpC,CAAC,EAAE,CAAC,CACL,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACF,CAAC;AAEF,SAAS,eAAe,CAAC,GAAQ;IAC/B,OAAO;QACL,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,UAAU,EAAE,GAAG,CAAC,WAAW;QAC3B,QAAQ,EAAE,GAAG,CAAC,SAAS;QACvB,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,QAAQ,EAAE,GAAG,CAAC,QAAQ,IAAI,EAAE;QAC5B,SAAS,EAAE,GAAG,CAAC,UAAU;QACzB,SAAS,EAAE,GAAG,CAAC,UAAU;KAC1B,CAAC;AACJ,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/comments/repositories/commentRepository.ts"],"sourcesContent":["import { Comment } from '../models/Comment';\nimport pgClient, { ensurePgConnected } from '../../../infrastructure/database/pgClient';\n\nexport const commentRepository = {\n  async insert(comment: Omit<Comment, 'id' | 'createdAt' | 'updatedAt'>): Promise<Comment> {\n    const now = new Date();\n    const result = await pgClient.query(\n      `INSERT INTO comments (object_type, object_id, author, content, mentions, created_at, updated_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,\n      [\n        comment.objectType,\n        comment.objectId,\n        comment.author,\n        comment.content,\n        comment.mentions,\n        now,\n        now\n      ]\n    );\n    return mapRowToComment(result.rows[0]);\n  },\n  async findByObject(objectType: string, objectId: number): Promise<Comment[]> {\n    const result = await pgClient.query(\n      `SELECT * FROM comments WHERE object_type = $1 AND object_id = $2 ORDER BY created_at ASC`,\n      [objectType, objectId]\n    );\n    return result.rows.map(mapRowToComment);\n  },\n  async update(id: number, content: string, mentions: string[]): Promise<Comment | null> {\n    const now = new Date();\n    const result = await pgClient.query(\n      `UPDATE comments SET content = $1, mentions = $2, updated_at = $3 WHERE id = $4 RETURNING *`,\n      [content, mentions, now, id]\n    );\n    if (result.rows.length === 0) return null;\n    return mapRowToComment(result.rows[0]);\n  },\n  async delete(id: number): Promise<boolean> {\n    const result = await pgClient.query(\n      `DELETE FROM comments WHERE id = $1`,\n      [id]\n    );\n    return (result.rowCount ?? 0) > 0;\n  },\n};\n\nfunction mapRowToComment(row: any): Comment {\n  return {\n    id: row.id,\n    objectType: row.object_type,\n    objectId: row.object_id,\n    author: row.author,\n    content: row.content,\n    mentions: row.mentions || [],\n    createdAt: row.created_at,\n    updatedAt: row.updated_at,\n  };\n} "],"version":3}