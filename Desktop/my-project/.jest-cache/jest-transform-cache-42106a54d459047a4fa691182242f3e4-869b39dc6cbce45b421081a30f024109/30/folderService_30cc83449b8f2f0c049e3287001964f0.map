{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/folders/services/folderService.ts"],"sourcesContent":["import * as folderRepository from '../repositories/folderRepository';\nimport { Folder, FolderTree, CreateFolderRequest, UpdateFolderRequest, MoveFolderRequest, MoveTestCaseRequest } from '../models/Folder';\n\nexport async function createFolder(request: CreateFolderRequest): Promise<Folder> {\n    // 순환 참조 검사\n    if (request.parentId) {\n        const hasCircularReference = await folderRepository.checkCircularReference(0, request.parentId);\n        if (hasCircularReference) {\n            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n        }\n    }\n    \n    return await folderRepository.createFolder({\n        name: request.name,\n        description: request.description,\n        parentId: request.parentId,\n        createdBy: request.createdBy\n    });\n}\n\nexport async function getFolderById(id: number): Promise<Folder | null> {\n    return await folderRepository.getFolderById(id);\n}\n\nexport async function getAllFolders(): Promise<Folder[]> {\n    return await folderRepository.getAllFolders();\n}\n\nexport async function getFolderTree(): Promise<FolderTree[]> {\n    return await folderRepository.getFolderTree();\n}\n\nexport async function updateFolder(id: number, request: UpdateFolderRequest): Promise<Folder | null> {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n        throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 순환 참조 검사 (parentId가 변경되는 경우)\n    if (request.parentId !== undefined && request.parentId !== folder.parentId) {\n        const hasCircularReference = await folderRepository.checkCircularReference(id, request.parentId);\n        if (hasCircularReference) {\n            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n        }\n    }\n    \n    return await folderRepository.updateFolder(id, request);\n}\n\nexport async function deleteFolder(id: number): Promise<boolean> {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n        throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 루트 폴더는 삭제 불가\n    if (folder.name === 'Root') {\n        throw new Error('루트 폴더는 삭제할 수 없습니다.');\n    }\n    \n    return await folderRepository.deleteFolder(id);\n}\n\nexport async function moveFolder(id: number, request: MoveFolderRequest): Promise<Folder | null> {\n    const folder = await folderRepository.getFolderById(id);\n    if (!folder) {\n        throw new Error('폴더를 찾을 수 없습니다.');\n    }\n    \n    // 순환 참조 검사\n    if (request.targetParentId !== undefined) {\n        const hasCircularReference = await folderRepository.checkCircularReference(id, request.targetParentId);\n        if (hasCircularReference) {\n            throw new Error('순환 참조가 감지되었습니다. 폴더를 이동할 수 없습니다.');\n        }\n    }\n    \n    return await folderRepository.updateFolder(id, {\n        parentId: request.targetParentId\n    });\n}\n\nexport async function getTestCasesInFolder(folderId: number): Promise<number[]> {\n    return await folderRepository.getTestCasesInFolder(folderId);\n}\n\nexport async function addTestCaseToFolder(testCaseId: number, folderId: number): Promise<void> {\n    await folderRepository.addTestCaseToFolder(testCaseId, folderId);\n}\n\nexport async function removeTestCaseFromFolder(testCaseId: number, folderId: number): Promise<void> {\n    await folderRepository.removeTestCaseFromFolder(testCaseId, folderId);\n}\n\nexport async function moveTestCase(testCaseId: number, fromFolderId: number, toFolderId: number): Promise<void> {\n    await folderRepository.moveTestCase(testCaseId, fromFolderId, toFolderId);\n} "],"version":3}