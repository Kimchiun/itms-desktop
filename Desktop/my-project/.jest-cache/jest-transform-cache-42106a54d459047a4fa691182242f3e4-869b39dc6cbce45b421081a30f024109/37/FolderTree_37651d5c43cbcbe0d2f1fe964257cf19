a6fd8d482092d82194eec5a34d828c6b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const rc_tree_1 = __importDefault(require("rc-tree"));
require("rc-tree/assets/index.css");
const styled_components_1 = __importDefault(require("styled-components"));
const react_redux_1 = require("react-redux");
const selectionSlice_1 = require("../store/selectionSlice");
const Typography_1 = __importDefault(require("../../../shared/components/Typography"));
const Button_1 = __importDefault(require("../../../shared/components/Button"));
const FolderModal_1 = __importDefault(require("./FolderModal"));
const ContextMenu_1 = __importStar(require("./ContextMenu"));
const TreeContainer = styled_components_1.default.div `
  .rc-tree {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 16px;
  }

  .rc-tree-node-content-wrapper {
    padding: 8px 12px;
    border-radius: 4px;
    margin: 2px 0;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .rc-tree-node-content-wrapper:hover {
    background: #f3f4f6;
  }

  .rc-tree-node-selected {
    background: #dbeafe;
  }

  .rc-tree-title {
    font-size: 14px;
    color: #374151;
    flex: 1;
  }

  .folder-checkbox {
    width: 16px;
    height: 16px;
    cursor: pointer;
    margin-right: 8px;
  }
`;
const TreeHeader = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 12px;
  border-bottom: 1px solid #e5e7eb;
`;
const TreeTitle = (0, styled_components_1.default)(Typography_1.default) `
  font-weight: 600;
  color: #111827;
`;
const SelectionInfo = styled_components_1.default.div `
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 14px;
  color: #64748b;
`;
const SelectAllButton = styled_components_1.default.button `
  background: none;
  border: none;
  color: #3b82f6;
  cursor: pointer;
  font-size: 14px;
  text-decoration: underline;

  &:hover {
    color: #2563eb;
  }
`;
const FolderTreeComponent = ({ onFolderSelect, selectedFolderId }) => {
    const dispatch = (0, react_redux_1.useDispatch)();
    const { selectedFolders } = (0, react_redux_1.useSelector)((state) => state.selection);
    const [treeData, setTreeData] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [contextMenu, setContextMenu] = (0, react_1.useState)({ isOpen: false, x: 0, y: 0 });
    const [modalState, setModalState] = (0, react_1.useState)({ isOpen: false, mode: 'create' });
    (0, react_1.useEffect)(() => {
        fetchFolderTree();
    }, []);
    const fetchFolderTree = async () => {
        try {
            const response = await fetch('http://localhost:3000/api/folders/tree');
            if (response.ok) {
                const data = await response.json();
                const transformedData = transformFolderData(data);
                setTreeData(transformedData);
            }
        }
        catch (error) {
            console.error('폴더 트리 로드 실패:', error);
        }
        finally {
            setLoading(false);
        }
    };
    const transformFolderData = (folders) => {
        return folders.map(folder => ({
            key: folder.id.toString(),
            title: `${folder.name} (${folder.testCaseCount || 0})`,
            children: folder.children ? transformFolderData(folder.children) : undefined,
            testCaseCount: folder.testCaseCount
        }));
    };
    const handleTreeSelect = (selectedKeys) => {
        if (selectedKeys.length > 0) {
            const folderId = parseInt(selectedKeys[0].toString());
            onFolderSelect(folderId);
        }
    };
    const handleFolderCheckbox = (folderId, checked) => {
        if (checked) {
            dispatch((0, selectionSlice_1.selectFolder)(folderId));
        }
        else {
            dispatch((0, selectionSlice_1.deselectFolder)(folderId));
        }
    };
    const handleSelectAllFolders = () => {
        const allFolderIds = getAllFolderIds(treeData);
        allFolderIds.forEach(folderId => {
            dispatch((0, selectionSlice_1.selectFolder)(folderId));
        });
    };
    const handleDeselectAllFolders = () => {
        dispatch((0, selectionSlice_1.clearFolderSelection)());
    };
    const getAllFolderIds = (data) => {
        const ids = [];
        const traverse = (items) => {
            items.forEach(item => {
                ids.push(parseInt(item.key));
                if (item.children) {
                    traverse(item.children);
                }
            });
        };
        traverse(data);
        return ids;
    };
    const handleContextMenu = (event, folderId) => {
        event.preventDefault();
        setContextMenu({
            isOpen: true,
            x: event.clientX,
            y: event.clientY,
            folderId
        });
    };
    const handleCreateFolder = () => {
        setModalState({ isOpen: true, mode: 'create' });
        setContextMenu({ isOpen: false, x: 0, y: 0 });
    };
    const handleEditFolder = () => {
        setModalState({ isOpen: true, mode: 'edit', folder: { id: contextMenu.folderId } });
        setContextMenu({ isOpen: false, x: 0, y: 0 });
    };
    const handleDeleteFolder = () => {
        setModalState({ isOpen: true, mode: 'delete', folder: { id: contextMenu.folderId } });
        setContextMenu({ isOpen: false, x: 0, y: 0 });
    };
    const handleModalSubmit = async (data) => {
        try {
            const { mode, folder } = modalState;
            if (mode === 'create') {
                const response = await fetch('http://localhost:3000/api/folders', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        name: data.name,
                        description: data.description,
                        parentId: data.parentId,
                        createdBy: 'testuser'
                    })
                });
                if (response.ok) {
                    await fetchFolderTree();
                }
            }
            else if (mode === 'edit') {
                const response = await fetch(`http://localhost:3000/api/folders/${folder.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        name: data.name,
                        description: data.description,
                        parentId: data.parentId,
                        updatedBy: 'testuser'
                    })
                });
                if (response.ok) {
                    await fetchFolderTree();
                }
            }
            else if (mode === 'delete') {
                const response = await fetch(`http://localhost:3000/api/folders/${folder.id}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    await fetchFolderTree();
                }
            }
        }
        catch (error) {
            console.error('폴더 작업 실패:', error);
        }
    };
    if (loading) {
        return (0, jsx_runtime_1.jsx)("div", { children: "\uD3F4\uB354 \uB85C\uB529 \uC911..." });
    }
    return ((0, jsx_runtime_1.jsxs)(TreeContainer, { children: [(0, jsx_runtime_1.jsxs)(TreeHeader, { children: [(0, jsx_runtime_1.jsx)(TreeTitle, { "$variant": "h4", children: "\uD3F4\uB354 \uAD6C\uC870" }), (0, jsx_runtime_1.jsx)("div", { style: { display: 'flex', gap: '8px' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { size: "sm", onClick: handleCreateFolder, children: "\uC0C8 \uD3F4\uB354" }) })] }), selectedFolders.length > 0 && ((0, jsx_runtime_1.jsxs)(SelectionInfo, { children: [(0, jsx_runtime_1.jsxs)("span", { children: [selectedFolders.length, "\uAC1C \uD3F4\uB354 \uC120\uD0DD\uB428"] }), (0, jsx_runtime_1.jsx)(SelectAllButton, { onClick: handleDeselectAllFolders, children: "\uC120\uD0DD \uD574\uC81C" })] })), (0, jsx_runtime_1.jsx)(rc_tree_1.default, { treeData: treeData, selectedKeys: selectedFolderId ? [selectedFolderId.toString()] : [], onSelect: handleTreeSelect, onRightClick: ({ node }) => {
                    const folderId = parseInt(node.key.toString());
                    // 컨텍스트 메뉴는 별도로 처리
                }, showLine: true, showIcon: true, titleRender: (nodeData) => ((0, jsx_runtime_1.jsxs)("div", { style: { display: 'flex', alignItems: 'center', gap: '8px' }, children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", className: "folder-checkbox", checked: selectedFolders.includes(parseInt(nodeData.key.toString())), onChange: (e) => handleFolderCheckbox(parseInt(nodeData.key.toString()), e.target.checked), onClick: (e) => e.stopPropagation() }), (0, jsx_runtime_1.jsx)("span", { children: nodeData.title })] })) }), (0, jsx_runtime_1.jsxs)(ContextMenu_1.default, { x: contextMenu.x, y: contextMenu.y, isOpen: contextMenu.isOpen, onClose: () => setContextMenu({ isOpen: false, x: 0, y: 0 }), children: [(0, jsx_runtime_1.jsx)(ContextMenu_1.MenuItem, { onClick: handleCreateFolder, children: "\uC0C8 \uD3F4\uB354 \uC0DD\uC131" }), contextMenu.folderId && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ContextMenu_1.Divider, {}), (0, jsx_runtime_1.jsx)(ContextMenu_1.MenuItem, { onClick: handleEditFolder, children: "\uD3F4\uB354 \uC218\uC815" }), (0, jsx_runtime_1.jsx)(ContextMenu_1.MenuItem, { onClick: handleDeleteFolder, children: "\uD3F4\uB354 \uC0AD\uC81C" })] }))] }), (0, jsx_runtime_1.jsx)(FolderModal_1.default, { isOpen: modalState.isOpen, onClose: () => setModalState({ isOpen: false, mode: 'create' }), onSubmit: handleModalSubmit, mode: modalState.mode, folder: modalState.folder })] }));
};
exports.default = FolderTreeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,