{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/TestCaseManagement/components/FolderTree.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/TestCaseManagement/components/FolderTree.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Tree from 'rc-tree';\nimport 'rc-tree/assets/index.css';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../store';\nimport { selectFolder, deselectFolder, clearFolderSelection } from '../store/selectionSlice';\nimport Typography from '../../../shared/components/Typography';\nimport Button from '../../../shared/components/Button';\nimport FolderModal from './FolderModal';\nimport ContextMenu, { MenuItem, Divider } from './ContextMenu';\n\nconst TreeContainer = styled.div`\n  .rc-tree {\n    background: white;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    padding: 16px;\n  }\n\n  .rc-tree-node-content-wrapper {\n    padding: 8px 12px;\n    border-radius: 4px;\n    margin: 2px 0;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .rc-tree-node-content-wrapper:hover {\n    background: #f3f4f6;\n  }\n\n  .rc-tree-node-selected {\n    background: #dbeafe;\n  }\n\n  .rc-tree-title {\n    font-size: 14px;\n    color: #374151;\n    flex: 1;\n  }\n\n  .folder-checkbox {\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n    margin-right: 8px;\n  }\n`;\n\nconst TreeHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #e5e7eb;\n`;\n\nconst TreeTitle = styled(Typography)`\n  font-weight: 600;\n  color: #111827;\n`;\n\nconst SelectionInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 14px;\n  color: #64748b;\n`;\n\nconst SelectAllButton = styled.button`\n  background: none;\n  border: none;\n  color: #3b82f6;\n  cursor: pointer;\n  font-size: 14px;\n  text-decoration: underline;\n\n  &:hover {\n    color: #2563eb;\n  }\n`;\n\ninterface FolderTreeData {\n  key: string;\n  title: string;\n  children?: FolderTreeData[];\n  testCaseCount?: number;\n}\n\ninterface FolderTreeProps {\n  onFolderSelect: (folderId: number) => void;\n  selectedFolderId?: number;\n}\n\nconst FolderTreeComponent: React.FC<FolderTreeProps> = ({ onFolderSelect, selectedFolderId }) => {\n  const dispatch = useDispatch();\n  const { selectedFolders } = useSelector((state: RootState) => state.selection);\n  const [treeData, setTreeData] = useState<FolderTreeData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [contextMenu, setContextMenu] = useState<{\n    isOpen: boolean;\n    x: number;\n    y: number;\n    folderId?: number;\n  }>({ isOpen: false, x: 0, y: 0 });\n  const [modalState, setModalState] = useState<{\n    isOpen: boolean;\n    mode: 'create' | 'edit' | 'delete';\n    folder?: any;\n  }>({ isOpen: false, mode: 'create' });\n\n  useEffect(() => {\n    fetchFolderTree();\n  }, []);\n\n  const fetchFolderTree = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/api/folders/tree');\n      if (response.ok) {\n        const data = await response.json();\n        const transformedData = transformFolderData(data);\n        setTreeData(transformedData);\n      }\n    } catch (error) {\n      console.error('폴더 트리 로드 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const transformFolderData = (folders: any[]): FolderTreeData[] => {\n    return folders.map(folder => ({\n      key: folder.id.toString(),\n      title: `${folder.name} (${folder.testCaseCount || 0})`,\n      children: folder.children ? transformFolderData(folder.children) : undefined,\n      testCaseCount: folder.testCaseCount\n    }));\n  };\n\n  const handleTreeSelect = (selectedKeys: React.Key[]) => {\n    if (selectedKeys.length > 0) {\n      const folderId = parseInt(selectedKeys[0].toString());\n      onFolderSelect(folderId);\n    }\n  };\n\n  const handleFolderCheckbox = (folderId: number, checked: boolean) => {\n    if (checked) {\n      dispatch(selectFolder(folderId));\n    } else {\n      dispatch(deselectFolder(folderId));\n    }\n  };\n\n  const handleSelectAllFolders = () => {\n    const allFolderIds = getAllFolderIds(treeData);\n    allFolderIds.forEach(folderId => {\n      dispatch(selectFolder(folderId));\n    });\n  };\n\n  const handleDeselectAllFolders = () => {\n    dispatch(clearFolderSelection());\n  };\n\n  const getAllFolderIds = (data: FolderTreeData[]): number[] => {\n    const ids: number[] = [];\n    const traverse = (items: FolderTreeData[]) => {\n      items.forEach(item => {\n        ids.push(parseInt(item.key));\n        if (item.children) {\n          traverse(item.children);\n        }\n      });\n    };\n    traverse(data);\n    return ids;\n  };\n\n  const handleContextMenu = (event: React.MouseEvent, folderId?: number) => {\n    event.preventDefault();\n    setContextMenu({\n      isOpen: true,\n      x: event.clientX,\n      y: event.clientY,\n      folderId\n    });\n  };\n\n  const handleCreateFolder = () => {\n    setModalState({ isOpen: true, mode: 'create' });\n    setContextMenu({ isOpen: false, x: 0, y: 0 });\n  };\n\n  const handleEditFolder = () => {\n    setModalState({ isOpen: true, mode: 'edit', folder: { id: contextMenu.folderId } });\n    setContextMenu({ isOpen: false, x: 0, y: 0 });\n  };\n\n  const handleDeleteFolder = () => {\n    setModalState({ isOpen: true, mode: 'delete', folder: { id: contextMenu.folderId } });\n    setContextMenu({ isOpen: false, x: 0, y: 0 });\n  };\n\n  const handleModalSubmit = async (data: { name: string; description?: string; parentId?: number }) => {\n    try {\n      const { mode, folder } = modalState;\n      \n      if (mode === 'create') {\n        const response = await fetch('http://localhost:3000/api/folders', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: data.name,\n            description: data.description,\n            parentId: data.parentId,\n            createdBy: 'testuser'\n          })\n        });\n        if (response.ok) {\n          await fetchFolderTree();\n        }\n      } else if (mode === 'edit') {\n        const response = await fetch(`http://localhost:3000/api/folders/${folder.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: data.name,\n            description: data.description,\n            parentId: data.parentId,\n            updatedBy: 'testuser'\n          })\n        });\n        if (response.ok) {\n          await fetchFolderTree();\n        }\n      } else if (mode === 'delete') {\n        const response = await fetch(`http://localhost:3000/api/folders/${folder.id}`, {\n          method: 'DELETE'\n        });\n        if (response.ok) {\n          await fetchFolderTree();\n        }\n      }\n    } catch (error) {\n      console.error('폴더 작업 실패:', error);\n    }\n  };\n\n  if (loading) {\n    return <div>폴더 로딩 중...</div>;\n  }\n\n  return (\n    <TreeContainer>\n      <TreeHeader>\n        <TreeTitle $variant=\"h4\">폴더 구조</TreeTitle>\n        <div style={{ display: 'flex', gap: '8px' }}>\n          <Button size=\"sm\" onClick={handleCreateFolder}>\n            새 폴더\n          </Button>\n        </div>\n      </TreeHeader>\n\n      {selectedFolders.length > 0 && (\n        <SelectionInfo>\n          <span>{selectedFolders.length}개 폴더 선택됨</span>\n          <SelectAllButton onClick={handleDeselectAllFolders}>\n            선택 해제\n          </SelectAllButton>\n        </SelectionInfo>\n      )}\n\n      <Tree\n        treeData={treeData}\n        selectedKeys={selectedFolderId ? [selectedFolderId.toString()] : []}\n        onSelect={handleTreeSelect}\n        onRightClick={({ node }) => {\n          const folderId = parseInt(node.key.toString());\n          // 컨텍스트 메뉴는 별도로 처리\n        }}\n        showLine\n        showIcon\n        titleRender={(nodeData) => (\n          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n            <input\n              type=\"checkbox\"\n              className=\"folder-checkbox\"\n              checked={selectedFolders.includes(parseInt(nodeData.key.toString()))}\n              onChange={(e) => handleFolderCheckbox(parseInt(nodeData.key.toString()), e.target.checked)}\n              onClick={(e) => e.stopPropagation()}\n            />\n            <span>{nodeData.title}</span>\n          </div>\n        )}\n      />\n\n      <ContextMenu\n        x={contextMenu.x}\n        y={contextMenu.y}\n        isOpen={contextMenu.isOpen}\n        onClose={() => setContextMenu({ isOpen: false, x: 0, y: 0 })}\n      >\n        <MenuItem onClick={handleCreateFolder}>\n          새 폴더 생성\n        </MenuItem>\n        {contextMenu.folderId && (\n          <>\n            <Divider />\n            <MenuItem onClick={handleEditFolder}>\n              폴더 수정\n            </MenuItem>\n            <MenuItem onClick={handleDeleteFolder}>\n              폴더 삭제\n            </MenuItem>\n          </>\n        )}\n      </ContextMenu>\n\n      <FolderModal\n        isOpen={modalState.isOpen}\n        onClose={() => setModalState({ isOpen: false, mode: 'create' })}\n        onSubmit={handleModalSubmit}\n        mode={modalState.mode}\n        folder={modalState.folder}\n      />\n    </TreeContainer>\n  );\n};\n\nexport default FolderTreeComponent; "],"version":3}