969d0aaf3b95bf83dbc54c0d73999ebb
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// axios 모킹
jest.mock('../src/renderer/utils/axios', () => ({
    get: jest.fn()
}));
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const styled_components_1 = require("styled-components");
const toolkit_1 = require("@reduxjs/toolkit");
const ReleaseList_1 = __importDefault(require("../src/renderer/features/Dashboard/components/ReleaseList"));
const dashboardLayoutSlice_1 = __importDefault(require("../src/renderer/store/dashboardLayoutSlice"));
const theme_1 = require("../src/renderer/shared/theme");
require("@testing-library/jest-dom");
const mockAxios = require('../src/renderer/utils/axios');
// 테스트용 스토어 설정
const createTestStore = (initialState = {}) => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            dashboardLayout: dashboardLayoutSlice_1.default
        },
        preloadedState: {
            dashboardLayout: {
                leftPanel: { isCollapsed: false, width: 280 },
                rightPanel: { isCollapsed: false, width: 320 },
                centerPanel: { isFullWidth: false },
                activeTab: 'overview',
                selectedReleaseId: null,
                ...initialState
            }
        }
    });
};
// 컴포넌트 렌더링 헬퍼
const renderReleaseList = (initialState = {}) => {
    const store = createTestStore(initialState);
    const result = (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: store, children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: (0, jsx_runtime_1.jsx)(ReleaseList_1.default, {}) }) }));
    return { ...result, store };
};
const mockReleases = [
    { id: '1', title: 'v2.1.0 - 기능 개선', status: 'active', description: '새로운 기능 추가' },
    { id: '2', title: 'v2.0.5 - 버그 수정', status: 'pending', description: '중요한 버그 수정' },
    { id: '3', title: 'v2.0.4 - 보안 패치', status: 'completed', description: '보안 취약점 수정' },
    { id: '4', title: 'v2.0.3 - 성능 최적화', status: 'completed', description: '성능 개선' }
];
describe('ReleaseList - 릴리즈 리스트/검색/전환 기능', () => {
    beforeEach(() => {
        mockAxios.get.mockClear();
    });
    describe('기본 렌더링 테스트', () => {
        it('릴리즈 목록이 정상적으로 로드되어야 함', async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            // 로딩 상태 확인
            expect(react_1.screen.getByText('로딩 중...')).toBeInTheDocument();
            // 데이터 로드 후 확인
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
                expect(react_1.screen.getByText('v2.0.5 - 버그 수정')).toBeInTheDocument();
                expect(react_1.screen.getByText('v2.0.4 - 보안 패치')).toBeInTheDocument();
                expect(react_1.screen.getByText('v2.0.3 - 성능 최적화')).toBeInTheDocument();
            });
        });
        it('API 호출이 정상적으로 이루어져야 함', async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            expect(mockAxios.get).toHaveBeenCalledWith('/api/releases');
        });
        it('API 오류 시 빈 목록을 표시해야 함', async () => {
            mockAxios.get.mockRejectedValue(new Error('API Error'));
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('릴리즈가 없습니다.')).toBeInTheDocument();
            });
        });
    });
    describe('검색 기능 테스트', () => {
        beforeEach(async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
        });
        it('검색어 입력 시 필터링이 정상 동작해야 함', async () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            // 검색어 입력
            react_1.fireEvent.change(searchInput, { target: { value: '기능' } });
            // 필터링 결과 확인
            expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            expect(react_1.screen.queryByText('v2.0.5 - 버그 수정')).not.toBeInTheDocument();
        });
        it('대소문자 구분 없이 검색이 동작해야 함', async () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            // 대문자로 검색
            react_1.fireEvent.change(searchInput, { target: { value: 'V2.1' } });
            // 필터링 결과 확인
            expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
        });
        it('설명에서도 검색이 가능해야 함', async () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            // 설명에서 검색
            react_1.fireEvent.change(searchInput, { target: { value: '새로운' } });
            // 필터링 결과 확인
            expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
        });
    });
    describe('필터 기능 테스트', () => {
        beforeEach(async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
        });
        it('전체 필터 버튼이 정상 동작해야 함', () => {
            const allFilterButton = react_1.screen.getByTestId('release-filter-all');
            react_1.fireEvent.click(allFilterButton);
            // 모든 릴리즈가 표시되어야 함
            expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            expect(react_1.screen.getByText('v2.0.5 - 버그 수정')).toBeInTheDocument();
            expect(react_1.screen.getByText('v2.0.4 - 보안 패치')).toBeInTheDocument();
            expect(react_1.screen.getByText('v2.0.3 - 성능 최적화')).toBeInTheDocument();
        });
        it('진행 중 필터가 정상 동작해야 함', () => {
            const activeFilterButton = react_1.screen.getByTestId('release-filter-active');
            react_1.fireEvent.click(activeFilterButton);
            // 진행 중인 릴리즈만 표시
            expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            expect(react_1.screen.queryByText('v2.0.5 - 버그 수정')).not.toBeInTheDocument();
        });
        it('완료 필터가 정상 동작해야 함', () => {
            const completedFilterButton = react_1.screen.getByTestId('release-filter-completed');
            react_1.fireEvent.click(completedFilterButton);
            // 완료된 릴리즈만 표시
            expect(react_1.screen.getByText('v2.0.4 - 보안 패치')).toBeInTheDocument();
            expect(react_1.screen.getByText('v2.0.3 - 성능 최적화')).toBeInTheDocument();
            expect(react_1.screen.queryByText('v2.1.0 - 기능 개선')).not.toBeInTheDocument();
        });
    });
    describe('선택 기능 테스트', () => {
        beforeEach(async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
        });
        it('릴리즈 클릭 시 선택 상태가 변경되어야 함', async () => {
            const releaseItems = react_1.screen.getAllByTestId('release-item-1');
            const releaseItem = releaseItems[0]; // 첫 번째 요소 사용
            react_1.fireEvent.click(releaseItem);
            // 선택된 릴리즈가 하이라이트되어야 함 (aria-label로 확인)
            expect(releaseItem).toHaveAttribute('aria-label', '릴리즈 v2.1.0 - 기능 개선');
        });
        it('선택된 릴리즈 ID가 store에 저장되어야 함', async () => {
            const { store } = renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
            const releaseItems = react_1.screen.getAllByTestId('release-item-2');
            const releaseItem = releaseItems[0]; // 첫 번째 요소 사용
            react_1.fireEvent.click(releaseItem);
            // store 상태 확인 (비동기 업데이트 대기)
            await (0, react_1.waitFor)(() => {
                const state = store.getState();
                expect(state.dashboardLayout.selectedReleaseId).toBe('2');
            });
        });
        it('키보드로도 릴리즈를 선택할 수 있어야 함', async () => {
            const releaseItems = react_1.screen.getAllByTestId('release-item-1');
            const releaseItem = releaseItems[0]; // 첫 번째 요소 사용
            // Enter 키로 선택
            react_1.fireEvent.keyDown(releaseItem, { key: 'Enter', code: 'Enter' });
            // 선택 상태 확인 (배경색 대신 선택된 상태 확인)
            expect(releaseItem).toHaveAttribute('aria-label', '릴리즈 v2.1.0 - 기능 개선');
        });
    });
    describe('검색과 필터 조합 테스트', () => {
        beforeEach(async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
        });
        it('검색어와 필터가 동시에 적용되어야 함', () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            const completedFilterButton = react_1.screen.getByTestId('release-filter-completed');
            // 완료 필터 적용
            react_1.fireEvent.click(completedFilterButton);
            // 검색어 입력
            react_1.fireEvent.change(searchInput, { target: { value: '보안' } });
            // 결과 확인 (완료 + 보안 포함)
            expect(react_1.screen.getByText('v2.0.4 - 보안 패치')).toBeInTheDocument();
            expect(react_1.screen.queryByText('v2.0.3 - 성능 최적화')).not.toBeInTheDocument();
        });
        it('검색어를 지우면 필터만 적용된 결과가 표시되어야 함', () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            const completedFilterButton = react_1.screen.getByTestId('release-filter-completed');
            // 완료 필터 적용
            react_1.fireEvent.click(completedFilterButton);
            // 검색어 입력 후 지우기
            react_1.fireEvent.change(searchInput, { target: { value: '보안' } });
            react_1.fireEvent.change(searchInput, { target: { value: '' } });
            // 완료된 모든 릴리즈가 표시되어야 함
            expect(react_1.screen.getByText('v2.0.4 - 보안 패치')).toBeInTheDocument();
            expect(react_1.screen.getByText('v2.0.3 - 성능 최적화')).toBeInTheDocument();
        });
    });
    describe('접근성 테스트', () => {
        beforeEach(async () => {
            mockAxios.get.mockResolvedValue({ data: mockReleases });
            renderReleaseList();
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('v2.1.0 - 기능 개선')).toBeInTheDocument();
            });
        });
        it('검색 입력창에 접근성 속성이 있어야 함', () => {
            const searchInput = react_1.screen.getByTestId('release-search-input');
            expect(searchInput).toHaveAttribute('placeholder', '릴리즈 검색...');
        });
        it('릴리즈 아이템에 접근성 속성이 있어야 함', () => {
            const releaseItems = react_1.screen.getAllByTestId('release-item-1');
            const releaseItem = releaseItems[0]; // 첫 번째 요소 사용
            expect(releaseItem).toHaveAttribute('aria-label', '릴리즈 v2.1.0 - 기능 개선');
            expect(releaseItem).toHaveAttribute('tabIndex', '0');
        });
        it('필터 버튼들이 접근 가능해야 함', () => {
            const allFilterButton = react_1.screen.getByTestId('release-filter-all');
            const activeFilterButton = react_1.screen.getByTestId('release-filter-active');
            expect(allFilterButton).toBeInTheDocument();
            expect(activeFilterButton).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9yZWxlYXNlLWxpc3QudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsV0FBVztBQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM5QyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNmLENBQUMsQ0FBQyxDQUFDO0FBWkosa0RBQTRFO0FBQzVFLDZDQUF1QztBQUN2Qyx5REFBa0Q7QUFDbEQsOENBQWtEO0FBQ2xELDRHQUFvRjtBQUNwRixzR0FBZ0Y7QUFDaEYsd0RBQXFEO0FBQ3JELHFDQUFtQztBQU9uQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUV6RCxjQUFjO0FBQ2QsTUFBTSxlQUFlLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFBLHdCQUFjLEVBQUM7UUFDcEIsT0FBTyxFQUFFO1lBQ1AsZUFBZSxFQUFFLDhCQUFzQjtTQUN4QztRQUNELGNBQWMsRUFBRTtZQUNkLGVBQWUsRUFBRTtnQkFDZixTQUFTLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQzdDLFVBQVUsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDOUMsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtnQkFDbkMsU0FBUyxFQUFFLFVBQVU7Z0JBQ3JCLGlCQUFpQixFQUFFLElBQUk7Z0JBQ3ZCLEdBQUcsWUFBWTthQUNoQjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsY0FBYztBQUNkLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDOUMsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLFlBQVks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MTcvRGVza3RvcC9teS1wcm9qZWN0L3Rlc3RzL3JlbGVhc2UtbGlzdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCBSZWxlYXNlTGlzdCBmcm9tICcuLi9zcmMvcmVuZGVyZXIvZmVhdHVyZXMvRGFzaGJvYXJkL2NvbXBvbmVudHMvUmVsZWFzZUxpc3QnO1xuaW1wb3J0IGRhc2hib2FyZExheW91dFJlZHVjZXIgZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3N0b3JlL2Rhc2hib2FyZExheW91dFNsaWNlJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3NoYXJlZC90aGVtZSc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuXG4vLyBheGlvcyDrqqjtgrlcbmplc3QubW9jaygnLi4vc3JjL3JlbmRlcmVyL3V0aWxzL2F4aW9zJywgKCkgPT4gKHtcbiAgZ2V0OiBqZXN0LmZuKClcbn0pKTtcblxuY29uc3QgbW9ja0F4aW9zID0gcmVxdWlyZSgnLi4vc3JjL3JlbmRlcmVyL3V0aWxzL2F4aW9zJyk7XG5cbi8vIO2FjOyKpO2KuOyaqSDsiqTthqDslrQg7ISk7KCVXG5jb25zdCBjcmVhdGVUZXN0U3RvcmUgPSAoaW5pdGlhbFN0YXRlID0ge30pID0+IHtcbiAgcmV0dXJuIGNvbmZpZ3VyZVN0b3JlKHtcbiAgICByZWR1Y2VyOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IGRhc2hib2FyZExheW91dFJlZHVjZXJcbiAgICB9LFxuICAgIHByZWxvYWRlZFN0YXRlOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IHtcbiAgICAgICAgbGVmdFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDI4MCB9LFxuICAgICAgICByaWdodFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDMyMCB9LFxuICAgICAgICBjZW50ZXJQYW5lbDogeyBpc0Z1bGxXaWR0aDogZmFsc2UgfSxcbiAgICAgICAgYWN0aXZlVGFiOiAnb3ZlcnZpZXcnLFxuICAgICAgICBzZWxlY3RlZFJlbGVhc2VJZDogbnVsbCxcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlXG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIOy7tO2PrOuEjO2KuCDroIzrjZTrp4Eg7Zes7Y28XG5jb25zdCByZW5kZXJSZWxlYXNlTGlzdCA9IChpbml0aWFsU3RhdGUgPSB7fSkgPT4ge1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVRlc3RTdG9yZShpbml0aWFsU3RhdGUpO1xuICBjb25zdCByZXN1bHQgPSByZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgICA8UmVsZWFzZUxpc3QgLz5cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICA8L1Byb3ZpZGVyPlxuICApO1xuICByZXR1cm4geyAuLi5yZXN1bHQsIHN0b3JlIH07XG59O1xuXG5jb25zdCBtb2NrUmVsZWFzZXMgPSBbXG4gIHsgaWQ6ICcxJywgdGl0bGU6ICd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJywgc3RhdHVzOiAnYWN0aXZlJywgZGVzY3JpcHRpb246ICfsg4jroZzsmrQg6riw64qlIOy2lOqwgCcgfSxcbiAgeyBpZDogJzInLCB0aXRsZTogJ3YyLjAuNSAtIOuyhOq3uCDsiJjsoJUnLCBzdGF0dXM6ICdwZW5kaW5nJywgZGVzY3JpcHRpb246ICfspJHsmpTtlZwg67KE6re4IOyImOyglScgfSxcbiAgeyBpZDogJzMnLCB0aXRsZTogJ3YyLjAuNCAtIOuztOyViCDtjKjsuZgnLCBzdGF0dXM6ICdjb21wbGV0ZWQnLCBkZXNjcmlwdGlvbjogJ+uztOyViCDst6jslb3soJAg7IiY7KCVJyB9LFxuICB7IGlkOiAnNCcsIHRpdGxlOiAndjIuMC4zIC0g7ISx64qlIOy1nOygge2ZlCcsIHN0YXR1czogJ2NvbXBsZXRlZCcsIGRlc2NyaXB0aW9uOiAn7ISx64qlIOqwnOyEoCcgfVxuXTtcblxuZGVzY3JpYmUoJ1JlbGVhc2VMaXN0IC0g66a066as7KaIIOumrOyKpO2KuC/qsoDsg4kv7KCE7ZmYIOq4sOuKpScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja0F4aW9zLmdldC5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+q4sOuzuCDroIzrjZTrp4Eg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGl0KCfrprTrpqzspogg66qp66Gd7J20IOygleyDgeyggeycvOuhnCDroZzrk5zrkJjslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0F4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZWxlYXNlcyB9KTtcbiAgICAgIFxuICAgICAgcmVuZGVyUmVsZWFzZUxpc3QoKTtcbiAgICAgIFxuICAgICAgLy8g66Gc65SpIOyDge2DnCDtmZXsnbhcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfroZzrlKkg7KSRLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBcbiAgICAgIC8vIOuNsOydtO2EsCDroZzrk5wg7ZuEIO2ZleyduFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4wLjUgLSDrsoTqt7gg7IiY7KCVJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4wLjQgLSDrs7TslYgg7Yyo7LmYJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4wLjMgLSDshLHriqUg7LWc7KCB7ZmUJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdBUEkg7Zi47Lac7J20IOygleyDgeyggeycvOuhnCDsnbTro6jslrTsoLjslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0F4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZWxlYXNlcyB9KTtcbiAgICAgIFxuICAgICAgcmVuZGVyUmVsZWFzZUxpc3QoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tBeGlvcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3JlbGVhc2VzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnQVBJIOyYpOulmCDsi5wg67mIIOuqqeuhneydhCDtkZzsi5ztlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0F4aW9zLmdldC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0FQSSBFcnJvcicpKTtcbiAgICAgIFxuICAgICAgcmVuZGVyUmVsZWFzZUxpc3QoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfrprTrpqzspojqsIAg7JeG7Iq164uI64ukLicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfqsoDsg4kg6riw64qlIO2FjOyKpO2KuCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBtb2NrUmVsZWFzZXMgfSk7XG4gICAgICByZW5kZXJSZWxlYXNlTGlzdCgpO1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfqsoDsg4nslrQg7J6F66ClIOyLnCDtlYTthLDrp4HsnbQg7KCV7IOBIOuPmeyeke2VtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncmVsZWFzZS1zZWFyY2gtaW5wdXQnKTtcbiAgICAgIFxuICAgICAgLy8g6rKA7IOJ7Ja0IOyeheugpVxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShzZWFyY2hJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICfquLDriqUnIH0gfSk7XG4gICAgICBcbiAgICAgIC8vIO2VhO2EsOungSDqsrDqs7wg7ZmV7J24XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgndjIuMS4wIC0g6riw64qlIOqwnOyEoCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgndjIuMC41IC0g67KE6re4IOyImOyglScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCfrjIDshozrrLjsnpAg6rWs67aEIOyXhuydtCDqsoDsg4nsnbQg64+Z7J6R7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWxlYXNlLXNlYXJjaC1pbnB1dCcpO1xuICAgICAgXG4gICAgICAvLyDrjIDrrLjsnpDroZwg6rKA7IOJXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHNlYXJjaElucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogJ1YyLjEnIH0gfSk7XG4gICAgICBcbiAgICAgIC8vIO2VhO2EsOungSDqsrDqs7wg7ZmV7J24XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgndjIuMS4wIC0g6riw64qlIOqwnOyEoCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+yEpOuqheyXkOyEnOuPhCDqsoDsg4nsnbQg6rCA64ql7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWxlYXNlLXNlYXJjaC1pbnB1dCcpO1xuICAgICAgXG4gICAgICAvLyDshKTrqoXsl5DshJwg6rKA7IOJXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHNlYXJjaElucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogJ+yDiOuhnOyatCcgfSB9KTtcbiAgICAgIFxuICAgICAgLy8g7ZWE7YSw66eBIOqysOqzvCDtmZXsnbhcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCftlYTthLAg6riw64qlIO2FjOyKpO2KuCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBtb2NrUmVsZWFzZXMgfSk7XG4gICAgICByZW5kZXJSZWxlYXNlTGlzdCgpO1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfsoITssrQg7ZWE7YSwIOuyhO2KvOydtCDsoJXsg4Eg64+Z7J6R7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGFsbEZpbHRlckJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncmVsZWFzZS1maWx0ZXItYWxsJyk7XG4gICAgICBcbiAgICAgIGZpcmVFdmVudC5jbGljayhhbGxGaWx0ZXJCdXR0b24pO1xuICAgICAgXG4gICAgICAvLyDrqqjrk6Ag66a066as7KaI6rCAIO2RnOyLnOuQmOyWtOyVvCDtlahcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgndjIuMC41IC0g67KE6re4IOyImOyglScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjAuNCAtIOuztOyViCDtjKjsuZgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4wLjMgLSDshLHriqUg7LWc7KCB7ZmUJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgn7KeE7ZaJIOykkSDtlYTthLDqsIAg7KCV7IOBIOuPmeyeke2VtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVGaWx0ZXJCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2UtZmlsdGVyLWFjdGl2ZScpO1xuICAgICAgXG4gICAgICBmaXJlRXZlbnQuY2xpY2soYWN0aXZlRmlsdGVyQnV0dG9uKTtcbiAgICAgIFxuICAgICAgLy8g7KeE7ZaJIOykkeyduCDrprTrpqzspojrp4wg7ZGc7IucXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgndjIuMS4wIC0g6riw64qlIOqwnOyEoCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgndjIuMC41IC0g67KE6re4IOyImOyglScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCfsmYTro4wg7ZWE7YSw6rCAIOygleyDgSDrj5nsnpHtlbTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxldGVkRmlsdGVyQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWxlYXNlLWZpbHRlci1jb21wbGV0ZWQnKTtcbiAgICAgIFxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNvbXBsZXRlZEZpbHRlckJ1dHRvbik7XG4gICAgICBcbiAgICAgIC8vIOyZhOujjOuQnCDrprTrpqzspojrp4wg7ZGc7IucXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgndjIuMC40IC0g67O07JWIIO2MqOy5mCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjAuMyAtIOyEseuKpSDstZzsoIHtmZQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ3YyLjEuMCAtIOq4sOuKpSDqsJzshKAnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfshKDtg50g6riw64qlIO2FjOyKpO2KuCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBtb2NrUmVsZWFzZXMgfSk7XG4gICAgICByZW5kZXJSZWxlYXNlTGlzdCgpO1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfrprTrpqzspogg7YG066atIOyLnCDshKDtg50g7IOB7YOc6rCAIOuzgOqyveuQmOyWtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZWxlYXNlSXRlbXMgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ3JlbGVhc2UtaXRlbS0xJyk7XG4gICAgICBjb25zdCByZWxlYXNlSXRlbSA9IHJlbGVhc2VJdGVtc1swXTsgLy8g7LKrIOuyiOynuCDsmpTshowg7IKs7JqpXG4gICAgICBcbiAgICAgIGZpcmVFdmVudC5jbGljayhyZWxlYXNlSXRlbSk7XG4gICAgICBcbiAgICAgIC8vIOyEoO2DneuQnCDrprTrpqzspojqsIAg7ZWY7J2065287J207Yq465CY7Ja07JW8IO2VqCAoYXJpYS1sYWJlbOuhnCDtmZXsnbgpXG4gICAgICBleHBlY3QocmVsZWFzZUl0ZW0pLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICfrprTrpqzspoggdjIuMS4wIC0g6riw64qlIOqwnOyEoCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+yEoO2DneuQnCDrprTrpqzspoggSUTqsIAgc3RvcmXsl5Ag7KCA7J6l65CY7Ja07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc3RvcmUgfSA9IHJlbmRlclJlbGVhc2VMaXN0KCk7XG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjEuMCAtIOq4sOuKpSDqsJzshKAnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCByZWxlYXNlSXRlbXMgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ3JlbGVhc2UtaXRlbS0yJyk7XG4gICAgICBjb25zdCByZWxlYXNlSXRlbSA9IHJlbGVhc2VJdGVtc1swXTsgLy8g7LKrIOuyiOynuCDsmpTshowg7IKs7JqpXG4gICAgICBmaXJlRXZlbnQuY2xpY2socmVsZWFzZUl0ZW0pO1xuICAgICAgXG4gICAgICAvLyBzdG9yZSDsg4Htg5wg7ZmV7J24ICjruYTrj5nquLAg7JeF642w7J207Yq4IOuMgOq4sClcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgIGV4cGVjdChzdGF0ZS5kYXNoYm9hcmRMYXlvdXQuc2VsZWN0ZWRSZWxlYXNlSWQpLnRvQmUoJzInKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+2CpOuztOuTnOuhnOuPhCDrprTrpqzspojrpbwg7ISg7YOd7ZWgIOyImCDsnojslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVsZWFzZUl0ZW1zID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdyZWxlYXNlLWl0ZW0tMScpO1xuICAgICAgY29uc3QgcmVsZWFzZUl0ZW0gPSByZWxlYXNlSXRlbXNbMF07IC8vIOyyqyDrsojsp7gg7JqU7IaMIOyCrOyaqVxuICAgICAgXG4gICAgICAvLyBFbnRlciDtgqTroZwg7ISg7YOdXG4gICAgICBmaXJlRXZlbnQua2V5RG93bihyZWxlYXNlSXRlbSwgeyBrZXk6ICdFbnRlcicsIGNvZGU6ICdFbnRlcicgfSk7XG4gICAgICBcbiAgICAgIC8vIOyEoO2DnSDsg4Htg5wg7ZmV7J24ICjrsLDqsr3sg4kg64yA7IugIOyEoO2DneuQnCDsg4Htg5wg7ZmV7J24KVxuICAgICAgZXhwZWN0KHJlbGVhc2VJdGVtKS50b0hhdmVBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAn66a066as7KaIIHYyLjEuMCAtIOq4sOuKpSDqsJzshKAnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+qygOyDieqzvCDtlYTthLAg7KGw7ZWpIO2FjOyKpO2KuCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBeGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBtb2NrUmVsZWFzZXMgfSk7XG4gICAgICByZW5kZXJSZWxlYXNlTGlzdCgpO1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4xLjAgLSDquLDriqUg6rCc7ISgJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfqsoDsg4nslrTsmYAg7ZWE7YSw6rCAIOuPmeyLnOyXkCDsoIHsmqnrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2Utc2VhcmNoLWlucHV0Jyk7XG4gICAgICBjb25zdCBjb21wbGV0ZWRGaWx0ZXJCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2UtZmlsdGVyLWNvbXBsZXRlZCcpO1xuICAgICAgXG4gICAgICAvLyDsmYTro4wg7ZWE7YSwIOyggeyaqVxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNvbXBsZXRlZEZpbHRlckJ1dHRvbik7XG4gICAgICBcbiAgICAgIC8vIOqygOyDieyWtCDsnoXroKVcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2VhcmNoSW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiAn67O07JWIJyB9IH0pO1xuICAgICAgXG4gICAgICAvLyDqsrDqs7wg7ZmV7J24ICjsmYTro4wgKyDrs7TslYgg7Y+s7ZWoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjAuNCAtIOuztOyViCDtjKjsuZgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ3YyLjAuMyAtIOyEseuKpSDstZzsoIHtmZQnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgn6rKA7IOJ7Ja066W8IOyngOyasOuptCDtlYTthLDrp4wg7KCB7Jqp65CcIOqysOqzvOqwgCDtkZzsi5zrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2Utc2VhcmNoLWlucHV0Jyk7XG4gICAgICBjb25zdCBjb21wbGV0ZWRGaWx0ZXJCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2UtZmlsdGVyLWNvbXBsZXRlZCcpO1xuICAgICAgXG4gICAgICAvLyDsmYTro4wg7ZWE7YSwIOyggeyaqVxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNvbXBsZXRlZEZpbHRlckJ1dHRvbik7XG4gICAgICBcbiAgICAgIC8vIOqygOyDieyWtCDsnoXroKUg7ZuEIOyngOyasOq4sFxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShzZWFyY2hJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICfrs7TslYgnIH0gfSk7XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHNlYXJjaElucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogJycgfSB9KTtcbiAgICAgIFxuICAgICAgLy8g7JmE66OM65CcIOuqqOuToCDrprTrpqzspojqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjAuNCAtIOuztOyViCDtjKjsuZgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2Mi4wLjMgLSDshLHriqUg7LWc7KCB7ZmUJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfsoJHqt7zshLEg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0F4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZWxlYXNlcyB9KTtcbiAgICAgIHJlbmRlclJlbGVhc2VMaXN0KCk7XG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ3YyLjEuMCAtIOq4sOuKpSDqsJzshKAnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+qygOyDiSDsnoXroKXssL3sl5Ag7KCR6re87ISxIOyGjeyEseydtCDsnojslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2Utc2VhcmNoLWlucHV0Jyk7XG4gICAgICBleHBlY3Qoc2VhcmNoSW5wdXQpLnRvSGF2ZUF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCAn66a066as7KaIIOqygOyDiS4uLicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+umtOumrOymiCDslYTsnbTthZzsl5Ag7KCR6re87ISxIOyGjeyEseydtCDsnojslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVsZWFzZUl0ZW1zID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdyZWxlYXNlLWl0ZW0tMScpO1xuICAgICAgY29uc3QgcmVsZWFzZUl0ZW0gPSByZWxlYXNlSXRlbXNbMF07IC8vIOyyqyDrsojsp7gg7JqU7IaMIOyCrOyaqVxuICAgICAgZXhwZWN0KHJlbGVhc2VJdGVtKS50b0hhdmVBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAn66a066as7KaIIHYyLjEuMCAtIOq4sOuKpSDqsJzshKAnKTtcbiAgICAgIGV4cGVjdChyZWxlYXNlSXRlbSkudG9IYXZlQXR0cmlidXRlKCd0YWJJbmRleCcsICcwJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn7ZWE7YSwIOuyhO2KvOuTpOydtCDsoJHqt7wg6rCA64ql7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGFsbEZpbHRlckJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncmVsZWFzZS1maWx0ZXItYWxsJyk7XG4gICAgICBjb25zdCBhY3RpdmVGaWx0ZXJCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbGVhc2UtZmlsdGVyLWFjdGl2ZScpO1xuICAgICAgXG4gICAgICBleHBlY3QoYWxsRmlsdGVyQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KGFjdGl2ZUZpbHRlckJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsgIl0sInZlcnNpb24iOjN9