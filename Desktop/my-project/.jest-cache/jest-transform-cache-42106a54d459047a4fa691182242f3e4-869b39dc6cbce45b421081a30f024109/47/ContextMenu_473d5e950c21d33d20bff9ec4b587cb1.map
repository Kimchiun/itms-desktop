{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/shared/components/ContextMenu.tsx","mappings":";;;;;;AACA,0EAAuC;AAWvC,MAAM,aAAa,GAAG,2BAAM,CAAC,GAAG,CAA8C;;SAErE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;UACf,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;;;;;aAMb,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;;CAEvD,CAAC;AAEF,MAAM,QAAQ,GAAG,2BAAM,CAAC,GAAG,CAAA;;;;;;;;;;;;;CAa1B,CAAC;AAEF,MAAM,WAAW,GAAG,2BAAM,CAAC,GAAG,CAAA;;;;CAI7B,CAAC;AAEF,MAAM,WAAW,GAA+B,CAAC,EAC/C,CAAC,EACD,CAAC,EACD,SAAS,EACT,OAAO,EACP,aAAa,EACb,YAAY,EACb,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,CAAC,MAA6C,EAAE,EAAE;QACrE,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9C,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IAEtE,IAAI,CAAC,SAAS;QAAE,OAAO,IAAI,CAAC;IAE5B,OAAO,CACL,6DACE,gCACE,KAAK,EAAE;oBACL,QAAQ,EAAE,OAAO;oBACjB,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,CAAC;oBACP,KAAK,EAAE,CAAC;oBACR,MAAM,EAAE,CAAC;oBACT,MAAM,EAAE,GAAG;iBACZ,EACD,OAAO,EAAE,OAAO,GAChB,EACF,uBAAC,aAAa,IAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS,YAC5C,YAAY,IAAI,CACf,6DACE,wBAAC,QAAQ,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,+BACtC,aAAa,CAAC,MAAM,eAChB,EACX,wBAAC,QAAQ,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,+BACtC,aAAa,CAAC,MAAM,eAChB,EACV,YAAY,IAAI,CACf,wBAAC,QAAQ,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,4CACrC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,MAAM,eAC5D,CACZ,EACD,uBAAC,WAAW,KAAG,EACf,wBAAC,QAAQ,IACP,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,EACrC,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,+BAEtB,aAAa,CAAC,MAAM,eAChB,IACV,CACJ,GACa,IACf,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,WAAW,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/shared/components/ContextMenu.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface ContextMenuProps {\n  x: number;\n  y: number;\n  isVisible: boolean;\n  onClose: () => void;\n  selectedItems: Array<{ id: number; type: 'folder' | 'testcase' }>;\n  onBulkAction: (action: 'move' | 'copy' | 'delete' | 'status') => void;\n}\n\nconst MenuContainer = styled.div<{ x: number; y: number; isVisible: boolean }>`\n  position: fixed;\n  top: ${props => props.y}px;\n  left: ${props => props.x}px;\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  display: ${props => props.isVisible ? 'block' : 'none'};\n  min-width: 150px;\n`;\n\nconst MenuItem = styled.div`\n  padding: 8px 12px;\n  cursor: pointer;\n  font-size: 14px;\n  color: #333;\n  \n  &:hover {\n    background-color: #f5f5f5;\n  }\n  \n  &:not(:last-child) {\n    border-bottom: 1px solid #eee;\n  }\n`;\n\nconst MenuDivider = styled.div`\n  height: 1px;\n  background-color: #eee;\n  margin: 4px 0;\n`;\n\nconst ContextMenu: React.FC<ContextMenuProps> = ({\n  x,\n  y,\n  isVisible,\n  onClose,\n  selectedItems,\n  onBulkAction\n}) => {\n  const handleAction = (action: 'move' | 'copy' | 'delete' | 'status') => {\n    onBulkAction(action);\n    onClose();\n  };\n\n  const hasSelection = selectedItems.length > 0;\n  const hasTestCases = selectedItems.some(item => item.type === 'testcase');\n  const hasFolders = selectedItems.some(item => item.type === 'folder');\n\n  if (!isVisible) return null;\n\n  return (\n    <>\n      <div\n        style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 999\n        }}\n        onClick={onClose}\n      />\n      <MenuContainer x={x} y={y} isVisible={isVisible}>\n        {hasSelection && (\n          <>\n            <MenuItem onClick={() => handleAction('copy')}>\n              복사 ({selectedItems.length}개)\n            </MenuItem>\n            <MenuItem onClick={() => handleAction('move')}>\n              이동 ({selectedItems.length}개)\n            </MenuItem>\n            {hasTestCases && (\n              <MenuItem onClick={() => handleAction('status')}>\n                상태 변경 ({selectedItems.filter(item => item.type === 'testcase').length}개)\n              </MenuItem>\n            )}\n            <MenuDivider />\n            <MenuItem \n              onClick={() => handleAction('delete')}\n              style={{ color: '#d32f2f' }}\n            >\n              삭제 ({selectedItems.length}개)\n            </MenuItem>\n          </>\n        )}\n      </MenuContainer>\n    </>\n  );\n};\n\nexport default ContextMenu; "],"version":3}