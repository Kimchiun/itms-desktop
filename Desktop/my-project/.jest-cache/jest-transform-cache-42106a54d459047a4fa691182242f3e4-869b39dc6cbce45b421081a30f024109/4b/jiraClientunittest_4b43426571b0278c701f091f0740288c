238b76ae025eb51a1808014326f54aaa
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
const jiraClient_1 = require("../src/main/app/infrastructure/integrations/jiraClient");
describe('jiraClient (unit)', () => {
    const mock = new axios_mock_adapter_1.default(axios_1.default);
    const JIRA_URL = 'http://jira.local';
    const API_PATH = '/rest/api/2/issue';
    const BASE_PARAMS = {
        summary: 'Bug summary',
        description: 'desc',
        projectKey: 'TEST',
        jiraUrl: JIRA_URL,
        username: 'user',
        apiToken: 'token',
    };
    afterEach(() => mock.reset());
    it('should create a Jira issue', async () => {
        mock.onPost(`${JIRA_URL}${API_PATH}`).reply(201, { key: 'TEST-123' });
        const result = await (0, jiraClient_1.createJiraIssue)(BASE_PARAMS);
        expect(result.key).toBe('TEST-123');
        expect(result.url).toContain('TEST-123');
    });
    it('should handle Jira API error', async () => {
        mock.onPost(`${JIRA_URL}${API_PATH}`).reply(400, { errorMessages: ['Invalid project'] });
        await expect((0, jiraClient_1.createJiraIssue)(BASE_PARAMS)).rejects.toThrow(/Invalid project/);
    });
    it('should handle Jira API timeout', async () => {
        mock.onPost(`${JIRA_URL}${API_PATH}`).timeout();
        await expect((0, jiraClient_1.createJiraIssue)({ ...BASE_PARAMS, timeoutMs: 100 })).rejects.toThrow(/timed out/);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9qaXJhQ2xpZW50LnVuaXQudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQiw0RUFBNkM7QUFDN0MsdUZBQXlGO0FBRXpGLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsTUFBTSxJQUFJLEdBQUcsSUFBSSw0QkFBVyxDQUFDLGVBQUssQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDO0lBQ3JDLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDO0lBQ3JDLE1BQU0sV0FBVyxHQUFHO1FBQ2xCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLFdBQVcsRUFBRSxNQUFNO1FBQ25CLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLE9BQU8sRUFBRSxRQUFRO1FBQ2pCLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxPQUFPO0tBQ2xCLENBQUM7SUFFRixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFFOUIsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDRCQUFlLEVBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RixNQUFNLE1BQU0sQ0FBQyxJQUFBLDRCQUFlLEVBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDaEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hELE1BQU0sTUFBTSxDQUFDLElBQUEsNEJBQWUsRUFBQyxFQUFFLEdBQUcsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3QvdGVzdHMvamlyYUNsaWVudC51bml0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBNb2NrQWRhcHRlciBmcm9tICdheGlvcy1tb2NrLWFkYXB0ZXInO1xuaW1wb3J0IHsgY3JlYXRlSmlyYUlzc3VlIH0gZnJvbSAnLi4vc3JjL21haW4vYXBwL2luZnJhc3RydWN0dXJlL2ludGVncmF0aW9ucy9qaXJhQ2xpZW50JztcblxuZGVzY3JpYmUoJ2ppcmFDbGllbnQgKHVuaXQpJywgKCkgPT4ge1xuICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgY29uc3QgSklSQV9VUkwgPSAnaHR0cDovL2ppcmEubG9jYWwnO1xuICBjb25zdCBBUElfUEFUSCA9ICcvcmVzdC9hcGkvMi9pc3N1ZSc7XG4gIGNvbnN0IEJBU0VfUEFSQU1TID0ge1xuICAgIHN1bW1hcnk6ICdCdWcgc3VtbWFyeScsXG4gICAgZGVzY3JpcHRpb246ICdkZXNjJyxcbiAgICBwcm9qZWN0S2V5OiAnVEVTVCcsXG4gICAgamlyYVVybDogSklSQV9VUkwsXG4gICAgdXNlcm5hbWU6ICd1c2VyJyxcbiAgICBhcGlUb2tlbjogJ3Rva2VuJyxcbiAgfTtcblxuICBhZnRlckVhY2goKCkgPT4gbW9jay5yZXNldCgpKTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIEppcmEgaXNzdWUnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9jay5vblBvc3QoYCR7SklSQV9VUkx9JHtBUElfUEFUSH1gKS5yZXBseSgyMDEsIHsga2V5OiAnVEVTVC0xMjMnIH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZUppcmFJc3N1ZShCQVNFX1BBUkFNUyk7XG4gICAgZXhwZWN0KHJlc3VsdC5rZXkpLnRvQmUoJ1RFU1QtMTIzJyk7XG4gICAgZXhwZWN0KHJlc3VsdC51cmwpLnRvQ29udGFpbignVEVTVC0xMjMnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgSmlyYSBBUEkgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgbW9jay5vblBvc3QoYCR7SklSQV9VUkx9JHtBUElfUEFUSH1gKS5yZXBseSg0MDAsIHsgZXJyb3JNZXNzYWdlczogWydJbnZhbGlkIHByb2plY3QnXSB9KTtcbiAgICBhd2FpdCBleHBlY3QoY3JlYXRlSmlyYUlzc3VlKEJBU0VfUEFSQU1TKSkucmVqZWN0cy50b1Rocm93KC9JbnZhbGlkIHByb2plY3QvKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgSmlyYSBBUEkgdGltZW91dCcsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrLm9uUG9zdChgJHtKSVJBX1VSTH0ke0FQSV9QQVRIfWApLnRpbWVvdXQoKTtcbiAgICBhd2FpdCBleHBlY3QoY3JlYXRlSmlyYUlzc3VlKHsgLi4uQkFTRV9QQVJBTVMsIHRpbWVvdXRNczogMTAwIH0pKS5yZWplY3RzLnRvVGhyb3coL3RpbWVkIG91dC8pO1xuICB9KTtcbn0pOyAiXSwidmVyc2lvbiI6M30=