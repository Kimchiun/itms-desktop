8d7584bc2ac18085a6f2eb1c60c2b8d7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _useLayoutEffect = _interopRequireDefault(require("rc-util/lib/hooks/useLayoutEffect"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * Trigger only when component unmount
 */
function useUnmount(triggerStart, triggerEnd) {
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    firstMount = _React$useState2[0],
    setFirstMount = _React$useState2[1];
  (0, _useLayoutEffect.default)(function () {
    if (firstMount) {
      triggerStart();
      return function () {
        triggerEnd();
      };
    }
  }, [firstMount]);
  (0, _useLayoutEffect.default)(function () {
    setFirstMount(true);
    return function () {
      setFirstMount(false);
    };
  }, []);
}
var _default = exports.default = useUnmount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90eXBlb2YiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfc2xpY2VkVG9BcnJheTIiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3VzZUxheW91dEVmZmVjdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsInVzZVVubW91bnQiLCJ0cmlnZ2VyU3RhcnQiLCJ0cmlnZ2VyRW5kIiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiZmlyc3RNb3VudCIsInNldEZpcnN0TW91bnQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbInVzZVVubW91bnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xudmFyIF90eXBlb2YgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF91c2VMYXlvdXRFZmZlY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9ob29rcy91c2VMYXlvdXRFZmZlY3RcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSBfdHlwZW9mKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbi8qKlxuICogVHJpZ2dlciBvbmx5IHdoZW4gY29tcG9uZW50IHVubW91bnRcbiAqL1xuZnVuY3Rpb24gdXNlVW5tb3VudCh0cmlnZ2VyU3RhcnQsIHRyaWdnZXJFbmQpIHtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIGZpcnN0TW91bnQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldEZpcnN0TW91bnQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICAoMCwgX3VzZUxheW91dEVmZmVjdC5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZpcnN0TW91bnQpIHtcbiAgICAgIHRyaWdnZXJTdGFydCgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJpZ2dlckVuZCgpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtmaXJzdE1vdW50XSk7XG4gICgwLCBfdXNlTGF5b3V0RWZmZWN0LmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGaXJzdE1vdW50KHRydWUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRGaXJzdE1vdW50KGZhbHNlKTtcbiAgICB9O1xuICB9LCBbXSk7XG59XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSB1c2VVbm1vdW50OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGLElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3RERSxNQUFNLENB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