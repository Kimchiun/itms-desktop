{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/suites/repositories/suiteRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/suites/repositories/suiteRepository.ts"],"sourcesContent":["import pgClient, { ensurePgConnected } from '../../../infrastructure/database/pgClient';\nimport { Suite, SuiteCase } from '../models/Suite';\n\nexport async function createSuite(data: Omit<Suite, 'id' | 'createdAt'>): Promise<Suite> {\n  await ensurePgConnected();\n  const result = await pgClient.query(\n    `INSERT INTO suites (release_id, name, description, executor, environment, due_date) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,\n    [data.releaseId, data.name, data.description, data.executor, data.environment, data.dueDate]\n  );\n  return rowToSuite(result.rows[0]);\n}\n\nexport async function updateSuite(id: number, patch: Partial<Suite>): Promise<Suite | null> {\n  await ensurePgConnected();\n  const result = await pgClient.query(\n    `UPDATE suites SET name=$1, description=$2, executor=$3, environment=$4, due_date=$5 WHERE id=$6 RETURNING *`,\n    [patch.name, patch.description, patch.executor, patch.environment, patch.dueDate, id]\n  );\n  if (result.rows.length === 0) return null;\n  return rowToSuite(result.rows[0]);\n}\n\nexport async function deleteSuite(id: number): Promise<boolean> {\n  await ensurePgConnected();\n  const result = await pgClient.query('DELETE FROM suites WHERE id = $1', [id]);\n  return (result.rowCount ?? 0) > 0;\n}\n\nexport async function listSuites(): Promise<Suite[]> {\n  await ensurePgConnected();\n  const result = await pgClient.query('SELECT * FROM suites ORDER BY id');\n  return result.rows.map(rowToSuite);\n}\n\nexport async function assignCaseToSuite(suiteId: number, testcaseId: number): Promise<void> {\n  await ensurePgConnected();\n  await pgClient.query('INSERT INTO suite_cases (suite_id, testcase_id) VALUES ($1, $2) ON CONFLICT DO NOTHING', [suiteId, testcaseId]);\n}\n\nexport async function removeCaseFromSuite(suiteId: number, testcaseId: number): Promise<void> {\n  await ensurePgConnected();\n  await pgClient.query('DELETE FROM suite_cases WHERE suite_id = $1 AND testcase_id = $2', [suiteId, testcaseId]);\n}\n\nexport async function listCasesInSuite(suiteId: number): Promise<number[]> {\n  await ensurePgConnected();\n  const result = await pgClient.query('SELECT testcase_id FROM suite_cases WHERE suite_id = $1', [suiteId]);\n  return result.rows.map((row: any) => row.testcase_id);\n}\n\nexport async function suiteCaseCount(suiteId: number): Promise<number> {\n  await ensurePgConnected();\n  const result = await pgClient.query('SELECT COUNT(*) FROM suite_cases WHERE suite_id = $1', [suiteId]);\n  return Number(result.rows[0].count);\n}\n\nfunction rowToSuite(row: any): Suite {\n  return {\n    id: row.id,\n    releaseId: row.release_id,\n    name: row.name,\n    description: row.description,\n    executor: row.executor,\n    environment: row.environment,\n    dueDate: row.due_date,\n    createdAt: row.created_at,\n  };\n} "],"version":3}