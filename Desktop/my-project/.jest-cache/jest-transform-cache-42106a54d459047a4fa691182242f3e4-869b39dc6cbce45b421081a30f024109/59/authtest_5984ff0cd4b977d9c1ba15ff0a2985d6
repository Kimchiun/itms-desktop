62dabe79de10ee68ed9696a92183f9c1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../src/main/app/app"));
const pgClient_1 = __importStar(require("../src/main/app/infrastructure/database/pgClient"));
describe('인증/권한 API', () => {
    beforeAll(async () => {
        await (0, pgClient_1.ensurePgConnected)();
        await pgClient_1.default.query('DELETE FROM users'); // 테스트 격리
    });
    const user = { username: 'testuser', password: 'testpass123', role: 'QA' };
    let token;
    it('회원가입 성공', async () => {
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        expect(res.status).toBe(201);
        expect(res.body.username).toBe(user.username);
        expect(res.body.role).toBe(user.role);
    });
    it('중복 회원가입 실패', async () => {
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/register').send(user);
        expect(res.status).toBe(409);
    });
    it('로그인 성공 및 JWT 반환', async () => {
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/login').send({ username: user.username, password: user.password });
        expect(res.status).toBe(200);
        expect(res.body.token).toBeDefined();
        token = res.body.token;
    });
    it('잘못된 비밀번호 로그인 실패', async () => {
        const res = await (0, supertest_1.default)(app_1.default).post('/api/auth/login').send({ username: user.username, password: 'wrongpass' });
        expect(res.status).toBe(401);
    });
    // RBAC 미들웨어 테스트용 protected 엔드포인트 예시
    it('권한 미들웨어: QA만 접근 허용', async () => {
        // 임시 라우트 추가 필요 (app에 직접 추가)
        app_1.default.get('/api/protected-qa', (req, res, next) => {
            req.user = { ...user, role: 'QA' }; // 테스트용 강제 주입
            next();
        }, require('../src/main/app/domains/users/middleware/rbacMiddleware').requireRole(['QA']), (req, res) => {
            res.json({ ok: true });
        });
        const res = await (0, supertest_1.default)(app_1.default).get('/api/protected-qa');
        expect(res.status).toBe(200);
        expect(res.body.ok).toBe(true);
    });
    afterAll(async () => {
        await pgClient_1.default.query('DELETE FROM users');
        await pgClient_1.default.end();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9hdXRoLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwREFBZ0M7QUFDaEMsOERBQXNDO0FBQ3RDLDZGQUErRjtBQUUvRixRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN6QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLDRCQUFpQixHQUFFLENBQUM7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUN0RCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sSUFBSSxHQUFHLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUMzRSxJQUFJLEtBQWEsQ0FBQztJQUVsQixFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLGFBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsWUFBWSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLGFBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsbUJBQU8sRUFBQyxhQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlCQUFpQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxtQkFBTyxFQUFDLGFBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2hILE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsb0NBQW9DO0lBQ3BDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsQyw0QkFBNEI7UUFDNUIsYUFBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDN0MsR0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLGFBQWE7WUFDMUQsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLEVBQUUsT0FBTyxDQUFDLHlEQUF5RCxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUN0RyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsbUJBQU8sRUFBQyxhQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxrQkFBUSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sa0JBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3QvdGVzdHMvYXV0aC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5pbXBvcnQgYXBwIGZyb20gJy4uL3NyYy9tYWluL2FwcC9hcHAnO1xuaW1wb3J0IHBnQ2xpZW50LCB7IGVuc3VyZVBnQ29ubmVjdGVkIH0gZnJvbSAnLi4vc3JjL21haW4vYXBwL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL3BnQ2xpZW50JztcblxuZGVzY3JpYmUoJ+yduOymnS/qtoztlZwgQVBJJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGVuc3VyZVBnQ29ubmVjdGVkKCk7XG4gICAgYXdhaXQgcGdDbGllbnQucXVlcnkoJ0RFTEVURSBGUk9NIHVzZXJzJyk7IC8vIO2FjOyKpO2KuCDqsqnrpqxcbiAgfSk7XG5cbiAgY29uc3QgdXNlciA9IHsgdXNlcm5hbWU6ICd0ZXN0dXNlcicsIHBhc3N3b3JkOiAndGVzdHBhc3MxMjMnLCByb2xlOiAnUUEnIH07XG4gIGxldCB0b2tlbjogc3RyaW5nO1xuXG4gIGl0KCftmozsm5DqsIDsnoUg7ISx6rO1JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5wb3N0KCcvYXBpL2F1dGgvcmVnaXN0ZXInKS5zZW5kKHVzZXIpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgZXhwZWN0KHJlcy5ib2R5LnVzZXJuYW1lKS50b0JlKHVzZXIudXNlcm5hbWUpO1xuICAgIGV4cGVjdChyZXMuYm9keS5yb2xlKS50b0JlKHVzZXIucm9sZSk7XG4gIH0pO1xuXG4gIGl0KCfspJHrs7Ug7ZqM7JuQ6rCA7J6FIOyLpO2MqCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkucG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJykuc2VuZCh1c2VyKTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDkpO1xuICB9KTtcblxuICBpdCgn66Gc6re47J24IOyEseqztSDrsI8gSldUIOuwmO2ZmCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KGFwcCkucG9zdCgnL2FwaS9hdXRoL2xvZ2luJykuc2VuZCh7IHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLCBwYXNzd29yZDogdXNlci5wYXNzd29yZCB9KTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xuICAgIGV4cGVjdChyZXMuYm9keS50b2tlbikudG9CZURlZmluZWQoKTtcbiAgICB0b2tlbiA9IHJlcy5ib2R5LnRva2VuO1xuICB9KTtcblxuICBpdCgn7J6Y66q765CcIOu5hOuwgOuyiO2YuCDroZzqt7jsnbgg7Iuk7YyoJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5wb3N0KCcvYXBpL2F1dGgvbG9naW4nKS5zZW5kKHsgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsIHBhc3N3b3JkOiAnd3JvbmdwYXNzJyB9KTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZSg0MDEpO1xuICB9KTtcblxuICAvLyBSQkFDIOuvuOuTpOybqOyWtCDthYzsiqTtirjsmqkgcHJvdGVjdGVkIOyXlOuTnO2PrOyduO2KuCDsmIjsi5xcbiAgaXQoJ+q2jO2VnCDrr7jrk6Tsm6jslrQ6IFFB66eMIOygkeq3vCDtl4jsmqknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8g7J6E7IucIOudvOyasO2KuCDstpTqsIAg7ZWE7JqUIChhcHDsl5Ag7KeB7KCRIOy2lOqwgClcbiAgICBhcHAuZ2V0KCcvYXBpL3Byb3RlY3RlZC1xYScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgKHJlcSBhcyBhbnkpLnVzZXIgPSB7IC4uLnVzZXIsIHJvbGU6ICdRQScgfTsgLy8g7YWM7Iqk7Yq47JqpIOqwleygnCDso7zsnoVcbiAgICAgIG5leHQoKTtcbiAgICB9LCByZXF1aXJlKCcuLi9zcmMvbWFpbi9hcHAvZG9tYWlucy91c2Vycy9taWRkbGV3YXJlL3JiYWNNaWRkbGV3YXJlJykucmVxdWlyZVJvbGUoWydRQSddKSwgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuanNvbih7IG9rOiB0cnVlIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoYXBwKS5nZXQoJy9hcGkvcHJvdGVjdGVkLXFhJyk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICBleHBlY3QocmVzLmJvZHkub2spLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwZ0NsaWVudC5xdWVyeSgnREVMRVRFIEZST00gdXNlcnMnKTtcbiAgICBhd2FpdCBwZ0NsaWVudC5lbmQoKTtcbiAgfSk7XG59KTsgIl0sInZlcnNpb24iOjN9