bfcbb1fe84c5b67f5b60d9ce532ae2b5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRedmineIssue = createRedmineIssue;
const axios_1 = __importDefault(require("axios"));
async function createRedmineIssue(params) {
    const { subject, description, projectId, trackerId = 1, // 1: Bug
    redmineUrl, apiKey, timeoutMs = 8000, } = params;
    try {
        const res = await axios_1.default.post(`${redmineUrl}/issues.json`, {
            issue: {
                project_id: projectId,
                subject,
                description,
                tracker_id: trackerId,
            },
        }, {
            headers: {
                'X-Redmine-API-Key': apiKey,
                'Content-Type': 'application/json',
            },
            timeout: timeoutMs,
        });
        const issueId = res.data?.issue?.id;
        return {
            id: issueId,
            url: `${redmineUrl}/issues/${issueId}`,
        };
    }
    catch (err) {
        if (err.code === 'ECONNABORTED') {
            throw new Error('Redmine API request timed out');
        }
        throw new Error(err.response?.data?.errors?.[0] || err.message || 'Redmine issue creation failed');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvaW5mcmFzdHJ1Y3R1cmUvaW50ZWdyYXRpb25zL3JlZG1pbmVDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFZQSxnREF3Q0M7QUFwREQsa0RBQTBCO0FBWW5CLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxNQUEwQjtJQUMvRCxNQUFNLEVBQ0YsT0FBTyxFQUNQLFdBQVcsRUFDWCxTQUFTLEVBQ1QsU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTO0lBQ3hCLFVBQVUsRUFDVixNQUFNLEVBQ04sU0FBUyxHQUFHLElBQUksR0FDbkIsR0FBRyxNQUFNLENBQUM7SUFDWCxJQUFJLENBQUM7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUssQ0FBQyxJQUFJLENBQ3hCLEdBQUcsVUFBVSxjQUFjLEVBQzNCO1lBQ0ksS0FBSyxFQUFFO2dCQUNILFVBQVUsRUFBRSxTQUFTO2dCQUNyQixPQUFPO2dCQUNQLFdBQVc7Z0JBQ1gsVUFBVSxFQUFFLFNBQVM7YUFDeEI7U0FDSixFQUNEO1lBQ0ksT0FBTyxFQUFFO2dCQUNMLG1CQUFtQixFQUFFLE1BQU07Z0JBQzNCLGNBQWMsRUFBRSxrQkFBa0I7YUFDckM7WUFDRCxPQUFPLEVBQUUsU0FBUztTQUNyQixDQUNKLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBSSxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7UUFDN0MsT0FBTztZQUNILEVBQUUsRUFBRSxPQUFPO1lBQ1gsR0FBRyxFQUFFLEdBQUcsVUFBVSxXQUFXLE9BQU8sRUFBRTtTQUN6QyxDQUFDO0lBQ04sQ0FBQztJQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRSxDQUFDO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNyRCxDQUFDO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLCtCQUErQixDQUFDLENBQUM7SUFDdkcsQ0FBQztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvaW5mcmFzdHJ1Y3R1cmUvaW50ZWdyYXRpb25zL3JlZG1pbmVDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGludGVyZmFjZSBSZWRtaW5lSXNzdWVQYXJhbXMge1xuICAgIHN1YmplY3Q6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHByb2plY3RJZDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHRyYWNrZXJJZD86IG51bWJlcjtcbiAgICByZWRtaW5lVXJsOiBzdHJpbmc7XG4gICAgYXBpS2V5OiBzdHJpbmc7XG4gICAgdGltZW91dE1zPzogbnVtYmVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlUmVkbWluZUlzc3VlKHBhcmFtczogUmVkbWluZUlzc3VlUGFyYW1zKTogUHJvbWlzZTx7IGlkOiBudW1iZXI7IHVybDogc3RyaW5nIH0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBwcm9qZWN0SWQsXG4gICAgICAgIHRyYWNrZXJJZCA9IDEsIC8vIDE6IEJ1Z1xuICAgICAgICByZWRtaW5lVXJsLFxuICAgICAgICBhcGlLZXksXG4gICAgICAgIHRpbWVvdXRNcyA9IDgwMDAsXG4gICAgfSA9IHBhcmFtcztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgICAgICAgYCR7cmVkbWluZVVybH0vaXNzdWVzLmpzb25gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzc3VlOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RfaWQ6IHByb2plY3RJZCxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXJfaWQ6IHRyYWNrZXJJZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdYLVJlZG1pbmUtQVBJLUtleSc6IGFwaUtleSxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXRNcyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaXNzdWVJZCA9IChyZXMuZGF0YSBhcyBhbnkpPy5pc3N1ZT8uaWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogaXNzdWVJZCxcbiAgICAgICAgICAgIHVybDogYCR7cmVkbWluZVVybH0vaXNzdWVzLyR7aXNzdWVJZH1gLFxuICAgICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ0VDT05OQUJPUlRFRCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVkbWluZSBBUEkgcmVxdWVzdCB0aW1lZCBvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyLnJlc3BvbnNlPy5kYXRhPy5lcnJvcnM/LlswXSB8fCBlcnIubWVzc2FnZSB8fCAnUmVkbWluZSBpc3N1ZSBjcmVhdGlvbiBmYWlsZWQnKTtcbiAgICB9XG59ICJdLCJ2ZXJzaW9uIjozfQ==