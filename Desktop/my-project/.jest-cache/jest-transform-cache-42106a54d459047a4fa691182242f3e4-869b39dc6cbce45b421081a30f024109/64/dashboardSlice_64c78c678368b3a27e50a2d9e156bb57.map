{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/Dashboard/store/dashboardSlice.ts","mappings":";;;;;;AAAA,8CAAgF;AAEhF,iEAAuC;AAiBvC,MAAM,YAAY,GAAmB;IACnC,KAAK,EAAE,IAAI;IACX,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,IAAI;CACZ,CAAC;AAEW,QAAA,mBAAmB,GAAG,IAAA,0BAAgB,EACjD,sBAAsB,EACtB,KAAK,IAAI,EAAE;IACT,MAAM,GAAG,GAAG,MAAM,eAAG,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAClD,OAAO,GAAG,CAAC,IAAsB,CAAC;AACpC,CAAC,CACF,CAAC;AAEF,MAAM,cAAc,GAAG,IAAA,qBAAW,EAAC;IACjC,IAAI,EAAE,WAAW;IACjB,YAAY;IACZ,QAAQ,EAAE,EAAE;IACZ,aAAa,EAAE,OAAO,CAAC,EAAE;QACvB,OAAO;aACJ,OAAO,CAAC,2BAAmB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAC5C,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;YACrB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC;aACD,OAAO,CAAC,2BAAmB,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAqC,EAAE,EAAE;YACvF,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YACtB,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,CAAC,CAAC;aACD,OAAO,CAAC,2BAAmB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YACvD,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;YACtB,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;CACF,CAAC,CAAC;AAEH,kBAAe,cAAc,CAAC,OAAO,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/Dashboard/store/dashboardSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport api from '../../../utils/axios';\n\nexport interface DashboardStats {\n  totalCases: number;\n  statusCounts: Record<string, number>;\n  defectCount: number;\n  defectDensity: number;\n  progressRate: number;\n  workload: Record<string, number>;\n}\n\nexport interface DashboardState {\n  stats: DashboardStats | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: DashboardState = {\n  stats: null,\n  loading: false,\n  error: null,\n};\n\nexport const fetchDashboardStats = createAsyncThunk(\n  'dashboard/fetchStats',\n  async () => {\n    const res = await api.get('/api/dashboard/stats');\n    return res.data as DashboardStats;\n  }\n);\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(fetchDashboardStats.pending, state => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchDashboardStats.fulfilled, (state, action: PayloadAction<DashboardStats>) => {\n        state.loading = false;\n        state.stats = action.payload;\n      })\n      .addCase(fetchDashboardStats.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || null;\n      });\n  },\n});\n\nexport default dashboardSlice.reducer; "],"version":3}