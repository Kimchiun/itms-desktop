{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/jiraClient.unit.test.ts","mappings":";;;;;AAAA,kDAA0B;AAC1B,4EAA6C;AAC7C,uFAAyF;AAEzF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,MAAM,IAAI,GAAG,IAAI,4BAAW,CAAC,eAAK,CAAC,CAAC;IACpC,MAAM,QAAQ,GAAG,mBAAmB,CAAC;IACrC,MAAM,QAAQ,GAAG,mBAAmB,CAAC;IACrC,MAAM,WAAW,GAAG;QAClB,OAAO,EAAE,aAAa;QACtB,WAAW,EAAE,MAAM;QACnB,UAAU,EAAE,MAAM;QAClB,OAAO,EAAE,QAAQ;QACjB,QAAQ,EAAE,MAAM;QAChB,QAAQ,EAAE,OAAO;KAClB,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAE9B,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,MAAM,IAAA,4BAAe,EAAC,WAAW,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QACzF,MAAM,MAAM,CAAC,IAAA,4BAAe,EAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,IAAI,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAChD,MAAM,MAAM,CAAC,IAAA,4BAAe,EAAC,EAAE,GAAG,WAAW,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/jiraClient.unit.test.ts"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { createJiraIssue } from '../src/main/app/infrastructure/integrations/jiraClient';\n\ndescribe('jiraClient (unit)', () => {\n  const mock = new MockAdapter(axios);\n  const JIRA_URL = 'http://jira.local';\n  const API_PATH = '/rest/api/2/issue';\n  const BASE_PARAMS = {\n    summary: 'Bug summary',\n    description: 'desc',\n    projectKey: 'TEST',\n    jiraUrl: JIRA_URL,\n    username: 'user',\n    apiToken: 'token',\n  };\n\n  afterEach(() => mock.reset());\n\n  it('should create a Jira issue', async () => {\n    mock.onPost(`${JIRA_URL}${API_PATH}`).reply(201, { key: 'TEST-123' });\n    const result = await createJiraIssue(BASE_PARAMS);\n    expect(result.key).toBe('TEST-123');\n    expect(result.url).toContain('TEST-123');\n  });\n\n  it('should handle Jira API error', async () => {\n    mock.onPost(`${JIRA_URL}${API_PATH}`).reply(400, { errorMessages: ['Invalid project'] });\n    await expect(createJiraIssue(BASE_PARAMS)).rejects.toThrow(/Invalid project/);\n  });\n\n  it('should handle Jira API timeout', async () => {\n    mock.onPost(`${JIRA_URL}${API_PATH}`).timeout();\n    await expect(createJiraIssue({ ...BASE_PARAMS, timeoutMs: 100 })).rejects.toThrow(/timed out/);\n  });\n}); "],"version":3}