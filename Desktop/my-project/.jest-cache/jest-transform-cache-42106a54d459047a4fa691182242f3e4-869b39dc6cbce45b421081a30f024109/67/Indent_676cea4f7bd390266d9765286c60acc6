a8cb5bd76164ba27b41b627014f86834
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classnames = _interopRequireDefault(require("classnames"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
var Indent = function Indent(_ref) {
  var prefixCls = _ref.prefixCls,
    level = _ref.level,
    isStart = _ref.isStart,
    isEnd = _ref.isEnd;
  var baseClassName = "".concat(prefixCls, "-indent-unit");
  var list = [];
  for (var i = 0; i < level; i += 1) {
    list.push(/*#__PURE__*/React.createElement("span", {
      key: i,
      className: (0, _classnames.default)(baseClassName, (0, _defineProperty2.default)((0, _defineProperty2.default)({}, "".concat(baseClassName, "-start"), isStart[i]), "".concat(baseClassName, "-end"), isEnd[i]))
    }));
  }
  return /*#__PURE__*/React.createElement("span", {
    "aria-hidden": "true",
    className: "".concat(prefixCls, "-indent")
  }, list);
};
var _default = exports.default = /*#__PURE__*/React.memo(Indent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90eXBlb2YiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2NsYXNzbmFtZXMiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiSW5kZW50IiwiX3JlZiIsInByZWZpeENscyIsImxldmVsIiwiaXNTdGFydCIsImlzRW5kIiwiYmFzZUNsYXNzTmFtZSIsImNvbmNhdCIsImxpc3QiLCJwdXNoIiwiY3JlYXRlRWxlbWVudCIsImtleSIsImNsYXNzTmFtZSIsIl9kZWZhdWx0IiwibWVtbyJdLCJzb3VyY2VzIjpbIkluZGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG52YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSBfdHlwZW9mKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbnZhciBJbmRlbnQgPSBmdW5jdGlvbiBJbmRlbnQoX3JlZikge1xuICB2YXIgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHMsXG4gICAgbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgIGlzU3RhcnQgPSBfcmVmLmlzU3RhcnQsXG4gICAgaXNFbmQgPSBfcmVmLmlzRW5kO1xuICB2YXIgYmFzZUNsYXNzTmFtZSA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5kZW50LXVuaXRcIik7XG4gIHZhciBsaXN0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWw7IGkgKz0gMSkge1xuICAgIGxpc3QucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGtleTogaSxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGJhc2VDbGFzc05hbWUsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBcIlwiLmNvbmNhdChiYXNlQ2xhc3NOYW1lLCBcIi1zdGFydFwiKSwgaXNTdGFydFtpXSksIFwiXCIuY29uY2F0KGJhc2VDbGFzc05hbWUsIFwiLWVuZFwiKSwgaXNFbmRbaV0pKVxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbmRlbnRcIilcbiAgfSwgbGlzdCk7XG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oSW5kZW50KTsiXSwibWFwcGluZ3MiOiJB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