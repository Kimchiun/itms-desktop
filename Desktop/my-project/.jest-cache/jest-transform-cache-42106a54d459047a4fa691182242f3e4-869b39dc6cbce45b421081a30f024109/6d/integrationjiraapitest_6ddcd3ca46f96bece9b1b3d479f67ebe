13cbf7b9875aae628cdf2f427f6a7d46
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// 모킹 설정 - 올바른 경로 사용
jest.mock('../src/main/app/infrastructure/database/pgClient', () => ({
    query: jest.fn().mockResolvedValue({ rows: [] }),
    connect: jest.fn().mockResolvedValue({}),
}));
jest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({
    search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),
    index: jest.fn().mockResolvedValue({}),
}));
const util_1 = require("util");
global.TextEncoder = util_1.TextEncoder;
global.TextDecoder = util_1.TextDecoder;
// ClearImmediate 폴리필 추가
if (typeof global.clearImmediate === 'undefined') {
    global.clearImmediate = jest.fn();
}
if (typeof global.ReadableStream === 'undefined') {
    global.ReadableStream = require('stream').Readable;
}
if (typeof global.setImmediate === 'undefined') {
    global.setImmediate = (fn, ...args) => setTimeout(fn, 0, ...args);
}
if (typeof global.Response === 'undefined') {
    global.Response = class {
    };
}
if (typeof global.TransformStream === 'undefined') {
    global.TransformStream = class {
    };
}
if (typeof global.Request === 'undefined') {
    global.Request = class {
    };
}
const supertest_1 = __importDefault(require("supertest"));
const app_1 = __importDefault(require("../src/main/app/app"));
const nock_1 = __importDefault(require("nock"));
// MSW와의 충돌 방지를 위한 설정
beforeAll(() => {
    // nock이 모든 HTTP 요청을 가로채도록 설정
    nock_1.default.disableNetConnect();
    nock_1.default.enableNetConnect('127.0.0.1');
    nock_1.default.enableNetConnect('localhost');
});
afterAll(() => {
    nock_1.default.restore();
});
describe('Jira Integration API', () => {
    const JIRA_URL = 'http://mock-jira.local';
    const API_PATH = '/rest/api/2/issue';
    const TEST_EXECUTION_ID = 1;
    const TEST_PARAMS = {
        executionId: TEST_EXECUTION_ID,
        summary: 'Test bug summary',
        description: 'Bug description',
        projectKey: 'TEST',
        jiraUrl: JIRA_URL,
        username: 'user',
        apiToken: 'token',
    };
    beforeEach(() => {
        // 각 테스트 전에 nock 초기화
        nock_1.default.cleanAll();
        jest.clearAllMocks();
    });
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('should create a Jira issue and update execution', async () => {
        (0, nock_1.default)(JIRA_URL)
            .post(API_PATH)
            .reply(201, { key: 'TEST-123' });
        const res = await (0, supertest_1.default)(app_1.default)
            .post('/api/integrations/jira-issue')
            .send(TEST_PARAMS);
        expect(res.status).toBe(200);
        expect(res.body.key).toBe('TEST-123');
        expect(res.body.url).toContain('TEST-123');
    }, 60000);
    it('should handle Jira API error', async () => {
        (0, nock_1.default)(JIRA_URL)
            .post(API_PATH)
            .reply(400, { errorMessages: ['Invalid project'] });
        const res = await (0, supertest_1.default)(app_1.default)
            .post('/api/integrations/jira-issue')
            .send(TEST_PARAMS);
        expect(res.status).toBe(500);
        expect(res.body.error).toMatch(/Invalid project/);
    }, 60000);
    it('should handle Jira API timeout', async () => {
        (0, nock_1.default)(JIRA_URL)
            .post(API_PATH)
            .delay(9000)
            .reply(201, { key: 'TEST-999' });
        const res = await (0, supertest_1.default)(app_1.default)
            .post('/api/integrations/jira-issue')
            .send({ ...TEST_PARAMS, timeoutMs: 1000 });
        expect(res.status).toBe(500);
        expect(res.body.error).toMatch(/timed out/);
    }, 60000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,