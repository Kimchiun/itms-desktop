{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/integration.jira.api.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/integration.jira.api.test.ts"],"sourcesContent":["import { TextEncoder, TextDecoder } from 'util';\n(global as any).TextEncoder = TextEncoder;\n(global as any).TextDecoder = TextDecoder;\n\n// ClearImmediate 폴리필 추가\nif (typeof (global as any).clearImmediate === 'undefined') {\n  (global as any).clearImmediate = jest.fn();\n}\n\nif (typeof (global as any).ReadableStream === 'undefined') {\n  (global as any).ReadableStream = require('stream').Readable;\n}\nif (typeof (global as any).setImmediate === 'undefined') {\n  (global as any).setImmediate = (fn: any, ...args: any[]) => setTimeout(fn, 0, ...args);\n}\nif (typeof (global as any).Response === 'undefined') {\n  (global as any).Response = class {};\n}\nif (typeof (global as any).TransformStream === 'undefined') {\n  (global as any).TransformStream = class {};\n}\nif (typeof (global as any).Request === 'undefined') {\n  (global as any).Request = class {};\n}\n\nimport request from 'supertest';\nimport app from '../src/main/app/app';\nimport nock from 'nock';\n\n// 모킹 설정 - 올바른 경로 사용\njest.mock('../src/main/app/infrastructure/database/pgClient', () => ({\n  query: jest.fn().mockResolvedValue({ rows: [] }),\n  connect: jest.fn().mockResolvedValue({}),\n}));\n\njest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({\n  search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),\n  index: jest.fn().mockResolvedValue({}),\n}));\n\n// MSW와의 충돌 방지를 위한 설정\nbeforeAll(() => {\n  // nock이 모든 HTTP 요청을 가로채도록 설정\n  nock.disableNetConnect();\n  nock.enableNetConnect('127.0.0.1');\n  nock.enableNetConnect('localhost');\n});\n\nafterAll(() => {\n  nock.restore();\n});\n\ndescribe('Jira Integration API', () => {\n    const JIRA_URL = 'http://mock-jira.local';\n    const API_PATH = '/rest/api/2/issue';\n    const TEST_EXECUTION_ID = 1;\n    const TEST_PARAMS = {\n        executionId: TEST_EXECUTION_ID,\n        summary: 'Test bug summary',\n        description: 'Bug description',\n        projectKey: 'TEST',\n        jiraUrl: JIRA_URL,\n        username: 'user',\n        apiToken: 'token',\n    };\n\n    beforeEach(() => {\n        // 각 테스트 전에 nock 초기화\n        nock.cleanAll();\n        jest.clearAllMocks();\n    });\n\n    afterEach(() => {\n        nock.cleanAll();\n    });\n\n    it('should create a Jira issue and update execution', async () => {\n        nock(JIRA_URL)\n            .post(API_PATH)\n            .reply(201, { key: 'TEST-123' });\n\n        const res = await request(app)\n            .post('/api/integrations/jira-issue')\n            .send(TEST_PARAMS);\n        expect(res.status).toBe(200);\n        expect(res.body.key).toBe('TEST-123');\n        expect(res.body.url).toContain('TEST-123');\n    }, 60000);\n\n    it('should handle Jira API error', async () => {\n        nock(JIRA_URL)\n            .post(API_PATH)\n            .reply(400, { errorMessages: ['Invalid project'] });\n\n        const res = await request(app)\n            .post('/api/integrations/jira-issue')\n            .send(TEST_PARAMS);\n        expect(res.status).toBe(500);\n        expect(res.body.error).toMatch(/Invalid project/);\n    }, 60000);\n\n    it('should handle Jira API timeout', async () => {\n        nock(JIRA_URL)\n            .post(API_PATH)\n            .delay(9000)\n            .reply(201, { key: 'TEST-999' });\n\n        const res = await request(app)\n            .post('/api/integrations/jira-issue')\n            .send({ ...TEST_PARAMS, timeoutMs: 1000 });\n        expect(res.status).toBe(500);\n        expect(res.body.error).toMatch(/timed out/);\n    }, 60000);\n}); "],"version":3}