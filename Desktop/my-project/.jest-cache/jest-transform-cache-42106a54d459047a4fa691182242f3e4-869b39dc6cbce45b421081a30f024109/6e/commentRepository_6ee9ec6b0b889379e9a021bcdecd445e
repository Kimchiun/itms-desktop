62f10ffd4a3382d8a5c0ab388a6cd7a5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commentRepository = void 0;
const pgClient_1 = __importDefault(require("../../../infrastructure/database/pgClient"));
exports.commentRepository = {
    async insert(comment) {
        const now = new Date();
        const result = await pgClient_1.default.query(`INSERT INTO comments (object_type, object_id, author, content, mentions, created_at, updated_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`, [
            comment.objectType,
            comment.objectId,
            comment.author,
            comment.content,
            comment.mentions,
            now,
            now
        ]);
        return mapRowToComment(result.rows[0]);
    },
    async findByObject(objectType, objectId) {
        const result = await pgClient_1.default.query(`SELECT * FROM comments WHERE object_type = $1 AND object_id = $2 ORDER BY created_at ASC`, [objectType, objectId]);
        return result.rows.map(mapRowToComment);
    },
    async update(id, content, mentions) {
        const now = new Date();
        const result = await pgClient_1.default.query(`UPDATE comments SET content = $1, mentions = $2, updated_at = $3 WHERE id = $4 RETURNING *`, [content, mentions, now, id]);
        if (result.rows.length === 0)
            return null;
        return mapRowToComment(result.rows[0]);
    },
    async delete(id) {
        const result = await pgClient_1.default.query(`DELETE FROM comments WHERE id = $1`, [id]);
        return (result.rowCount ?? 0) > 0;
    },
};
function mapRowToComment(row) {
    return {
        id: row.id,
        objectType: row.object_type,
        objectId: row.object_id,
        author: row.author,
        content: row.content,
        mentions: row.mentions || [],
        createdAt: row.created_at,
        updatedAt: row.updated_at,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9jb21tZW50cy9yZXBvc2l0b3JpZXMvY29tbWVudFJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EseUZBQXdGO0FBRTNFLFFBQUEsaUJBQWlCLEdBQUc7SUFDL0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUF3RDtRQUNuRSxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQ2pDO3VEQUNpRCxFQUNqRDtZQUNFLE9BQU8sQ0FBQyxVQUFVO1lBQ2xCLE9BQU8sQ0FBQyxRQUFRO1lBQ2hCLE9BQU8sQ0FBQyxNQUFNO1lBQ2QsT0FBTyxDQUFDLE9BQU87WUFDZixPQUFPLENBQUMsUUFBUTtZQUNoQixHQUFHO1lBQ0gsR0FBRztTQUNKLENBQ0YsQ0FBQztRQUNGLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFrQixFQUFFLFFBQWdCO1FBQ3JELE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQ2pDLDBGQUEwRixFQUMxRixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FDdkIsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBVSxFQUFFLE9BQWUsRUFBRSxRQUFrQjtRQUMxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQ2pDLDRGQUE0RixFQUM1RixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUM3QixDQUFDO1FBQ0YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDMUMsT0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVU7UUFDckIsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBUSxDQUFDLEtBQUssQ0FDakMsb0NBQW9DLEVBQ3BDLENBQUMsRUFBRSxDQUFDLENBQ0wsQ0FBQztRQUNGLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0YsQ0FBQztBQUVGLFNBQVMsZUFBZSxDQUFDLEdBQVE7SUFDL0IsT0FBTztRQUNMLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNWLFVBQVUsRUFBRSxHQUFHLENBQUMsV0FBVztRQUMzQixRQUFRLEVBQUUsR0FBRyxDQUFDLFNBQVM7UUFDdkIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO1FBQ2xCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztRQUNwQixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFO1FBQzVCLFNBQVMsRUFBRSxHQUFHLENBQUMsVUFBVTtRQUN6QixTQUFTLEVBQUUsR0FBRyxDQUFDLFVBQVU7S0FDMUIsQ0FBQztBQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy9jb21tZW50cy9yZXBvc2l0b3JpZXMvY29tbWVudFJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWVudCB9IGZyb20gJy4uL21vZGVscy9Db21tZW50JztcbmltcG9ydCBwZ0NsaWVudCwgeyBlbnN1cmVQZ0Nvbm5lY3RlZCB9IGZyb20gJy4uLy4uLy4uL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL3BnQ2xpZW50JztcblxuZXhwb3J0IGNvbnN0IGNvbW1lbnRSZXBvc2l0b3J5ID0ge1xuICBhc3luYyBpbnNlcnQoY29tbWVudDogT21pdDxDb21tZW50LCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0Jz4pOiBQcm9taXNlPENvbW1lbnQ+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KFxuICAgICAgYElOU0VSVCBJTlRPIGNvbW1lbnRzIChvYmplY3RfdHlwZSwgb2JqZWN0X2lkLCBhdXRob3IsIGNvbnRlbnQsIG1lbnRpb25zLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0KVxuICAgICAgIFZBTFVFUyAoJDEsICQyLCAkMywgJDQsICQ1LCAkNiwgJDcpIFJFVFVSTklORyAqYCxcbiAgICAgIFtcbiAgICAgICAgY29tbWVudC5vYmplY3RUeXBlLFxuICAgICAgICBjb21tZW50Lm9iamVjdElkLFxuICAgICAgICBjb21tZW50LmF1dGhvcixcbiAgICAgICAgY29tbWVudC5jb250ZW50LFxuICAgICAgICBjb21tZW50Lm1lbnRpb25zLFxuICAgICAgICBub3csXG4gICAgICAgIG5vd1xuICAgICAgXVxuICAgICk7XG4gICAgcmV0dXJuIG1hcFJvd1RvQ29tbWVudChyZXN1bHQucm93c1swXSk7XG4gIH0sXG4gIGFzeW5jIGZpbmRCeU9iamVjdChvYmplY3RUeXBlOiBzdHJpbmcsIG9iamVjdElkOiBudW1iZXIpOiBQcm9taXNlPENvbW1lbnRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KFxuICAgICAgYFNFTEVDVCAqIEZST00gY29tbWVudHMgV0hFUkUgb2JqZWN0X3R5cGUgPSAkMSBBTkQgb2JqZWN0X2lkID0gJDIgT1JERVIgQlkgY3JlYXRlZF9hdCBBU0NgLFxuICAgICAgW29iamVjdFR5cGUsIG9iamVjdElkXVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdC5yb3dzLm1hcChtYXBSb3dUb0NvbW1lbnQpO1xuICB9LFxuICBhc3luYyB1cGRhdGUoaWQ6IG51bWJlciwgY29udGVudDogc3RyaW5nLCBtZW50aW9uczogc3RyaW5nW10pOiBQcm9taXNlPENvbW1lbnQgfCBudWxsPiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZ0NsaWVudC5xdWVyeShcbiAgICAgIGBVUERBVEUgY29tbWVudHMgU0VUIGNvbnRlbnQgPSAkMSwgbWVudGlvbnMgPSAkMiwgdXBkYXRlZF9hdCA9ICQzIFdIRVJFIGlkID0gJDQgUkVUVVJOSU5HICpgLFxuICAgICAgW2NvbnRlbnQsIG1lbnRpb25zLCBub3csIGlkXVxuICAgICk7XG4gICAgaWYgKHJlc3VsdC5yb3dzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG1hcFJvd1RvQ29tbWVudChyZXN1bHQucm93c1swXSk7XG4gIH0sXG4gIGFzeW5jIGRlbGV0ZShpZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGdDbGllbnQucXVlcnkoXG4gICAgICBgREVMRVRFIEZST00gY29tbWVudHMgV0hFUkUgaWQgPSAkMWAsXG4gICAgICBbaWRdXG4gICAgKTtcbiAgICByZXR1cm4gKHJlc3VsdC5yb3dDb3VudCA/PyAwKSA+IDA7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBtYXBSb3dUb0NvbW1lbnQocm93OiBhbnkpOiBDb21tZW50IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogcm93LmlkLFxuICAgIG9iamVjdFR5cGU6IHJvdy5vYmplY3RfdHlwZSxcbiAgICBvYmplY3RJZDogcm93Lm9iamVjdF9pZCxcbiAgICBhdXRob3I6IHJvdy5hdXRob3IsXG4gICAgY29udGVudDogcm93LmNvbnRlbnQsXG4gICAgbWVudGlvbnM6IHJvdy5tZW50aW9ucyB8fCBbXSxcbiAgICBjcmVhdGVkQXQ6IHJvdy5jcmVhdGVkX2F0LFxuICAgIHVwZGF0ZWRBdDogcm93LnVwZGF0ZWRfYXQsXG4gIH07XG59ICJdLCJ2ZXJzaW9uIjozfQ==