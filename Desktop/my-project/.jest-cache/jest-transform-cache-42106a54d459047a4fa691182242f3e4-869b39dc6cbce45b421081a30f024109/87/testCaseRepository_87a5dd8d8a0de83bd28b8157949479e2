20eb282a8d1c28538a904b188beb9031
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestCase = createTestCase;
exports.getTestCaseById = getTestCaseById;
exports.updateTestCase = updateTestCase;
exports.deleteTestCase = deleteTestCase;
exports.listTestCases = listTestCases;
exports.createTestCaseVersion = createTestCaseVersion;
exports.listTestCaseVersions = listTestCaseVersions;
const pgClient_1 = __importStar(require("../../../infrastructure/database/pgClient"));
async function createTestCase(tc) {
    await (0, pgClient_1.ensurePgConnected)();
    const result = await pgClient_1.default.query(`INSERT INTO testcases (title, prereq, steps, expected, priority, tags, status, created_by) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`, [tc.title, tc.prereq, JSON.stringify(tc.steps), tc.expected, tc.priority, tc.tags, tc.status, tc.createdBy]);
    return rowToTestCase(result.rows[0]);
}
async function getTestCaseById(id) {
    await (0, pgClient_1.ensurePgConnected)();
    const result = await pgClient_1.default.query('SELECT * FROM testcases WHERE id = $1', [id]);
    if (result.rows.length === 0)
        return null;
    return rowToTestCase(result.rows[0]);
}
async function updateTestCase(id, patch) {
    await (0, pgClient_1.ensurePgConnected)();
    const current = await getTestCaseById(id);
    if (!current)
        return null;
    const result = await pgClient_1.default.query(`UPDATE testcases SET title=$1, prereq=$2, steps=$3, expected=$4, priority=$5, tags=$6, status=$7, updated_at=NOW() WHERE id=$8 RETURNING *`, [
        patch.title ?? current.title,
        patch.prereq ?? current.prereq,
        JSON.stringify(patch.steps ?? current.steps),
        patch.expected ?? current.expected,
        patch.priority ?? current.priority,
        patch.tags ?? current.tags,
        patch.status ?? current.status,
        id
    ]);
    if (result.rows.length === 0)
        return null;
    return rowToTestCase(result.rows[0]);
}
async function deleteTestCase(id) {
    await (0, pgClient_1.ensurePgConnected)();
    await pgClient_1.default.query('DELETE FROM testcase_versions WHERE testcase_id = $1', [id]);
    const result = await pgClient_1.default.query('DELETE FROM testcases WHERE id = $1', [id]);
    return (result.rowCount ?? 0) > 0;
}
async function listTestCases() {
    await (0, pgClient_1.ensurePgConnected)();
    const result = await pgClient_1.default.query('SELECT * FROM testcases ORDER BY id DESC');
    return result.rows.map(rowToTestCase);
}
async function createTestCaseVersion(tcVersion) {
    await (0, pgClient_1.ensurePgConnected)();
    const result = await pgClient_1.default.query(`INSERT INTO testcase_versions (testcase_id, version, data, created_by) VALUES ($1, $2, $3, $4) RETURNING *`, [tcVersion.testcaseId, tcVersion.version, JSON.stringify(tcVersion.data), tcVersion.createdBy]);
    return rowToTestCaseVersion(result.rows[0]);
}
async function listTestCaseVersions(testcaseId) {
    await (0, pgClient_1.ensurePgConnected)();
    const result = await pgClient_1.default.query('SELECT * FROM testcase_versions WHERE testcase_id = $1 ORDER BY version DESC', [testcaseId]);
    return result.rows.map(rowToTestCaseVersion);
}
function rowToTestCase(row) {
    return {
        id: row.id,
        title: row.title,
        prereq: row.prereq,
        steps: JSON.parse(row.steps),
        expected: row.expected,
        priority: row.priority,
        tags: row.tags,
        status: row.status,
        createdBy: row.created_by,
        createdAt: row.created_at,
        updatedAt: row.updated_at,
    };
}
function rowToTestCaseVersion(row) {
    let dataObj;
    if (typeof row.data === 'string') {
        dataObj = JSON.parse(row.data);
    }
    else {
        dataObj = row.data;
    }
    return {
        id: row.id,
        testcaseId: row.testcase_id,
        version: row.version,
        data: dataObj,
        createdAt: row.created_at,
        createdBy: row.created_by,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,