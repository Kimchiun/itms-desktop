b4cb4341aaa5777229072be0fdaef113
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const react_redux_1 = require("react-redux");
const styled_components_1 = require("styled-components");
const toolkit_1 = require("@reduxjs/toolkit");
const DashboardLayout_1 = __importDefault(require("../src/renderer/features/Dashboard/components/DashboardLayout"));
const dashboardLayoutSlice_1 = __importDefault(require("../src/renderer/store/dashboardLayoutSlice"));
const theme_1 = require("../src/renderer/shared/theme");
// 테스트용 스토어 설정
const createTestStore = (initialState = {}) => {
    return (0, toolkit_1.configureStore)({
        reducer: {
            dashboardLayout: dashboardLayoutSlice_1.default
        },
        preloadedState: {
            dashboardLayout: {
                leftPanel: { isCollapsed: false, width: 280 },
                rightPanel: { isCollapsed: false, width: 320 },
                centerPanel: { isFullWidth: false },
                activeTab: 'overview',
                ...initialState
            }
        }
    });
};
// 컴포넌트 렌더링 헬퍼
const renderDashboardLayout = (initialState = {}) => {
    const store = createTestStore(initialState);
    const result = (0, react_1.render)((0, jsx_runtime_1.jsx)(react_redux_1.Provider, { store: store, children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: theme_1.theme, children: (0, jsx_runtime_1.jsx)(DashboardLayout_1.default, {}) }) }));
    return { ...result, store };
};
describe('DashboardLayout - 3분할 레이아웃', () => {
    describe('기본 렌더링 테스트', () => {
        it('3분할 레이아웃이 정상적으로 렌더링되어야 함', () => {
            renderDashboardLayout();
            // 좌측 패널 확인
            expect(react_1.screen.getByText('ITMS')).toBeInTheDocument();
            expect(react_1.screen.getByText('대시보드')).toBeInTheDocument();
            expect(react_1.screen.getByText('테스트 케이스')).toBeInTheDocument();
            // 중앙 패널 확인
            expect(react_1.screen.getByText('대시보드')).toBeInTheDocument();
            expect(react_1.screen.getByText('프로젝트 현황 및 최근 활동을 확인하세요')).toBeInTheDocument();
            // 우측 패널 확인
            expect(react_1.screen.getByText('개인 작업')).toBeInTheDocument();
            expect(react_1.screen.getByText('내 작업 목록')).toBeInTheDocument();
        });
        it('모든 패널이 기본 상태로 표시되어야 함', () => {
            renderDashboardLayout();
            // 좌측 패널 토글 버튼
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            expect(leftToggleButton).toBeInTheDocument();
            expect(leftToggleButton).toHaveTextContent('←');
            // 우측 패널 토글 버튼
            const rightToggleButton = react_1.screen.getByTestId('right-toggle-button');
            expect(rightToggleButton).toBeInTheDocument();
            expect(rightToggleButton).toHaveTextContent('→');
        });
    });
    describe('패널 토글 기능 테스트', () => {
        it('좌측 패널 토글 버튼 클릭 시 패널이 축소되어야 함', async () => {
            renderDashboardLayout();
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            react_1.fireEvent.click(leftToggleButton);
            await (0, react_1.waitFor)(() => {
                // 축소된 상태의 토글 버튼 확인
                expect(react_1.screen.getByTestId('left-toggle-button')).toHaveTextContent('→');
            });
        });
        it('우측 패널 토글 버튼 클릭 시 패널이 축소되어야 함', async () => {
            renderDashboardLayout();
            const rightToggleButton = react_1.screen.getByTestId('right-toggle-button');
            react_1.fireEvent.click(rightToggleButton);
            await (0, react_1.waitFor)(() => {
                // 축소된 상태의 토글 버튼 확인
                expect(react_1.screen.getByTestId('right-toggle-button')).toHaveTextContent('←');
            });
        });
        it('축소된 패널을 다시 토글하면 확장되어야 함', async () => {
            renderDashboardLayout({
                leftPanel: { isCollapsed: true, width: 280 },
                rightPanel: { isCollapsed: true, width: 320 }
            });
            // 좌측 패널 확장
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            react_1.fireEvent.click(leftToggleButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('ITMS')).toBeInTheDocument();
            });
            // 우측 패널 확장
            const rightToggleButton = react_1.screen.getByTestId('right-toggle-button');
            react_1.fireEvent.click(rightToggleButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('개인 작업')).toBeInTheDocument();
            });
        });
    });
    describe('반응형 레이아웃 테스트', () => {
        it('다양한 화면 크기에서 레이아웃이 정상적으로 표시되어야 함', () => {
            // 1280x720 해상도 시뮬레이션
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 1280,
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 720,
            });
            renderDashboardLayout();
            // 레이아웃 컨테이너가 존재하는지 확인
            const layoutContainer = document.querySelector('[style*="grid-template-columns"]');
            expect(layoutContainer).toBeInTheDocument();
        });
        it('1920x1080 해상도에서도 정상 동작해야 함', () => {
            // 1920x1080 해상도 시뮬레이션
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 1920,
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 1080,
            });
            renderDashboardLayout();
            // 모든 패널이 정상적으로 렌더링되는지 확인
            expect(react_1.screen.getByText('ITMS')).toBeInTheDocument();
            expect(react_1.screen.getByText('대시보드')).toBeInTheDocument();
            expect(react_1.screen.getByText('개인 작업')).toBeInTheDocument();
        });
    });
    describe('접근성 테스트', () => {
        it('키보드로 모든 토글 버튼에 접근할 수 있어야 함', () => {
            renderDashboardLayout();
            // Tab 키로 포커스 이동
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            const rightToggleButton = react_1.screen.getByTestId('right-toggle-button');
            leftToggleButton.focus();
            expect(leftToggleButton).toHaveFocus();
            // Enter 키로 토글 동작
            react_1.fireEvent.keyDown(leftToggleButton, { key: 'Enter', code: 'Enter' });
            rightToggleButton.focus();
            expect(rightToggleButton).toHaveFocus();
            react_1.fireEvent.keyDown(rightToggleButton, { key: 'Enter', code: 'Enter' });
        });
        it('스크린 리더가 레이아웃 구조를 인식할 수 있어야 함', () => {
            renderDashboardLayout();
            // 랜드마크 역할 확인
            const mainContent = react_1.screen.getByRole('main') || document.querySelector('main');
            expect(mainContent).toBeInTheDocument();
            // 네비게이션 영역 확인
            const navigation = react_1.screen.getByRole('navigation') || document.querySelector('nav');
            expect(navigation).toBeInTheDocument();
        });
    });
    describe('성능 테스트', () => {
        it('패널 토글 시 애니메이션이 부드럽게 동작해야 함', async () => {
            const startTime = performance.now();
            renderDashboardLayout();
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            react_1.fireEvent.click(leftToggleButton);
            // 애니메이션 완료 대기 (300ms)
            await (0, react_1.waitFor)(() => {
                const endTime = performance.now();
                expect(endTime - startTime).toBeLessThan(500); // 500ms 이내 완료
            }, { timeout: 1000 });
        });
        it('대량의 데이터가 있어도 렌더링 성능이 유지되어야 함', () => {
            const renderStart = performance.now();
            renderDashboardLayout();
            const renderEnd = performance.now();
            // 초기 렌더링이 100ms 이내에 완료되어야 함
            expect(renderEnd - renderStart).toBeLessThan(100);
        });
    });
    describe('상태 관리 테스트', () => {
        it('Redux 스토어의 상태가 UI와 동기화되어야 함', () => {
            const { store } = renderDashboardLayout();
            // 초기 상태 확인
            let state = store.getState();
            expect(state.dashboardLayout.leftPanel.isCollapsed).toBe(false);
            expect(state.dashboardLayout.rightPanel.isCollapsed).toBe(false);
            // 좌측 패널 토글
            const leftToggleButton = react_1.screen.getByTestId('left-toggle-button');
            react_1.fireEvent.click(leftToggleButton);
            // 상태 변경 확인
            state = store.getState();
            expect(state.dashboardLayout.leftPanel.isCollapsed).toBe(true);
        });
        it('패널 너비 설정이 정상적으로 동작해야 함', () => {
            const { store } = renderDashboardLayout({
                leftPanel: { isCollapsed: false, width: 300 },
                rightPanel: { isCollapsed: false, width: 350 }
            });
            const state = store.getState();
            expect(state.dashboardLayout.leftPanel.width).toBe(300);
            expect(state.dashboardLayout.rightPanel.width).toBe(350);
        });
    });
    describe('에러 처리 테스트', () => {
        it('잘못된 상태로 렌더링되어도 에러가 발생하지 않아야 함', () => {
            // 잘못된 초기 상태로 렌더링
            expect(() => {
                renderDashboardLayout({
                    leftPanel: { isCollapsed: null, width: -100 },
                    rightPanel: { isCollapsed: undefined, width: 0 }
                });
            }).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy9kYXNoYm9hcmQubGF5b3V0LnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGtEQUE0RTtBQUM1RSw2Q0FBdUM7QUFDdkMseURBQWtEO0FBQ2xELDhDQUFrRDtBQUNsRCxvSEFBNEY7QUFDNUYsc0dBQWdGO0FBQ2hGLHdEQUFxRDtBQUVyRCxjQUFjO0FBQ2QsTUFBTSxlQUFlLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDNUMsT0FBTyxJQUFBLHdCQUFjLEVBQUM7UUFDcEIsT0FBTyxFQUFFO1lBQ1AsZUFBZSxFQUFFLDhCQUFzQjtTQUN4QztRQUNELGNBQWMsRUFBRTtZQUNkLGVBQWUsRUFBRTtnQkFDZixTQUFTLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQzdDLFVBQVUsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDOUMsV0FBVyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtnQkFDbkMsU0FBUyxFQUFFLFVBQVU7Z0JBQ3JCLEdBQUcsWUFBWTthQUNoQjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsY0FBYztBQUNkLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDbEQsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLE1BQU0sTUFBTSxHQUFHLElBQUEsY0FBTSxFQUNuQix1QkFBQyxzQkFBUSxJQUFDLEtBQUssRUFBRSxLQUFLLFlBQ3BCLHVCQUFDLGlDQUFhLElBQUMsS0FBSyxFQUFFLGFBQUssWUFDekIsdUJBQUMseUJBQWUsS0FBRyxHQUNMLEdBQ1AsQ0FDWixDQUFDO0lBQ0YsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFD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RSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTthQUMvQyxDQUFDLENBQUM7WUFFSCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLGlCQUFpQjtZQUNqQixNQUFNLENBQUMsR0FBRyxFQUFFO2dCQUNWLHFCQUFxQixDQUFDO29CQUNwQixTQUFTLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBVyxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRTtvQkFDcEQsVUFBVSxFQUFFLEVBQUUsV0FBVyxFQUFFLFNBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtpQkFDeEQsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3Rlc3RzL2Rhc2hib2FyZC5sYXlvdXQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgRGFzaGJvYXJkTGF5b3V0IGZyb20gJy4uL3NyYy9yZW5kZXJlci9mZWF0dXJlcy9EYXNoYm9hcmQvY29tcG9uZW50cy9EYXNoYm9hcmRMYXlvdXQnO1xuaW1wb3J0IGRhc2hib2FyZExheW91dFJlZHVjZXIgZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3N0b3JlL2Rhc2hib2FyZExheW91dFNsaWNlJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vc3JjL3JlbmRlcmVyL3NoYXJlZC90aGVtZSc7XG5cbi8vIO2FjOyKpO2KuOyaqSDsiqTthqDslrQg7ISk7KCVXG5jb25zdCBjcmVhdGVUZXN0U3RvcmUgPSAoaW5pdGlhbFN0YXRlID0ge30pID0+IHtcbiAgcmV0dXJuIGNvbmZpZ3VyZVN0b3JlKHtcbiAgICByZWR1Y2VyOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IGRhc2hib2FyZExheW91dFJlZHVjZXJcbiAgICB9LFxuICAgIHByZWxvYWRlZFN0YXRlOiB7XG4gICAgICBkYXNoYm9hcmRMYXlvdXQ6IHtcbiAgICAgICAgbGVmdFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDI4MCB9LFxuICAgICAgICByaWdodFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBmYWxzZSwgd2lkdGg6IDMyMCB9LFxuICAgICAgICBjZW50ZXJQYW5lbDogeyBpc0Z1bGxXaWR0aDogZmFsc2UgfSxcbiAgICAgICAgYWN0aXZlVGFiOiAnb3ZlcnZpZXcnLFxuICAgICAgICAuLi5pbml0aWFsU3RhdGVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLy8g7Lu07Y+s64SM7Yq4IOugjOuNlOungSDtl6ztjbxcbmNvbnN0IHJlbmRlckRhc2hib2FyZExheW91dCA9IChpbml0aWFsU3RhdGUgPSB7fSkgPT4ge1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVRlc3RTdG9yZShpbml0aWFsU3RhdGUpO1xuICBjb25zdCByZXN1bHQgPSByZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgICA8RGFzaGJvYXJkTGF5b3V0IC8+XG4gICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgPC9Qcm92aWRlcj5cbiAgKTtcbiAgcmV0dXJuIHsgLi4ucmVzdWx0LCBzdG9yZSB9O1xufTtcblxuZGVzY3JpYmUoJ0Rhc2hib2FyZExheW91dCAtIDPrtoTtlaAg66CI7J207JWE7JuDJywgKCkgPT4ge1xuICBkZXNjcmliZSgn6riw67O4IOugjOuNlOungSDthYzsiqTtirgnLCAoKSA9PiB7XG4gICAgaXQoJzPrtoTtlaAg66CI7J207JWE7JuD7J20IOygleyDgeyggeycvOuhnCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgcmVuZGVyRGFzaGJvYXJkTGF5b3V0KCk7XG4gICAgICBcbiAgICAgIC8vIOyijOy4oSDtjKjrhJAg7ZmV7J24XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSVRNUycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uMgOyLnOuztOuTnCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+2FjOyKpO2KuCDsvIDsnbTsiqQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgLy8g7KSR7JWZIO2MqOuEkCDtmZXsnbhcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfrjIDsi5zrs7Trk5wnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCftlITroZzsoJ3tirgg7ZiE7ZmpIOuwjyDstZzqt7wg7Zmc64+Z7J2EIO2ZleyduO2VmOyEuOyalCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgXG4gICAgICAvLyDsmrDsuKEg7Yyo64SQIO2ZleyduFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+qwnOyduCDsnpHsl4UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfrgrQg7J6R7JeFIOuqqeuhnScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+uqqOuToCDtjKjrhJDsnbQg6riw67O4IOyDge2DnOuhnCDtkZzsi5zrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xuICAgICAgcmVuZGVyRGFzaGJvYXJkTGF5b3V0KCk7XG4gICAgICBcbiAgICAgIC8vIOyijOy4oSDtjKjrhJAg7Yag6riAIOuyhO2KvFxuICAgICAgY29uc3QgbGVmdFRvZ2dsZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGVmdC10b2dnbGUtYnV0dG9uJyk7XG4gICAgICBleHBlY3QobGVmdFRvZ2dsZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChsZWZ0VG9nZ2xlQnV0dG9uKS50b0hhdmVUZXh0Q29udGVudCgn4oaQJyk7XG4gICAgICBcbiAgICAgIC8vIOyasOy4oSDtjKjrhJAg7Yag6riAIOuyhO2KvFxuICAgICAgY29uc3QgcmlnaHRUb2dnbGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JpZ2h0LXRvZ2dsZS1idXR0b24nKTtcbiAgICAgIGV4cGVjdChyaWdodFRvZ2dsZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChyaWdodFRvZ2dsZUJ1dHRvbikudG9IYXZlVGV4dENvbnRlbnQoJ+KGkicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn7Yyo64SQIO2GoOq4gCDquLDriqUg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGl0KCfsoozsuKEg7Yyo64SQIO2GoOq4gCDrsoTtirwg7YG066atIOyLnCDtjKjrhJDsnbQg7LaV7IaM65CY7Ja07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlckRhc2hib2FyZExheW91dCgpO1xuICAgICAgXG4gICAgICBjb25zdCBsZWZ0VG9nZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZWZ0LXRvZ2dsZS1idXR0b24nKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhsZWZ0VG9nZ2xlQnV0dG9uKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIC8vIOy2leyGjOuQnCDsg4Htg5zsnZgg7Yag6riAIOuyhO2KvCDtmZXsnbhcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbGVmdC10b2dnbGUtYnV0dG9uJykpLnRvSGF2ZVRleHRDb250ZW50KCfihpInKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+yasOy4oSDtjKjrhJAg7Yag6riAIOuyhO2KvCDtgbTrpq0g7IucIO2MqOuEkOydtCDstpXshozrkJjslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyRGFzaGJvYXJkTGF5b3V0KCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJpZ2h0VG9nZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyaWdodC10b2dnbGUtYnV0dG9uJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2socmlnaHRUb2dnbGVCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgLy8g7LaV7IaM65CcIOyDge2DnOydmCDthqDquIAg67KE7Yq8IO2ZleyduFxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdyaWdodC10b2dnbGUtYnV0dG9uJykpLnRvSGF2ZVRleHRDb250ZW50KCfihpAnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+y2leyGjOuQnCDtjKjrhJDsnYQg64uk7IucIO2GoOq4gO2VmOuptCDtmZXsnqXrkJjslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyRGFzaGJvYXJkTGF5b3V0KHtcbiAgICAgICAgbGVmdFBhbmVsOiB7IGlzQ29sbGFwc2VkOiB0cnVlLCB3aWR0aDogMjgwIH0sXG4gICAgICAgIHJpZ2h0UGFuZWw6IHsgaXNDb2xsYXBzZWQ6IHRydWUsIHdpZHRoOiAzMjAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIOyijOy4oSDtjKjrhJAg7ZmV7J6lXG4gICAgICBjb25zdCBsZWZ0VG9nZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdsZWZ0LXRvZ2dsZS1idXR0b24nKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhsZWZ0VG9nZ2xlQnV0dG9uKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdJVE1TJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8g7Jqw7LihIO2MqOuEkCDtmZXsnqVcbiAgICAgIGNvbnN0IHJpZ2h0VG9nZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyaWdodC10b2dnbGUtYnV0dG9uJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2socmlnaHRUb2dnbGVCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+qwnOyduCDsnpHsl4UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn67CY7J2R7ZiVIOugiOydtOyVhOybgyDthYzsiqTtirgnLCAoKSA9PiB7XG4gICAgaXQoJ+uLpOyWke2VnCDtmZTrqbQg7YGs6riw7JeQ7IScIOugiOydtOyVhOybg+ydtCDsoJXsg4HsoIHsnLzroZwg7ZGc7Iuc65CY7Ja07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIC8vIDEyODB4NzIwIO2VtOyDgeuPhCDsi5zrrqzroIjsnbTshZhcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdpbm5lcldpZHRoJywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogMTI4MCxcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lubmVySGVpZ2h0Jywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogNzIwLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJlbmRlckRhc2hib2FyZExheW91dCgpO1xuICAgICAgXG4gICAgICAvLyDroIjsnbTslYTsm4Mg7Luo7YWM7J2064SI6rCAIOyhtOyerO2VmOuKlOyngCDtmZXsnbhcbiAgICAgIGNvbnN0IGxheW91dENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tzdHlsZSo9XCJncmlkLXRlbXBsYXRlLWNvbHVtbnNcIl0nKTtcbiAgICAgIGV4cGVjdChsYXlvdXRDb250YWluZXIpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnMTkyMHgxMDgwIO2VtOyDgeuPhOyXkOyEnOuPhCDsoJXsg4Eg64+Z7J6R7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIC8vIDE5MjB4MTA4MCDtlbTsg4Hrj4Qg7Iuc666s66CI7J207IWYXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaW5uZXJXaWR0aCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IDE5MjAsXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdpbm5lckhlaWdodCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IDEwODAsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcmVuZGVyRGFzaGJvYXJkTGF5b3V0KCk7XG4gICAgICBcbiAgICAgIC8vIOuqqOuToCDtjKjrhJDsnbQg7KCV7IOB7KCB7Jy866GcIOugjOuNlOungeuQmOuKlOyngCDtmZXsnbhcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdJVE1TJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn64yA7Iuc67O065OcJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn6rCc7J24IOyekeyXhScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn7KCR6re87ISxIO2FjOyKpO2KuCcsICgpID0+IHtcbiAgICBpdCgn7YKk67O065Oc66GcIOuqqOuToCDthqDquIAg67KE7Yq87JeQIOygkeq3vO2VoCDsiJgg7J6I7Ja07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIHJlbmRlckRhc2hib2FyZExheW91dCgpO1xuICAgICAgXG4gICAgICAvLyBUYWIg7YKk66GcIO2PrOy7pOyKpCDsnbTrj5lcbiAgICAgIGNvbnN0IGxlZnRUb2dnbGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xlZnQtdG9nZ2xlLWJ1dHRvbicpO1xuICAgICAgY29uc3QgcmlnaHRUb2dnbGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JpZ2h0LXRvZ2dsZS1idXR0b24nKTtcbiAgICAgIFxuICAgICAgbGVmdFRvZ2dsZUJ1dHRvbi5mb2N1cygpO1xuICAgICAgZXhwZWN0KGxlZnRUb2dnbGVCdXR0b24pLnRvSGF2ZUZvY3VzKCk7XG4gICAgICBcbiAgICAgIC8vIEVudGVyIO2CpOuhnCDthqDquIAg64+Z7J6RXG4gICAgICBmaXJlRXZlbnQua2V5RG93bihsZWZ0VG9nZ2xlQnV0dG9uLCB7IGtleTogJ0VudGVyJywgY29kZTogJ0VudGVyJyB9KTtcbiAgICAgIFxuICAgICAgcmlnaHRUb2dnbGVCdXR0b24uZm9jdXMoKTtcbiAgICAgIGV4cGVjdChyaWdodFRvZ2dsZUJ1dHRvbikudG9IYXZlRm9jdXMoKTtcbiAgICAgIFxuICAgICAgZmlyZUV2ZW50LmtleURvd24ocmlnaHRUb2dnbGVCdXR0b24sIHsga2V5OiAnRW50ZXInLCBjb2RlOiAnRW50ZXInIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+yKpO2BrOumsCDrpqzrjZTqsIAg66CI7J207JWE7JuDIOq1rOyhsOulvCDsnbjsi53tlaAg7IiYIOyeiOyWtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICByZW5kZXJEYXNoYm9hcmRMYXlvdXQoKTtcbiAgICAgIFxuICAgICAgLy8g656c65Oc66eI7YGsIOyXre2VoCDtmZXsnbhcbiAgICAgIGNvbnN0IG1haW5Db250ZW50ID0gc2NyZWVuLmdldEJ5Um9sZSgnbWFpbicpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcbiAgICAgIGV4cGVjdChtYWluQ29udGVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgLy8g64Sk67mE6rKM7J207IWYIOyYgeyXrSDtmZXsnbhcbiAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSBzY3JlZW4uZ2V0QnlSb2xlKCduYXZpZ2F0aW9uJykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2Jyk7XG4gICAgICBleHBlY3QobmF2aWdhdGlvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+yEseuKpSDthYzsiqTtirgnLCAoKSA9PiB7XG4gICAgaXQoJ+2MqOuEkCDthqDquIAg7IucIOyVoOuLiOuplOydtOyFmOydtCDrtoDrk5zrn73qsowg64+Z7J6R7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgXG4gICAgICByZW5kZXJEYXNoYm9hcmRMYXlvdXQoKTtcbiAgICAgIFxuICAgICAgY29uc3QgbGVmdFRvZ2dsZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGVmdC10b2dnbGUtYnV0dG9uJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sobGVmdFRvZ2dsZUJ1dHRvbik7XG4gICAgICBcbiAgICAgIC8vIOyVoOuLiOuplOydtOyFmCDsmYTro4wg64yA6riwICgzMDBtcylcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oNTAwKTsgLy8gNTAwbXMg7J2064K0IOyZhOujjFxuICAgICAgfSwgeyB0aW1lb3V0OiAxMDAwIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+uMgOufieydmCDrjbDsnbTthLDqsIAg7J6I7Ja064+EIOugjOuNlOungSDshLHriqXsnbQg7Jyg7KeA65CY7Ja07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlclN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBcbiAgICAgIHJlbmRlckRhc2hib2FyZExheW91dCgpO1xuICAgICAgXG4gICAgICBjb25zdCByZW5kZXJFbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIFxuICAgICAgLy8g7LSI6riwIOugjOuNlOungeydtCAxMDBtcyDsnbTrgrTsl5Ag7JmE66OM65CY7Ja07JW8IO2VqFxuICAgICAgZXhwZWN0KHJlbmRlckVuZCAtIHJlbmRlclN0YXJ0KS50b0JlTGVzc1RoYW4oMTAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+yDge2DnCDqtIDrpqwg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGl0KCdSZWR1eCDsiqTthqDslrTsnZgg7IOB7YOc6rCAIFVJ7JmAIOuPmeq4sO2ZlOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHN0b3JlIH0gPSByZW5kZXJEYXNoYm9hcmRMYXlvdXQoKTtcbiAgICAgIFxuICAgICAgLy8g7LSI6riwIOyDge2DnCDtmZXsnbhcbiAgICAgIGxldCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBleHBlY3Qoc3RhdGUuZGFzaGJvYXJkTGF5b3V0LmxlZnRQYW5lbC5pc0NvbGxhcHNlZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3Qoc3RhdGUuZGFzaGJvYXJkTGF5b3V0LnJpZ2h0UGFuZWwuaXNDb2xsYXBzZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyDsoozsuKEg7Yyo64SQIO2GoOq4gFxuICAgICAgY29uc3QgbGVmdFRvZ2dsZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbGVmdC10b2dnbGUtYnV0dG9uJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sobGVmdFRvZ2dsZUJ1dHRvbik7XG4gICAgICBcbiAgICAgIC8vIOyDge2DnCDrs4Dqsr0g7ZmV7J24XG4gICAgICBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBleHBlY3Qoc3RhdGUuZGFzaGJvYXJkTGF5b3V0LmxlZnRQYW5lbC5pc0NvbGxhcHNlZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCftjKjrhJAg64SI67mEIOyEpOygleydtCDsoJXsg4HsoIHsnLzroZwg64+Z7J6R7ZW07JW8IO2VqCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc3RvcmUgfSA9IHJlbmRlckRhc2hib2FyZExheW91dCh7XG4gICAgICAgIGxlZnRQYW5lbDogeyBpc0NvbGxhcHNlZDogZmFsc2UsIHdpZHRoOiAzMDAgfSxcbiAgICAgICAgcmlnaHRQYW5lbDogeyBpc0NvbGxhcHNlZDogZmFsc2UsIHdpZHRoOiAzNTAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGV4cGVjdChzdGF0ZS5kYXNoYm9hcmRMYXlvdXQubGVmdFBhbmVsLndpZHRoKS50b0JlKDMwMCk7XG4gICAgICBleHBlY3Qoc3RhdGUuZGFzaGJvYXJkTGF5b3V0LnJpZ2h0UGFuZWwud2lkdGgpLnRvQmUoMzUwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+yXkOufrCDsspjrpqwg7YWM7Iqk7Yq4JywgKCkgPT4ge1xuICAgIGl0KCfsnpjrqrvrkJwg7IOB7YOc66GcIOugjOuNlOungeuQmOyWtOuPhCDsl5Drn6zqsIAg67Cc7IOd7ZWY7KeAIOyViuyVhOyVvCDtlagnLCAoKSA9PiB7XG4gICAgICAvLyDsnpjrqrvrkJwg7LSI6riwIOyDge2DnOuhnCDroIzrjZTrp4FcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlckRhc2hib2FyZExheW91dCh7XG4gICAgICAgICAgbGVmdFBhbmVsOiB7IGlzQ29sbGFwc2VkOiBudWxsIGFzIGFueSwgd2lkdGg6IC0xMDAgfSxcbiAgICAgICAgICByaWdodFBhbmVsOiB7IGlzQ29sbGFwc2VkOiB1bmRlZmluZWQgYXMgYW55LCB3aWR0aDogMCB9XG4gICAgICAgIH0pO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG59KTsgIl0sInZlcnNpb24iOjN9