bda6afe60af831921e5dca60b40661a9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testCaseRepository_1 = require("../src/main/app/domains/testcases/repositories/testCaseRepository");
const pgClient_1 = __importStar(require("../src/main/app/infrastructure/database/pgClient"));
describe('TestCaseRepository', () => {
    let testcaseId;
    beforeAll(async () => {
        await (0, pgClient_1.ensurePgConnected)();
        await pgClient_1.default.query('DELETE FROM testcase_versions');
        await pgClient_1.default.query('DELETE FROM testcases');
    });
    it('createTestCase & getTestCaseById', async () => {
        const tc = await (0, testCaseRepository_1.createTestCase)({
            title: 'TC1',
            prereq: 'none',
            steps: ['step1', 'step2'],
            expected: 'ok',
            priority: 'High',
            tags: ['smoke'],
            status: 'Active',
            createdBy: 'tester',
        });
        testcaseId = tc.id;
        expect(tc.title).toBe('TC1');
        const found = await (0, testCaseRepository_1.getTestCaseById)(tc.id);
        expect(found?.id).toBe(tc.id);
    });
    it('updateTestCase', async () => {
        const updated = await (0, testCaseRepository_1.updateTestCase)(testcaseId, { title: 'TC1-upd', steps: ['step1'], status: 'Archived' });
        expect(updated?.title).toBe('TC1-upd');
        expect(updated?.status).toBe('Archived');
    });
    it('listTestCases', async () => {
        const list = await (0, testCaseRepository_1.listTestCases)();
        expect(list.length).toBeGreaterThan(0);
    });
    it('createTestCaseVersion & listTestCaseVersions', async () => {
        const v = await (0, testCaseRepository_1.createTestCaseVersion)({
            testcaseId,
            version: 1,
            data: { title: 'TC1', prereq: 'none', steps: ['step1', 'step2'], expected: 'ok', priority: 'High', tags: ['smoke'], status: 'Active', createdBy: 'tester' },
            createdBy: 'tester',
        });
        expect(v.version).toBe(1);
        const versions = await (0, testCaseRepository_1.listTestCaseVersions)(testcaseId);
        expect(versions.length).toBeGreaterThan(0);
    });
    it('deleteTestCase', async () => {
        const ok = await (0, testCaseRepository_1.deleteTestCase)(testcaseId);
        expect(ok).toBe(true);
        const found = await (0, testCaseRepository_1.getTestCaseById)(testcaseId);
        expect(found).toBeNull();
    });
    afterAll(async () => {
        await pgClient_1.default.query('DELETE FROM testcase_versions');
        await pgClient_1.default.query('DELETE FROM testcases');
        await pgClient_1.default.end();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy90ZXN0Y2FzZS5yZXBvc2l0b3J5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwR0FBZ047QUFDaE4sNkZBQStGO0FBRS9GLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsSUFBSSxVQUFrQixDQUFDO0lBQ3ZCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsNEJBQWlCLEdBQUUsQ0FBQztRQUMxQixNQUFNLGtCQUFRLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDdEQsTUFBTSxrQkFBUSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hELE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBQSxtQ0FBYyxFQUFDO1lBQzlCLEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLE1BQU07WUFDZCxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO1lBQ3pCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsUUFBUSxFQUFFLE1BQU07WUFDaEIsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ2YsTUFBTSxFQUFFLFFBQVE7WUFDaEIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLG9DQUFlLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5QixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsbUNBQWMsRUFBQyxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsa0NBQWEsR0FBRSxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzVELE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQSwwQ0FBcUIsRUFBQztZQUNwQyxVQUFVO1lBQ1YsT0FBTyxFQUFFLENBQUM7WUFDVixJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUU7WUFDM0osU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLHlDQUFvQixFQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlCLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBQSxtQ0FBYyxFQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLG9DQUFlLEVBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUN0RCxNQUFNLGtCQUFRLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDOUMsTUFBTSxrQkFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy90ZXN0Y2FzZS5yZXBvc2l0b3J5LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlVGVzdENhc2UsIGdldFRlc3RDYXNlQnlJZCwgdXBkYXRlVGVzdENhc2UsIGRlbGV0ZVRlc3RDYXNlLCBsaXN0VGVzdENhc2VzLCBjcmVhdGVUZXN0Q2FzZVZlcnNpb24sIGxpc3RUZXN0Q2FzZVZlcnNpb25zIH0gZnJvbSAnLi4vc3JjL21haW4vYXBwL2RvbWFpbnMvdGVzdGNhc2VzL3JlcG9zaXRvcmllcy90ZXN0Q2FzZVJlcG9zaXRvcnknO1xuaW1wb3J0IHBnQ2xpZW50LCB7IGVuc3VyZVBnQ29ubmVjdGVkIH0gZnJvbSAnLi4vc3JjL21haW4vYXBwL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL3BnQ2xpZW50JztcblxuZGVzY3JpYmUoJ1Rlc3RDYXNlUmVwb3NpdG9yeScsICgpID0+IHtcbiAgbGV0IHRlc3RjYXNlSWQ6IG51bWJlcjtcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBlbnN1cmVQZ0Nvbm5lY3RlZCgpO1xuICAgIGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KCdERUxFVEUgRlJPTSB0ZXN0Y2FzZV92ZXJzaW9ucycpO1xuICAgIGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KCdERUxFVEUgRlJPTSB0ZXN0Y2FzZXMnKTtcbiAgfSk7XG5cbiAgaXQoJ2NyZWF0ZVRlc3RDYXNlICYgZ2V0VGVzdENhc2VCeUlkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRjID0gYXdhaXQgY3JlYXRlVGVzdENhc2Uoe1xuICAgICAgdGl0bGU6ICdUQzEnLFxuICAgICAgcHJlcmVxOiAnbm9uZScsXG4gICAgICBzdGVwczogWydzdGVwMScsICdzdGVwMiddLFxuICAgICAgZXhwZWN0ZWQ6ICdvaycsXG4gICAgICBwcmlvcml0eTogJ0hpZ2gnLFxuICAgICAgdGFnczogWydzbW9rZSddLFxuICAgICAgc3RhdHVzOiAnQWN0aXZlJyxcbiAgICAgIGNyZWF0ZWRCeTogJ3Rlc3RlcicsXG4gICAgfSk7XG4gICAgdGVzdGNhc2VJZCA9IHRjLmlkO1xuICAgIGV4cGVjdCh0Yy50aXRsZSkudG9CZSgnVEMxJyk7XG4gICAgY29uc3QgZm91bmQgPSBhd2FpdCBnZXRUZXN0Q2FzZUJ5SWQodGMuaWQpO1xuICAgIGV4cGVjdChmb3VuZD8uaWQpLnRvQmUodGMuaWQpO1xuICB9KTtcblxuICBpdCgndXBkYXRlVGVzdENhc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZVRlc3RDYXNlKHRlc3RjYXNlSWQsIHsgdGl0bGU6ICdUQzEtdXBkJywgc3RlcHM6IFsnc3RlcDEnXSwgc3RhdHVzOiAnQXJjaGl2ZWQnIH0pO1xuICAgIGV4cGVjdCh1cGRhdGVkPy50aXRsZSkudG9CZSgnVEMxLXVwZCcpO1xuICAgIGV4cGVjdCh1cGRhdGVkPy5zdGF0dXMpLnRvQmUoJ0FyY2hpdmVkJyk7XG4gIH0pO1xuXG4gIGl0KCdsaXN0VGVzdENhc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBsaXN0VGVzdENhc2VzKCk7XG4gICAgZXhwZWN0KGxpc3QubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gIH0pO1xuXG4gIGl0KCdjcmVhdGVUZXN0Q2FzZVZlcnNpb24gJiBsaXN0VGVzdENhc2VWZXJzaW9ucycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB2ID0gYXdhaXQgY3JlYXRlVGVzdENhc2VWZXJzaW9uKHtcbiAgICAgIHRlc3RjYXNlSWQsXG4gICAgICB2ZXJzaW9uOiAxLFxuICAgICAgZGF0YTogeyB0aXRsZTogJ1RDMScsIHByZXJlcTogJ25vbmUnLCBzdGVwczogWydzdGVwMScsICdzdGVwMiddLCBleHBlY3RlZDogJ29rJywgcHJpb3JpdHk6ICdIaWdoJywgdGFnczogWydzbW9rZSddLCBzdGF0dXM6ICdBY3RpdmUnLCBjcmVhdGVkQnk6ICd0ZXN0ZXInIH0sXG4gICAgICBjcmVhdGVkQnk6ICd0ZXN0ZXInLFxuICAgIH0pO1xuICAgIGV4cGVjdCh2LnZlcnNpb24pLnRvQmUoMSk7XG4gICAgY29uc3QgdmVyc2lvbnMgPSBhd2FpdCBsaXN0VGVzdENhc2VWZXJzaW9ucyh0ZXN0Y2FzZUlkKTtcbiAgICBleHBlY3QodmVyc2lvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gIH0pO1xuXG4gIGl0KCdkZWxldGVUZXN0Q2FzZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBvayA9IGF3YWl0IGRlbGV0ZVRlc3RDYXNlKHRlc3RjYXNlSWQpO1xuICAgIGV4cGVjdChvaykudG9CZSh0cnVlKTtcbiAgICBjb25zdCBmb3VuZCA9IGF3YWl0IGdldFRlc3RDYXNlQnlJZCh0ZXN0Y2FzZUlkKTtcbiAgICBleHBlY3QoZm91bmQpLnRvQmVOdWxsKCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwZ0NsaWVudC5xdWVyeSgnREVMRVRFIEZST00gdGVzdGNhc2VfdmVyc2lvbnMnKTtcbiAgICBhd2FpdCBwZ0NsaWVudC5xdWVyeSgnREVMRVRFIEZST00gdGVzdGNhc2VzJyk7XG4gICAgYXdhaXQgcGdDbGllbnQuZW5kKCk7XG4gIH0pO1xufSk7ICJdLCJ2ZXJzaW9uIjozfQ==