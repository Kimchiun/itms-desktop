e3a8b09cc58af9bc8a174bfef80682fc
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const react_redux_1 = require("react-redux");
const dashboardLayoutSlice_1 = require("../../../store/dashboardLayoutSlice");
const LeftPanel_1 = __importDefault(require("./LeftPanel"));
const CenterPanel_1 = __importDefault(require("./CenterPanel"));
const RightPanel_1 = __importDefault(require("./RightPanel"));
const LayoutContainer = styled_components_1.default.div `
  display: grid;
  grid-template-columns: ${props => {
    const { leftPanel, rightPanel } = props.layout;
    const leftWidth = leftPanel.isCollapsed ? '60px' : `${leftPanel.width}px`;
    const rightWidth = rightPanel.isCollapsed ? '60px' : `${rightPanel.width}px`;
    return `${leftWidth} 1fr ${rightWidth}`;
}};
  height: 100vh;
  transition: grid-template-columns 0.3s ease;
  overflow: hidden;
`;
const ToggleButton = styled_components_1.default.button `
  position: absolute;
  top: 50%;
  ${props => props.position === 'left' ? 'right: -15px' : 'left: -15px'};
  transform: translateY(-50%);
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: #3b82f6;
  color: white;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  &:hover {
    background: #2563eb;
  }

  &:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
`;
const PanelContainer = styled_components_1.default.div `
  position: relative;
  background: ${props => props.isCollapsed ? '#f8fafc' : 'white'};
  border-right: ${props => props.isCollapsed ? '1px solid #e2e8f0' : '1px solid #e2e8f0'};
  overflow: hidden;
  transition: all 0.3s ease;
`;
const DashboardLayout = () => {
    const dispatch = (0, react_redux_1.useDispatch)();
    const layout = (0, react_redux_1.useSelector)((state) => state.dashboardLayout);
    // 메모이제이션된 콜백 함수들
    const handleToggleLeftPanel = (0, react_1.useCallback)(() => {
        dispatch((0, dashboardLayoutSlice_1.toggleLeftPanel)());
    }, [dispatch]);
    const handleToggleRightPanel = (0, react_1.useCallback)(() => {
        dispatch((0, dashboardLayoutSlice_1.toggleRightPanel)());
    }, [dispatch]);
    // 메모이제이션된 레이아웃 설정
    const layoutConfig = (0, react_1.useMemo)(() => ({
        leftPanel: layout.leftPanel,
        rightPanel: layout.rightPanel
    }), [layout.leftPanel, layout.rightPanel]);
    // 메모이제이션된 토글 버튼 텍스트
    const leftToggleText = (0, react_1.useMemo)(() => layout.leftPanel.isCollapsed ? '→' : '←', [layout.leftPanel.isCollapsed]);
    const rightToggleText = (0, react_1.useMemo)(() => layout.rightPanel.isCollapsed ? '←' : '→', [layout.rightPanel.isCollapsed]);
    return ((0, jsx_runtime_1.jsxs)(LayoutContainer, { layout: layoutConfig, "data-testid": "dashboard-layout", children: [(0, jsx_runtime_1.jsxs)(PanelContainer, { isCollapsed: layout.leftPanel.isCollapsed, "data-testid": "left-panel", className: layout.leftPanel.isCollapsed ? 'collapsed' : '', children: [(0, jsx_runtime_1.jsx)(LeftPanel_1.default, {}), (0, jsx_runtime_1.jsx)(ToggleButton, { position: "left", onClick: handleToggleLeftPanel, "aria-label": layout.leftPanel.isCollapsed ? '좌측 패널 확장' : '좌측 패널 축소', "data-testid": "left-toggle-button", children: leftToggleText })] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "center-panel", children: (0, jsx_runtime_1.jsx)(CenterPanel_1.default, {}) }), (0, jsx_runtime_1.jsxs)(PanelContainer, { isCollapsed: layout.rightPanel.isCollapsed, "data-testid": "right-panel", className: layout.rightPanel.isCollapsed ? 'collapsed' : '', children: [(0, jsx_runtime_1.jsx)(RightPanel_1.default, {}), (0, jsx_runtime_1.jsx)(ToggleButton, { position: "right", onClick: handleToggleRightPanel, "aria-label": layout.rightPanel.isCollapsed ? '우측 패널 확장' : '우측 패널 축소', "data-testid": "right-toggle-button", children: rightToggleText })] })] }));
};
exports.default = react_1.default.memo(DashboardLayout);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,