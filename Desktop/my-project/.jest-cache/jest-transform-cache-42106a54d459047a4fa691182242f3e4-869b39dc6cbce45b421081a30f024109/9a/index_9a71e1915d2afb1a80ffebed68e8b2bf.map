{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/index.ts","mappings":";;;;;;;AAAA,8CAA8E;AAC9E,uGAAiF;AACjF,kGAA4E;AAC5E,gGAA0E;AAC1E,0GAAoF;AACpF,sGAAgF;AAChF,gHAA0F;AAC1F,yGAAmF;AACnF,6DAA0D;AAO1D,MAAM,gBAAgB,GAAc,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;AAEpE,MAAM,SAAS,GAAG,IAAA,qBAAW,EAAC;IAC5B,IAAI,EAAE,OAAO;IACb,YAAY,EAAE,gBAAgB;IAC9B,QAAQ,EAAE;QACR,OAAO,CAAC,KAAK,EAAE,MAAuE;YACpF,KAAK,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC;YAC1B,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QAC1B,CAAC;QACD,MAAM,CAAC,KAAK;YACV,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC;YAChB,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;QAC3B,CAAC;KACF;CACF,CAAC,CAAC;AACU,KAAsB,SAAS,CAAC,OAAO,EAArC,eAAO,eAAE,cAAM,aAAuB;AAErD,eAAe;AACf,MAAM,WAAW,GAAG;IAClB,SAAS,EAAE,uBAAe;IAC1B,QAAQ,EAAE,sBAAc;IACxB,SAAS,EAAE,wBAAgB;IAC3B,UAAU,EAAE,wBAAgB;IAC5B,QAAQ,EAAE,sBAAc;IACxB,aAAa,EAAE,2BAAmB;IAClC,SAAS,EAAE,wBAAgB;IAC3B,KAAK,EAAE,SAAS,CAAC,OAAO;CACzB,CAAC;AAEW,QAAA,KAAK,GAAG,IAAA,wBAAc,EAAC;IAClC,OAAO,EAAE,WAAW;IACpB,UAAU,EAAE,CAAC,oBAAoB,EAAE,EAAE,CACnC,oBAAoB,CAAC;QACnB,iBAAiB,EAAE;YACjB,cAAc,EAAE,CAAC,iBAAiB,CAAC;SACpC;KACF,CAAC,CAAC,MAAM,CAAC,uCAAkB,CAAC;CAChC,CAAC,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/index.ts"],"sourcesContent":["import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport testCaseReducer from '../features/TestCaseManagement/store/testCaseSlice';\nimport releaseReducer from '../features/ReleasePlanning/store/releaseSlice';\nimport dashboardReducer from '../features/Dashboard/store/dashboardSlice';\nimport executionReducer from '../features/ExecutionManagement/store/executionSlice';\nimport commentReducer from '../features/ExecutionManagement/store/commentSlice';\nimport notificationReducer from '../features/ExecutionManagement/store/notificationSlice';\nimport selectionReducer from '../features/TestCaseManagement/store/selectionSlice';\nimport { undoRedoMiddleware } from './undoRedoMiddleware';\n\nexport type UserRole = 'ADMIN' | 'QA' | 'DEV' | 'PM';\nexport interface UserState {\n  me: null | { id: number; username: string; role: UserRole };\n  isLoggedIn: boolean;\n}\nconst initialUserState: UserState = { me: null, isLoggedIn: false };\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: initialUserState,\n  reducers: {\n    setUser(state, action: PayloadAction<{ id: number; username: string; role: UserRole }>) {\n      state.me = action.payload;\n      state.isLoggedIn = true;\n    },\n    logout(state) {\n      state.me = null;\n      state.isLoggedIn = false;\n    },\n  },\n});\nexport const { setUser, logout } = userSlice.actions;\n\n// 루트 리듀서 타입 정의\nconst rootReducer = {\n  testcases: testCaseReducer,\n  releases: releaseReducer,\n  dashboard: dashboardReducer,\n  executions: executionReducer,\n  comments: commentReducer,\n  notifications: notificationReducer,\n  selection: selectionReducer,\n  users: userSlice.reducer,\n};\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST'],\n      },\n    }).concat(undoRedoMiddleware),\n});\n\n// 타입 정의를 store 생성 후에 정의\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; "],"version":3}