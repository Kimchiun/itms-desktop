1ebb29227e1c9c1a0cdda41b827fc98b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const styled_components_1 = __importDefault(require("styled-components"));
const react_redux_1 = require("react-redux");
const selectionSlice_1 = require("../store/selectionSlice");
const EditableCell_1 = __importDefault(require("../../../shared/components/EditableCell"));
const ContextMenu_1 = __importDefault(require("../../../shared/components/ContextMenu"));
const useKeyboardShortcuts_1 = require("../../../hooks/useKeyboardShortcuts");
const axios_1 = __importDefault(require("../../../utils/axios"));
const TableContainer = styled_components_1.default.div `
  margin: 20px;
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
`;
const Table = styled_components_1.default.table `
  width: 100%;
  border-collapse: collapse;
  background: white;
`;
const Th = styled_components_1.default.th `
  background: #f8f9fa;
  padding: 12px;
  text-align: left;
  border-bottom: 2px solid #dee2e6;
  font-weight: 600;
  color: #495057;
`;
const Td = styled_components_1.default.td `
  padding: 12px;
  border-bottom: 1px solid #dee2e6;
  vertical-align: middle;
`;
const Checkbox = styled_components_1.default.input `
  margin: 0;
  cursor: pointer;
`;
const TestCaseList = () => {
    const dispatch = (0, react_redux_1.useDispatch)();
    const testCases = (0, react_redux_1.useSelector)((state) => state.testcases.list) || [];
    const { selectedTestCases = [] } = (0, react_redux_1.useSelector)((state) => state.selection);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [contextMenu, setContextMenu] = (0, react_1.useState)({
        isVisible: false,
        x: 0,
        y: 0
    });
    (0, react_1.useEffect)(() => {
        // 테스트 케이스 데이터 로드
        setLoading(false);
    }, []);
    const handleSelectAll = () => {
        if (selectedTestCases.length === testCases.length) {
            dispatch((0, selectionSlice_1.deselectAllTestCases)());
        }
        else {
            const allTestCaseIds = testCases.map((tc) => tc.id);
            dispatch((0, selectionSlice_1.selectAllTestCases)(allTestCaseIds));
        }
    };
    const handleSelectTestCase = (testCaseId, index, isShiftKey) => {
        dispatch((0, selectionSlice_1.selectTestCase)({ id: testCaseId, index, isShiftKey }));
    };
    const handleContextMenu = (event) => {
        event.preventDefault();
        setContextMenu({
            isVisible: true,
            x: event.clientX,
            y: event.clientY
        });
    };
    const handleBulkAction = async (action) => {
        if (selectedTestCases.length === 0)
            return;
        try {
            switch (action) {
                case 'copy':
                    await axios_1.default.post('/api/bulk/copy', {
                        ids: selectedTestCases,
                        type: 'testcase',
                        targetFolderId: 1 // 기본 폴더
                    });
                    break;
                case 'move':
                    await axios_1.default.post('/api/bulk/move', {
                        ids: selectedTestCases,
                        type: 'testcase',
                        targetFolderId: 1 // 기본 폴더
                    });
                    break;
                case 'delete':
                    await axios_1.default.delete('/api/bulk', {
                        data: {
                            ids: selectedTestCases,
                            type: 'testcase'
                        }
                    });
                    break;
                case 'status':
                    await axios_1.default.patch('/api/bulk/status', {
                        ids: selectedTestCases,
                        newStatus: 'Draft'
                    });
                    break;
            }
            // 작업 완료 후 선택 해제
            dispatch((0, selectionSlice_1.deselectAllTestCases)());
        }
        catch (error) {
            console.error('일괄 작업 오류:', error);
            alert('일괄 작업 중 오류가 발생했습니다.');
        }
    };
    const handleCopy = (0, react_1.useCallback)(() => {
        handleBulkAction('copy');
    }, [selectedTestCases]);
    const handlePaste = (0, react_1.useCallback)(() => {
        // 붙여넣기 로직 구현
        console.log('붙여넣기 기능');
    }, []);
    const handleDelete = (0, react_1.useCallback)(() => {
        if (window.confirm(`${selectedTestCases.length}개 항목을 삭제하시겠습니까?`)) {
            handleBulkAction('delete');
        }
    }, [selectedTestCases]);
    const handleSelectAllShortcut = (0, react_1.useCallback)(() => {
        handleSelectAll();
    }, [selectedTestCases.length, testCases.length]);
    const handleDeselectAll = (0, react_1.useCallback)(() => {
        dispatch((0, selectionSlice_1.deselectAllTestCases)());
    }, []);
    // 키보드 단축키 설정
    (0, useKeyboardShortcuts_1.useKeyboardShortcuts)({
        onCopy: handleCopy,
        onPaste: handlePaste,
        onDelete: handleDelete,
        onSelectAll: handleSelectAllShortcut,
        onDeselectAll: handleDeselectAll
    });
    if (loading) {
        return (0, jsx_runtime_1.jsx)("div", { children: "\uB85C\uB529 \uC911..." });
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(TableContainer, { onContextMenu: handleContextMenu, children: (0, jsx_runtime_1.jsxs)(Table, { children: [(0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsxs)("tr", { children: [(0, jsx_runtime_1.jsx)(Th, { children: (0, jsx_runtime_1.jsx)(Checkbox, { type: "checkbox", checked: selectedTestCases.length === testCases.length && testCases.length > 0, onChange: handleSelectAll }) }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC81C\uBAA9" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC6B0\uC120\uC21C\uC704" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0C1\uD0DC" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0DD\uC131\uC77C" })] }) }), (0, jsx_runtime_1.jsx)("tbody", { children: testCases.map((testCase, index) => ((0, jsx_runtime_1.jsxs)("tr", { children: [(0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(Checkbox, { type: "checkbox", checked: selectedTestCases.includes(testCase.id), onChange: () => handleSelectTestCase(testCase.id, index, false) }) }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(EditableCell_1.default, { value: testCase.title, onSave: (newValue) => {
                                                console.log('제목 변경:', newValue);
                                            } }) }), (0, jsx_runtime_1.jsx)(Td, { children: testCase.priority }), (0, jsx_runtime_1.jsx)(Td, { children: testCase.status }), (0, jsx_runtime_1.jsx)(Td, { children: new Date(testCase.createdAt).toLocaleDateString() })] }, testCase.id))) })] }) }), (0, jsx_runtime_1.jsx)(ContextMenu_1.default, { x: contextMenu.x, y: contextMenu.y, isVisible: contextMenu.isVisible, onClose: () => setContextMenu({ ...contextMenu, isVisible: false }), selectedItems: selectedTestCases.map(id => ({ id, type: 'testcase' })), onBulkAction: handleBulkAction })] }));
};
exports.default = TestCaseList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,