a6b27889505b2b888111460ac0af0a6d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUser = createUser;
exports.findUserByUsername = findUserByUsername;
exports.validatePassword = validatePassword;
const pgClient_1 = __importDefault(require("../../../infrastructure/database/pgClient"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const SALT_ROUNDS = 10;
async function createUser(username, password, role) {
    const hash = await bcrypt_1.default.hash(password, SALT_ROUNDS);
    const result = await pgClient_1.default.query('INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING id, username, password, role, created_at', [username, hash, role]);
    return {
        id: result.rows[0].id,
        username: result.rows[0].username,
        password: result.rows[0].password,
        role: result.rows[0].role,
        createdAt: result.rows[0].created_at,
    };
}
async function findUserByUsername(username) {
    const result = await pgClient_1.default.query('SELECT id, username, password, role, created_at FROM users WHERE username = $1', [username]);
    if (result.rows.length === 0)
        return null;
    const row = result.rows[0];
    return {
        id: row.id,
        username: row.username,
        password: row.password,
        role: row.role,
        createdAt: row.created_at,
    };
}
async function validatePassword(user, password) {
    return bcrypt_1.default.compare(password, user.password);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy91c2Vycy9zZXJ2aWNlcy91c2VyU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQU1BLGdDQWFDO0FBRUQsZ0RBY0M7QUFFRCw0Q0FFQztBQXRDRCx5RkFBaUU7QUFDakUsb0RBQTRCO0FBRTVCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUVoQixLQUFLLFVBQVUsVUFBVSxDQUFDLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxJQUFjO0lBQy9FLE1BQU0sSUFBSSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQy9CLHFIQUFxSCxFQUNySCxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQ3pCLENBQUM7SUFDRixPQUFPO1FBQ0gsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNyQixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQ2pDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7UUFDakMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUN6QixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO0tBQ3ZDLENBQUM7QUFDTixDQUFDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFDLFFBQWdCO0lBQ3JELE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQy9CLGdGQUFnRixFQUNoRixDQUFDLFFBQVEsQ0FBQyxDQUNiLENBQUM7SUFDRixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE9BQU87UUFDSCxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDVixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7UUFDdEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRO1FBQ3RCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtRQUNkLFNBQVMsRUFBRSxHQUFHLENBQUMsVUFBVTtLQUM1QixDQUFDO0FBQ04sQ0FBQztBQUVNLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxJQUFVLEVBQUUsUUFBZ0I7SUFDL0QsT0FBTyxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25ELENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy91c2Vycy9zZXJ2aWNlcy91c2VyU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyLCBVc2VyUm9sZSB9IGZyb20gJy4uL21vZGVscy9Vc2VyJztcbmltcG9ydCBwZ0NsaWVudCBmcm9tICcuLi8uLi8uLi9pbmZyYXN0cnVjdHVyZS9kYXRhYmFzZS9wZ0NsaWVudCc7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdCc7XG5cbmNvbnN0IFNBTFRfUk9VTkRTID0gMTA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIHJvbGU6IFVzZXJSb2xlKTogUHJvbWlzZTxVc2VyPiB7XG4gICAgY29uc3QgaGFzaCA9IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCBTQUxUX1JPVU5EUyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGdDbGllbnQucXVlcnkoXG4gICAgICAgICdJTlNFUlQgSU5UTyB1c2VycyAodXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlKSBWQUxVRVMgKCQxLCAkMiwgJDMpIFJFVFVSTklORyBpZCwgdXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlLCBjcmVhdGVkX2F0JyxcbiAgICAgICAgW3VzZXJuYW1lLCBoYXNoLCByb2xlXVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IHJlc3VsdC5yb3dzWzBdLmlkLFxuICAgICAgICB1c2VybmFtZTogcmVzdWx0LnJvd3NbMF0udXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiByZXN1bHQucm93c1swXS5wYXNzd29yZCxcbiAgICAgICAgcm9sZTogcmVzdWx0LnJvd3NbMF0ucm9sZSxcbiAgICAgICAgY3JlYXRlZEF0OiByZXN1bHQucm93c1swXS5jcmVhdGVkX2F0LFxuICAgIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kVXNlckJ5VXNlcm5hbWUodXNlcm5hbWU6IHN0cmluZyk6IFByb21pc2U8VXNlciB8IG51bGw+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZ0NsaWVudC5xdWVyeShcbiAgICAgICAgJ1NFTEVDVCBpZCwgdXNlcm5hbWUsIHBhc3N3b3JkLCByb2xlLCBjcmVhdGVkX2F0IEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAkMScsXG4gICAgICAgIFt1c2VybmFtZV1cbiAgICApO1xuICAgIGlmIChyZXN1bHQucm93cy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJvdyA9IHJlc3VsdC5yb3dzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByb3cuaWQsXG4gICAgICAgIHVzZXJuYW1lOiByb3cudXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkOiByb3cucGFzc3dvcmQsXG4gICAgICAgIHJvbGU6IHJvdy5yb2xlLFxuICAgICAgICBjcmVhdGVkQXQ6IHJvdy5jcmVhdGVkX2F0LFxuICAgIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkKHVzZXI6IFVzZXIsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xufSAiXSwidmVyc2lvbiI6M30=