f963206c12448e6a1c5a419f1b8c5ea8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const pgClient_1 = __importDefault(require("../../../main/app/infrastructure/database/pgClient"));
const dashboardStats_1 = require("../../../main/app/utils/dashboardStats");
const router = (0, express_1.Router)();
// GET /api/dashboard/stats
router.get('/stats', async (req, res) => {
    try {
        // 전체 테스트 케이스 수
        const { rows: caseRows } = await pgClient_1.default.query('SELECT COUNT(*) FROM testcases');
        const totalCases = Number(caseRows[0].count);
        // 실행 상태별 집계
        const { rows: execRows } = await pgClient_1.default.query(`
            SELECT status, COUNT(*) FROM executions GROUP BY status
        `);
        const statusCounts = {};
        execRows.forEach(r => { statusCounts[r.status] = Number(r.count); });
        // 결함(이슈) 수 (comment에 [Jira: 또는 [Redmine: 포함된 실행)
        const { rows: defectRows } = await pgClient_1.default.query(`
            SELECT COUNT(*) FROM executions WHERE comment LIKE '%[Jira:%' OR comment LIKE '%[Redmine:%'
        `);
        const defectCount = Number(defectRows[0].count);
        // 사용자별 작업량
        const { rows: workloadRows } = await pgClient_1.default.query(`
            SELECT executed_by FROM executions
        `);
        const workload = (0, dashboardStats_1.aggregateWorkload)(workloadRows);
        // 결함 밀도 = 결함수 / 전체 케이스수
        const defectDensity = (0, dashboardStats_1.calcDefectDensity)(defectCount, totalCases);
        // 진행률 = 완료(Pass) / 전체 케이스수
        const progressRate = (0, dashboardStats_1.calcProgressRate)(statusCounts['Pass'] || 0, totalCases);
        res.json({
            totalCases,
            statusCounts,
            defectCount,
            defectDensity,
            progressRate,
            workload,
        });
    }
    catch (err) {
        res.status(500).json({ error: err.message });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvY29udHJvbGxlcnMvZGFzaGJvYXJkQ29udHJvbGxlci50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFDQUFvRDtBQUNwRCxrR0FBMEU7QUFDMUUsMkVBQWdIO0FBRWhILE1BQU0sTUFBTSxHQUFHLElBQUEsZ0JBQU0sR0FBRSxDQUFDO0FBRXhCLDJCQUEyQjtBQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3ZELElBQUksQ0FBQztRQUNELGVBQWU7UUFDZixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNsRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLFlBQVk7UUFDWixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQUM7O1NBRS9DLENBQUMsQ0FBQztRQUNILE1BQU0sWUFBWSxHQUEyQixFQUFFLENBQUM7UUFDaEQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLGlEQUFpRDtRQUNqRCxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sa0JBQVEsQ0FBQyxLQUFLLENBQUM7O1NBRWpELENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsV0FBVztRQUNYLE1BQU0sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxrQkFBUSxDQUFDLEtBQUssQ0FBQzs7U0FFbkQsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBQSxrQ0FBaUIsRUFBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCx3QkFBd0I7UUFDeEIsTUFBTSxhQUFhLEdBQUcsSUFBQSxrQ0FBaUIsRUFBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakUsMkJBQTJCO1FBQzNCLE1BQU0sWUFBWSxHQUFHLElBQUEsaUNBQWdCLEVBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3RSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ0wsVUFBVTtZQUNWLFlBQVk7WUFDWixXQUFXO1lBQ1gsYUFBYTtZQUNiLFlBQVk7WUFDWixRQUFRO1NBQ1gsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3Qvc3JjL21haW4vYXBwL2NvbnRyb2xsZXJzL2Rhc2hib2FyZENvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHBnQ2xpZW50IGZyb20gJy4uLy4uLy4uL21haW4vYXBwL2luZnJhc3RydWN0dXJlL2RhdGFiYXNlL3BnQ2xpZW50JztcbmltcG9ydCB7IGNhbGNEZWZlY3REZW5zaXR5LCBjYWxjUHJvZ3Jlc3NSYXRlLCBhZ2dyZWdhdGVXb3JrbG9hZCB9IGZyb20gJy4uLy4uLy4uL21haW4vYXBwL3V0aWxzL2Rhc2hib2FyZFN0YXRzJztcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbi8vIEdFVCAvYXBpL2Rhc2hib2FyZC9zdGF0c1xucm91dGVyLmdldCgnL3N0YXRzJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIOyghOyytCDthYzsiqTtirgg7LyA7J207IqkIOyImFxuICAgICAgICBjb25zdCB7IHJvd3M6IGNhc2VSb3dzIH0gPSBhd2FpdCBwZ0NsaWVudC5xdWVyeSgnU0VMRUNUIENPVU5UKCopIEZST00gdGVzdGNhc2VzJyk7XG4gICAgICAgIGNvbnN0IHRvdGFsQ2FzZXMgPSBOdW1iZXIoY2FzZVJvd3NbMF0uY291bnQpO1xuICAgICAgICAvLyDsi6Ttlokg7IOB7YOc67OEIOynkeqzhFxuICAgICAgICBjb25zdCB7IHJvd3M6IGV4ZWNSb3dzIH0gPSBhd2FpdCBwZ0NsaWVudC5xdWVyeShgXG4gICAgICAgICAgICBTRUxFQ1Qgc3RhdHVzLCBDT1VOVCgqKSBGUk9NIGV4ZWN1dGlvbnMgR1JPVVAgQlkgc3RhdHVzXG4gICAgICAgIGApO1xuICAgICAgICBjb25zdCBzdGF0dXNDb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgICAgICAgZXhlY1Jvd3MuZm9yRWFjaChyID0+IHsgc3RhdHVzQ291bnRzW3Iuc3RhdHVzXSA9IE51bWJlcihyLmNvdW50KTsgfSk7XG4gICAgICAgIC8vIOqysO2VqCjsnbTsiogpIOyImCAoY29tbWVudOyXkCBbSmlyYTog65iQ64qUIFtSZWRtaW5lOiDtj6ztlajrkJwg7Iuk7ZaJKVxuICAgICAgICBjb25zdCB7IHJvd3M6IGRlZmVjdFJvd3MgfSA9IGF3YWl0IHBnQ2xpZW50LnF1ZXJ5KGBcbiAgICAgICAgICAgIFNFTEVDVCBDT1VOVCgqKSBGUk9NIGV4ZWN1dGlvbnMgV0hFUkUgY29tbWVudCBMSUtFICclW0ppcmE6JScgT1IgY29tbWVudCBMSUtFICclW1JlZG1pbmU6JSdcbiAgICAgICAgYCk7XG4gICAgICAgIGNvbnN0IGRlZmVjdENvdW50ID0gTnVtYmVyKGRlZmVjdFJvd3NbMF0uY291bnQpO1xuICAgICAgICAvLyDsgqzsmqnsnpDrs4Qg7J6R7JeF65+JXG4gICAgICAgIGNvbnN0IHsgcm93czogd29ya2xvYWRSb3dzIH0gPSBhd2FpdCBwZ0NsaWVudC5xdWVyeShgXG4gICAgICAgICAgICBTRUxFQ1QgZXhlY3V0ZWRfYnkgRlJPTSBleGVjdXRpb25zXG4gICAgICAgIGApO1xuICAgICAgICBjb25zdCB3b3JrbG9hZCA9IGFnZ3JlZ2F0ZVdvcmtsb2FkKHdvcmtsb2FkUm93cyk7XG4gICAgICAgIC8vIOqysO2VqCDrsIDrj4QgPSDqsrDtlajsiJggLyDsoITssrQg7LyA7J207Iqk7IiYXG4gICAgICAgIGNvbnN0IGRlZmVjdERlbnNpdHkgPSBjYWxjRGVmZWN0RGVuc2l0eShkZWZlY3RDb3VudCwgdG90YWxDYXNlcyk7XG4gICAgICAgIC8vIOynhO2WieuloCA9IOyZhOujjChQYXNzKSAvIOyghOyytCDsvIDsnbTsiqTsiJhcbiAgICAgICAgY29uc3QgcHJvZ3Jlc3NSYXRlID0gY2FsY1Byb2dyZXNzUmF0ZShzdGF0dXNDb3VudHNbJ1Bhc3MnXSB8fCAwLCB0b3RhbENhc2VzKTtcbiAgICAgICAgcmVzLmpzb24oe1xuICAgICAgICAgICAgdG90YWxDYXNlcyxcbiAgICAgICAgICAgIHN0YXR1c0NvdW50cyxcbiAgICAgICAgICAgIGRlZmVjdENvdW50LFxuICAgICAgICAgICAgZGVmZWN0RGVuc2l0eSxcbiAgICAgICAgICAgIHByb2dyZXNzUmF0ZSxcbiAgICAgICAgICAgIHdvcmtsb2FkLFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiBlcnIubWVzc2FnZSB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyAiXSwidmVyc2lvbiI6M30=