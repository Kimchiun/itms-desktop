c788dba9c11cd5526fda3e69b163fbb9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MotionEntity = exports.MOTION_KEY = void 0;
exports.getMinimumRangeTransitionRange = getMinimumRangeTransitionRange;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _useLayoutEffect = _interopRequireDefault(require("rc-util/lib/hooks/useLayoutEffect"));
var _rcVirtualList = _interopRequireDefault(require("rc-virtual-list"));
var React = _interopRequireWildcard(require("react"));
var _MotionTreeNode = _interopRequireDefault(require("./MotionTreeNode"));
var _diffUtil = require("./utils/diffUtil");
var _treeUtil = require("./utils/treeUtil");
var _excluded = ["prefixCls", "data", "selectable", "checkable", "expandedKeys", "selectedKeys", "checkedKeys", "loadedKeys", "loadingKeys", "halfCheckedKeys", "keyEntities", "disabled", "dragging", "dragOverNodeKey", "dropPosition", "motion", "height", "itemHeight", "virtual", "scrollWidth", "focusable", "activeItem", "focused", "tabIndex", "onKeyDown", "onFocus", "onBlur", "onActiveChange", "onListChangeStart", "onListChangeEnd"];
/**
 * Handle virtual list of the TreeNodes.
 */
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
var HIDDEN_STYLE = {
  width: 0,
  height: 0,
  display: 'flex',
  overflow: 'hidden',
  opacity: 0,
  border: 0,
  padding: 0,
  margin: 0
};
var noop = function noop() {};
var MOTION_KEY = exports.MOTION_KEY = "RC_TREE_MOTION_".concat(Math.random());
var MotionNode = {
  key: MOTION_KEY
};
var MotionEntity = exports.MotionEntity = {
  key: MOTION_KEY,
  level: 0,
  index: 0,
  pos: '0',
  node: MotionNode,
  nodes: [MotionNode]
};
var MotionFlattenData = {
  parent: null,
  children: [],
  pos: MotionEntity.pos,
  data: MotionNode,
  title: null,
  key: MOTION_KEY,
  /** Hold empty list here since we do not use it */
  isStart: [],
  isEnd: []
};
/**
 * We only need get visible content items to play the animation.
 */
function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {
  if (virtual === false || !height) {
    return list;
  }
  return list.slice(0, Math.ceil(height / itemHeight) + 1);
}
function itemKey(item) {
  var key = item.key,
    pos = item.pos;
  return (0, _treeUtil.getKey)(key, pos);
}
function getAccessibilityPath(item) {
  var path = String(item.data.key);
  var current = item;
  while (current.parent) {
    current = current.parent;
    path = "".concat(current.data.key, " > ").concat(path);
  }
  return path;
}
var NodeList = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var prefixCls = props.prefixCls,
    data = props.data,
    selectable = props.selectable,
    checkable = props.checkable,
    expandedKeys = props.expandedKeys,
    selectedKeys = props.selectedKeys,
    checkedKeys = props.checkedKeys,
    loadedKeys = props.loadedKeys,
    loadingKeys = props.loadingKeys,
    halfCheckedKeys = props.halfCheckedKeys,
    keyEntities = props.keyEntities,
    disabled = props.disabled,
    dragging = props.dragging,
    dragOverNodeKey = props.dragOverNodeKey,
    dropPosition = props.dropPosition,
    motion = props.motion,
    height = props.height,
    itemHeight = props.itemHeight,
    virtual = props.virtual,
    scrollWidth = props.scrollWidth,
    focusable = props.focusable,
    activeItem = props.activeItem,
    focused = props.focused,
    tabIndex = props.tabIndex,
    onKeyDown = props.onKeyDown,
    onFocus = props.onFocus,
    onBlur = props.onBlur,
    onActiveChange = props.onActiveChange,
    onListChangeStart = props.onListChangeStart,
    onListChangeEnd = props.onListChangeEnd,
    domProps = (0, _objectWithoutProperties2.default)(props, _excluded);

  // =============================== Ref ================================
  var listRef = React.useRef(null);
  var indentMeasurerRef = React.useRef(null);
  React.useImperativeHandle(ref, function () {
    return {
      scrollTo: function scrollTo(scroll) {
        listRef.current.scrollTo(scroll);
      },
      getIndentWidth: function getIndentWidth() {
        return indentMeasurerRef.current.offsetWidth;
      }
    };
  });

  // ============================== Motion ==============================
  var _React$useState = React.useState(expandedKeys),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    prevExpandedKeys = _React$useState2[0],
    setPrevExpandedKeys = _React$useState2[1];
  var _React$useState3 = React.useState(data),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    prevData = _React$useState4[0],
    setPrevData = _React$useState4[1];
  var _React$useState5 = React.useState(data),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    transitionData = _React$useState6[0],
    setTransitionData = _React$useState6[1];
  var _React$useState7 = React.useState([]),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    transitionRange = _React$useState8[0],
    setTransitionRange = _React$useState8[1];
  var _React$useState9 = React.useState(null),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
    motionType = _React$useState10[0],
    setMotionType = _React$useState10[1];

  // When motion end but data change, this will makes data back to previous one
  var dataRef = React.useRef(data);
  dataRef.current = data;
  function onMotionEnd() {
    var latestData = dataRef.current;
    setPrevData(latestData);
    setTransitionData(latestData);
    setTransitionRange([]);
    setMotionType(null);
    onListChangeEnd();
  }

  // Do animation if expanded keys changed
  // layoutEffect here to avoid blink of node removing
  (0, _useLayoutEffect.default)(function () {
    setPrevExpandedKeys(expandedKeys);
    var diffExpanded = (0, _diffUtil.findExpandedKeys)(prevExpandedKeys, expandedKeys);
    if (diffExpanded.key !== null) {
      if (diffExpanded.add) {
        var keyIndex = prevData.findIndex(function (_ref) {
          var key = _ref.key;
          return key === diffExpanded.key;
        });
        var rangeNodes = getMinimumRangeTransitionRange((0, _diffUtil.getExpandRange)(prevData, data, diffExpanded.key), virtual, height, itemHeight);
        var newTransitionData = prevData.slice();
        newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);
        setTransitionData(newTransitionData);
        setTransitionRange(rangeNodes);
        setMotionType('show');
      } else {
        var _keyIndex = data.findIndex(function (_ref2) {
          var key = _ref2.key;
          return key === diffExpanded.key;
        });
        var _rangeNodes = getMinimumRangeTransitionRange((0, _diffUtil.getExpandRange)(data, prevData, diffExpanded.key), virtual, height, itemHeight);
        var _newTransitionData = data.slice();
        _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);
        setTransitionData(_newTransitionData);
        setTransitionRange(_rangeNodes);
        setMotionType('hide');
      }
    } else if (prevData !== data) {
      // If whole data changed, we just refresh the list
      setPrevData(data);
      setTransitionData(data);
    }
  }, [expandedKeys, data]);

  // We should clean up motion if is changed by dragging
  React.useEffect(function () {
    if (!dragging) {
      onMotionEnd();
    }
  }, [dragging]);
  var mergedData = motion ? transitionData : data;
  var treeNodeRequiredProps = {
    expandedKeys: expandedKeys,
    selectedKeys: selectedKeys,
    loadedKeys: loadedKeys,
    loadingKeys: loadingKeys,
    checkedKeys: checkedKeys,
    halfCheckedKeys: halfCheckedKeys,
    dragOverNodeKey: dragOverNodeKey,
    dropPosition: dropPosition,
    keyEntities: keyEntities
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, focused && activeItem && /*#__PURE__*/React.createElement("span", {
    style: HIDDEN_STYLE,
    "aria-live": "assertive"
  }, getAccessibilityPath(activeItem)), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("input", {
    style: HIDDEN_STYLE,
    disabled: focusable === false || disabled,
    tabIndex: focusable !== false ? tabIndex : null,
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    onBlur: onBlur,
    value: "",
    onChange: noop,
    "aria-label": "for screen reader"
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-treenode"),
    "aria-hidden": true,
    style: {
      position: 'absolute',
      pointerEvents: 'none',
      visibility: 'hidden',
      height: 0,
      overflow: 'hidden',
      border: 0,
      padding: 0
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-indent")
  }, /*#__PURE__*/React.createElement("div", {
    ref: indentMeasurerRef,
    className: "".concat(prefixCls, "-indent-unit")
  }))), /*#__PURE__*/React.createElement(_rcVirtualList.default, (0, _extends2.default)({}, domProps, {
    data: mergedData,
    itemKey: itemKey,
    height: height,
    fullHeight: false,
    virtual: virtual,
    itemHeight: itemHeight,
    scrollWidth: scrollWidth,
    prefixCls: "".concat(prefixCls, "-list"),
    ref: listRef,
    role: "tree",
    onVisibleChange: function onVisibleChange(originList) {
      // The best match is using `fullList` - `originList` = `restList`
      // and check the `restList` to see if has the MOTION_KEY node
      // but this will cause performance issue for long list compare
      // we just check `originList` and repeat trigger `onMotionEnd`
      if (originList.every(function (item) {
        return itemKey(item) !== MOTION_KEY;
      })) {
        onMotionEnd();
      }
    }
  }), function (treeNode) {
    var pos = treeNode.pos,
      restProps = Object.assign({}, ((0, _objectDestructuringEmpty2.default)(treeNode.data), treeNode.data)),
      title = treeNode.title,
      key = treeNode.key,
      isStart = treeNode.isStart,
      isEnd = treeNode.isEnd;
    var mergedKey = (0, _treeUtil.getKey)(key, pos);
    delete restProps.key;
    delete restProps.children;
    var treeNodeProps = (0, _treeUtil.getTreeNodeProps)(mergedKey, treeNodeRequiredProps);
    return /*#__PURE__*/React.createElement(_MotionTreeNode.default, (0, _extends2.default)({}, restProps, treeNodeProps, {
      title: title,
      active: !!activeItem && key === activeItem.key,
      pos: pos,
      data: treeNode.data,
      isStart: isStart,
      isEnd: isEnd,
      motion: motion,
      motionNodes: key === MOTION_KEY ? transitionRange : null,
      motionType: motionType,
      onMotionStart: onListChangeStart,
      onMotionEnd: onMotionEnd,
      treeNodeRequiredProps: treeNodeRequiredProps,
      onMouseMove: function onMouseMove() {
        onActiveChange(null);
      }
    }));
  }));
});
if (process.env.NODE_ENV !== 'production') {
  NodeList.displayName = 'NodeList';
}
var _default = exports.default = NodeList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90eXBlb2YiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJNb3Rpb25FbnRpdHkiLCJNT1RJT05fS0VZIiwiZ2V0TWluaW11bVJhbmdlVHJhbnNpdGlvblJhbmdlIiwiX2V4dGVuZHMyIiwiX29iamVjdERlc3RydWN0dXJpbmdFbXB0eTIiLCJfc2xpY2VkVG9BcnJheTIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX3VzZUxheW91dEVmZmVjdCIsIl9yY1ZpcnR1YWxMaXN0IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9Nb3Rpb25UcmVlTm9kZSIsIl9kaWZmVXRpbCIsIl90cmVlVXRpbCIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkhJRERFTl9TVFlMRSIsIndpZHRoIiwiaGVpZ2h0IiwiZGlzcGxheSIsIm92ZXJmbG93Iiwib3BhY2l0eSIsImJvcmRlciIsInBhZGRpbmciLCJtYXJnaW4iLCJub29wIiwiY29uY2F0IiwiTWF0aCIsInJhbmRvbSIsIk1vdGlvbk5vZGUiLCJrZXkiLCJsZXZlbCIsImluZGV4IiwicG9zIiwibm9kZSIsIm5vZGVzIiwiTW90aW9uRmxhdHRlbkRhdGEiLCJwYXJlbnQiLCJjaGlsZHJlbiIsImRhdGEiLCJ0aXRsZSIsImlzU3RhcnQiLCJpc0VuZCIsImxpc3QiLCJ2aXJ0dWFsIiwiaXRlbUhlaWdodCIsInNsaWNlIiwiY2VpbCIsIml0ZW1LZXkiLCJpdGVtIiwiZ2V0S2V5IiwiZ2V0QWNjZXNzaWJpbGl0eVBhdGgiLCJwYXRoIiwiU3RyaW5nIiwiY3VycmVudCIsIk5vZGVMaXN0IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwicHJlZml4Q2xzIiwic2VsZWN0YWJsZSIsImNoZWNrYWJsZSIsImV4cGFuZGVkS2V5cyIsInNlbGVjdGVkS2V5cyIsImNoZWNrZWRLZXlzIiwibG9hZGVkS2V5cyIsImxvYWRpbmdLZXlzIiwiaGFsZkNoZWNrZWRLZXlzIiwia2V5RW50aXRpZXMiLCJkaXNhYmxlZCIsImRyYWdnaW5nIiwiZHJhZ092ZXJOb2RlS2V5IiwiZHJvcFBvc2l0aW9uIiwibW90aW9uIiwic2Nyb2xsV2lkdGgiLCJmb2N1c2FibGUiLCJhY3RpdmVJdGVtIiwiZm9jdXNlZCIsInRhYkluZGV4Iiwib25LZXlEb3duIiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQWN0aXZlQ2hhbmdlIiwib25MaXN0Q2hhbmdlU3RhcnQiLCJvbkxpc3RDaGFuZ2VFbmQiLCJkb21Qcm9wcyIsImxpc3RSZWYiLCJ1c2VSZWYiLCJpbmRlbnRNZWFzdXJlclJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJzY3JvbGxUbyIsInNjcm9sbCIsImdldEluZGVudFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJwcmV2RXhwYW5kZWRLZXlzIiwic2V0UHJldkV4cGFuZGVkS2V5cyIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0IiwicHJldkRhdGEiLCJzZXRQcmV2RGF0YSIsIl9SZWFjdCR1c2VTdGF0ZTUiLCJfUmVhY3QkdXNlU3RhdGU2IiwidHJhbnNpdGlvbkRhdGEiLCJzZXRUcmFuc2l0aW9uRGF0YSIsIl9SZWFjdCR1c2VTdGF0ZTciLCJfUmVhY3QkdXNlU3RhdGU4IiwidHJhbnNpdGlvblJhbmdlIiwic2V0VHJhbnNpdGlvblJhbmdlIiwiX1JlYWN0JHVzZVN0YXRlOSIsIl9SZWFjdCR1c2VTdGF0ZTEwIiwibW90aW9uVHlwZSIsInNldE1vdGlvblR5cGUiLCJkYXRhUmVmIiwib25Nb3Rpb25FbmQiLCJsYXRlc3REYXRhIiwiZGlmZkV4cGFuZGVkIiwiZmluZEV4cGFuZGVkS2V5cyIsImFkZCIsImtleUluZGV4IiwiZmluZEluZGV4IiwiX3JlZiIsInJhbmdlTm9kZXMiLCJnZXRFeHBhbmRSYW5nZSIsIm5ld1RyYW5zaXRpb25EYXRhIiwic3BsaWNlIiwiX2tleUluZGV4IiwiX3JlZjIiLCJfcmFuZ2VOb2RlcyIsIl9uZXdUcmFuc2l0aW9uRGF0YSIsInVzZUVmZmVjdCIsIm1lcmdlZERhdGEiLCJ0cmVlTm9kZVJlcXVpcmVkUHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJzdHlsZSIsIm9uQ2hhbmdlIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJwb2ludGVyRXZlbnRzIiwidmlzaWJpbGl0eSIsImZ1bGxIZWlnaHQiLCJyb2xlIiwib25WaXNpYmxlQ2hhbmdlIiwib3JpZ2luTGlzdCIsImV2ZXJ5IiwidHJlZU5vZGUiLCJyZXN0UHJvcHMiLCJhc3NpZ24iLCJtZXJnZWRLZXkiLCJ0cmVlTm9kZVByb3BzIiwiZ2V0VHJlZU5vZGVQcm9wcyIsImFjdGl2ZSIsIm1vdGlvbk5vZGVzIiwib25Nb3Rpb25TdGFydCIsIm9uTW91c2VNb3ZlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZGlzcGxheU5hbWUiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIk5vZGVMaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbnZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuTW90aW9uRW50aXR5ID0gZXhwb3J0cy5NT1RJT05fS0VZID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRNaW5pbXVtUmFuZ2VUcmFuc2l0aW9uUmFuZ2UgPSBnZXRNaW5pbXVtUmFuZ2VUcmFuc2l0aW9uUmFuZ2U7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5XCIpKTtcbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcbnZhciBfdXNlTGF5b3V0RWZmZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvaG9va3MvdXNlTGF5b3V0RWZmZWN0XCIpKTtcbnZhciBfcmNWaXJ0dWFsTGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXZpcnR1YWwtbGlzdFwiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9Nb3Rpb25UcmVlTm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW90aW9uVHJlZU5vZGVcIikpO1xudmFyIF9kaWZmVXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxzL2RpZmZVdGlsXCIpO1xudmFyIF90cmVlVXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxzL3RyZWVVdGlsXCIpO1xudmFyIF9leGNsdWRlZCA9IFtcInByZWZpeENsc1wiLCBcImRhdGFcIiwgXCJzZWxlY3RhYmxlXCIsIFwiY2hlY2thYmxlXCIsIFwiZXhwYW5kZWRLZXlzXCIsIFwic2VsZWN0ZWRLZXlzXCIsIFwiY2hlY2tlZEtleXNcIiwgXCJsb2FkZWRLZXlzXCIsIFwibG9hZGluZ0tleXNcIiwgXCJoYWxmQ2hlY2tlZEtleXNcIiwgXCJrZXlFbnRpdGllc1wiLCBcImRpc2FibGVkXCIsIFwiZHJhZ2dpbmdcIiwgXCJkcmFnT3Zlck5vZGVLZXlcIiwgXCJkcm9wUG9zaXRpb25cIiwgXCJtb3Rpb25cIiwgXCJoZWlnaHRcIiwgXCJpdGVtSGVpZ2h0XCIsIFwidmlydHVhbFwiLCBcInNjcm9sbFdpZHRoXCIsIFwiZm9jdXNhYmxlXCIsIFwiYWN0aXZlSXRlbVwiLCBcImZvY3VzZWRcIiwgXCJ0YWJJbmRleFwiLCBcIm9uS2V5RG93blwiLCBcIm9uRm9jdXNcIiwgXCJvbkJsdXJcIiwgXCJvbkFjdGl2ZUNoYW5nZVwiLCBcIm9uTGlzdENoYW5nZVN0YXJ0XCIsIFwib25MaXN0Q2hhbmdlRW5kXCJdO1xuLyoqXG4gKiBIYW5kbGUgdmlydHVhbCBsaXN0IG9mIHRoZSBUcmVlTm9kZXMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gX3R5cGVvZihlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG52YXIgSElEREVOX1NUWUxFID0ge1xuICB3aWR0aDogMCxcbiAgaGVpZ2h0OiAwLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgb3BhY2l0eTogMCxcbiAgYm9yZGVyOiAwLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDBcbn07XG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbnZhciBNT1RJT05fS0VZID0gZXhwb3J0cy5NT1RJT05fS0VZID0gXCJSQ19UUkVFX01PVElPTl9cIi5jb25jYXQoTWF0aC5yYW5kb20oKSk7XG52YXIgTW90aW9uTm9kZSA9IHtcbiAga2V5OiBNT1RJT05fS0VZXG59O1xudmFyIE1vdGlvbkVudGl0eSA9IGV4cG9ydHMuTW90aW9uRW50aXR5ID0ge1xuICBrZXk6IE1PVElPTl9LRVksXG4gIGxldmVsOiAwLFxuICBpbmRleDogMCxcbiAgcG9zOiAnMCcsXG4gIG5vZGU6IE1vdGlvbk5vZGUsXG4gIG5vZGVzOiBbTW90aW9uTm9kZV1cbn07XG52YXIgTW90aW9uRmxhdHRlbkRhdGEgPSB7XG4gIHBhcmVudDogbnVsbCxcbiAgY2hpbGRyZW46IFtdLFxuICBwb3M6IE1vdGlvbkVudGl0eS5wb3MsXG4gIGRhdGE6IE1vdGlvbk5vZGUsXG4gIHRpdGxlOiBudWxsLFxuICBrZXk6IE1PVElPTl9LRVksXG4gIC8qKiBIb2xkIGVtcHR5IGxpc3QgaGVyZSBzaW5jZSB3ZSBkbyBub3QgdXNlIGl0ICovXG4gIGlzU3RhcnQ6IFtdLFxuICBpc0VuZDogW11cbn07XG4vKipcbiAqIFdlIG9ubHkgbmVlZCBnZXQgdmlzaWJsZSBjb250ZW50IGl0ZW1zIHRvIHBsYXkgdGhlIGFuaW1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0TWluaW11bVJhbmdlVHJhbnNpdGlvblJhbmdlKGxpc3QsIHZpcnR1YWwsIGhlaWdodCwgaXRlbUhlaWdodCkge1xuICBpZiAodmlydHVhbCA9PT0gZmFsc2UgfHwgIWhlaWdodCkge1xuICAgIHJldHVybiBsaXN0O1xuICB9XG4gIHJldHVybiBsaXN0LnNsaWNlKDAsIE1hdGguY2VpbChoZWlnaHQgLyBpdGVtSGVpZ2h0KSArIDEpO1xufVxuZnVuY3Rpb24gaXRlbUtleShpdGVtKSB7XG4gIHZhciBrZXkgPSBpdGVtLmtleSxcbiAgICBwb3MgPSBpdGVtLnBvcztcbiAgcmV0dXJuICgwLCBfdHJlZVV0aWwuZ2V0S2V5KShrZXksIHBvcyk7XG59XG5mdW5jdGlvbiBnZXRBY2Nlc3NpYmlsaXR5UGF0aChpdGVtKSB7XG4gIHZhciBwYXRoID0gU3RyaW5nKGl0ZW0uZGF0YS5rZXkpO1xuICB2YXIgY3VycmVudCA9IGl0ZW07XG4gIHdoaWxlIChjdXJyZW50LnBhcmVudCkge1xuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICBwYXRoID0gXCJcIi5jb25jYXQoY3VycmVudC5kYXRhLmtleSwgXCIgPiBcIikuY29uY2F0KHBhdGgpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxudmFyIE5vZGVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBkYXRhID0gcHJvcHMuZGF0YSxcbiAgICBzZWxlY3RhYmxlID0gcHJvcHMuc2VsZWN0YWJsZSxcbiAgICBjaGVja2FibGUgPSBwcm9wcy5jaGVja2FibGUsXG4gICAgZXhwYW5kZWRLZXlzID0gcHJvcHMuZXhwYW5kZWRLZXlzLFxuICAgIHNlbGVjdGVkS2V5cyA9IHByb3BzLnNlbGVjdGVkS2V5cyxcbiAgICBjaGVja2VkS2V5cyA9IHByb3BzLmNoZWNrZWRLZXlzLFxuICAgIGxvYWRlZEtleXMgPSBwcm9wcy5sb2FkZWRLZXlzLFxuICAgIGxvYWRpbmdLZXlzID0gcHJvcHMubG9hZGluZ0tleXMsXG4gICAgaGFsZkNoZWNrZWRLZXlzID0gcHJvcHMuaGFsZkNoZWNrZWRLZXlzLFxuICAgIGtleUVudGl0aWVzID0gcHJvcHMua2V5RW50aXRpZXMsXG4gICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICBkcmFnZ2luZyA9IHByb3BzLmRyYWdnaW5nLFxuICAgIGRyYWdPdmVyTm9kZUtleSA9IHByb3BzLmRyYWdPdmVyTm9kZUtleSxcbiAgICBkcm9wUG9zaXRpb24gPSBwcm9wcy5kcm9wUG9zaXRpb24sXG4gICAgbW90aW9uID0gcHJvcHMubW90aW9uLFxuICAgIGhlaWdodCA9IHByb3BzLmhlaWdodCxcbiAgICBpdGVtSGVpZ2h0ID0gcHJvcHMuaXRlbUhlaWdodCxcbiAgICB2aXJ0dWFsID0gcHJvcHMudmlydHVhbCxcbiAgICBzY3JvbGxXaWR0aCA9IHByb3BzLnNjcm9sbFdpZHRoLFxuICAgIGZvY3VzYWJsZSA9IHByb3BzLmZvY3VzYWJsZSxcbiAgICBhY3RpdmVJdGVtID0gcHJvcHMuYWN0aXZlSXRlbSxcbiAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICB0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgb25BY3RpdmVDaGFuZ2UgPSBwcm9wcy5vbkFjdGl2ZUNoYW5nZSxcbiAgICBvbkxpc3RDaGFuZ2VTdGFydCA9IHByb3BzLm9uTGlzdENoYW5nZVN0YXJ0LFxuICAgIG9uTGlzdENoYW5nZUVuZCA9IHByb3BzLm9uTGlzdENoYW5nZUVuZCxcbiAgICBkb21Qcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVmID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaW5kZW50TWVhc3VyZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcm9sbFRvOiBmdW5jdGlvbiBzY3JvbGxUbyhzY3JvbGwpIHtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnNjcm9sbFRvKHNjcm9sbCk7XG4gICAgICB9LFxuICAgICAgZ2V0SW5kZW50V2lkdGg6IGZ1bmN0aW9uIGdldEluZGVudFdpZHRoKCkge1xuICAgICAgICByZXR1cm4gaW5kZW50TWVhc3VyZXJSZWYuY3VycmVudC5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTW90aW9uID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZXhwYW5kZWRLZXlzKSxcbiAgICBfUmVhY3QkdXNlU3RhdGUyID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIHByZXZFeHBhbmRlZEtleXMgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgIHNldFByZXZFeHBhbmRlZEtleXMgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGRhdGEpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSAoMCwgX3NsaWNlZFRvQXJyYXkyLmRlZmF1bHQpKF9SZWFjdCR1c2VTdGF0ZTMsIDIpLFxuICAgIHByZXZEYXRhID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICBzZXRQcmV2RGF0YSA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoZGF0YSksXG4gICAgX1JlYWN0JHVzZVN0YXRlNiA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgdHJhbnNpdGlvbkRhdGEgPSBfUmVhY3QkdXNlU3RhdGU2WzBdLFxuICAgIHNldFRyYW5zaXRpb25EYXRhID0gX1JlYWN0JHVzZVN0YXRlNlsxXTtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTcgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgX1JlYWN0JHVzZVN0YXRlOCA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX1JlYWN0JHVzZVN0YXRlNywgMiksXG4gICAgdHJhbnNpdGlvblJhbmdlID0gX1JlYWN0JHVzZVN0YXRlOFswXSxcbiAgICBzZXRUcmFuc2l0aW9uUmFuZ2UgPSBfUmVhY3QkdXNlU3RhdGU4WzFdO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlOSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTEwID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfUmVhY3QkdXNlU3RhdGU5LCAyKSxcbiAgICBtb3Rpb25UeXBlID0gX1JlYWN0JHVzZVN0YXRlMTBbMF0sXG4gICAgc2V0TW90aW9uVHlwZSA9IF9SZWFjdCR1c2VTdGF0ZTEwWzFdO1xuXG4gIC8vIFdoZW4gbW90aW9uIGVuZCBidXQgZGF0YSBjaGFuZ2UsIHRoaXMgd2lsbCBtYWtlcyBkYXRhIGJhY2sgdG8gcHJldmlvdXMgb25lXG4gIHZhciBkYXRhUmVmID0gUmVhY3QudXNlUmVmKGRhdGEpO1xuICBkYXRhUmVmLmN1cnJlbnQgPSBkYXRhO1xuICBmdW5jdGlvbiBvbk1vdGlvbkVuZCgpIHtcbiAgICB2YXIgbGF0ZXN0RGF0YSA9IGRhdGFSZWYuY3VycmVudDtcbiAgICBzZXRQcmV2RGF0YShsYXRlc3REYXRhKTtcbiAgICBzZXRUcmFuc2l0aW9uRGF0YShsYXRlc3REYXRhKTtcbiAgICBzZXRUcmFuc2l0aW9uUmFuZ2UoW10pO1xuICAgIHNldE1vdGlvblR5cGUobnVsbCk7XG4gICAgb25MaXN0Q2hhbmdlRW5kKCk7XG4gIH1cblxuICAvLyBEbyBhbmltYXRpb24gaWYgZXhwYW5kZWQga2V5cyBjaGFuZ2VkXG4gIC8vIGxheW91dEVmZmVjdCBoZXJlIHRvIGF2b2lkIGJsaW5rIG9mIG5vZGUgcmVtb3ZpbmdcbiAgKDAsIF91c2VMYXlvdXRFZmZlY3QuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgIHNldFByZXZFeHBhbmRlZEtleXMoZXhwYW5kZWRLZXlzKTtcbiAgICB2YXIgZGlmZkV4cGFuZGVkID0gKDAsIF9kaWZmVXRpbC5maW5kRXhwYW5kZWRLZXlzKShwcmV2RXhwYW5kZWRLZXlzLCBleHBhbmRlZEtleXMpO1xuICAgIGlmIChkaWZmRXhwYW5kZWQua2V5ICE9PSBudWxsKSB7XG4gICAgICBpZiAoZGlmZkV4cGFuZGVkLmFkZCkge1xuICAgICAgICB2YXIga2V5SW5kZXggPSBwcmV2RGF0YS5maW5kSW5kZXgoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIga2V5ID0gX3JlZi5rZXk7XG4gICAgICAgICAgcmV0dXJuIGtleSA9PT0gZGlmZkV4cGFuZGVkLmtleTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByYW5nZU5vZGVzID0gZ2V0TWluaW11bVJhbmdlVHJhbnNpdGlvblJhbmdlKCgwLCBfZGlmZlV0aWwuZ2V0RXhwYW5kUmFuZ2UpKHByZXZEYXRhLCBkYXRhLCBkaWZmRXhwYW5kZWQua2V5KSwgdmlydHVhbCwgaGVpZ2h0LCBpdGVtSGVpZ2h0KTtcbiAgICAgICAgdmFyIG5ld1RyYW5zaXRpb25EYXRhID0gcHJldkRhdGEuc2xpY2UoKTtcbiAgICAgICAgbmV3VHJhbnNpdGlvbkRhdGEuc3BsaWNlKGtleUluZGV4ICsgMSwgMCwgTW90aW9uRmxhdHRlbkRhdGEpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uRGF0YShuZXdUcmFuc2l0aW9uRGF0YSk7XG4gICAgICAgIHNldFRyYW5zaXRpb25SYW5nZShyYW5nZU5vZGVzKTtcbiAgICAgICAgc2V0TW90aW9uVHlwZSgnc2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9rZXlJbmRleCA9IGRhdGEuZmluZEluZGV4KGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBrZXkgPSBfcmVmMi5rZXk7XG4gICAgICAgICAgcmV0dXJuIGtleSA9PT0gZGlmZkV4cGFuZGVkLmtleTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfcmFuZ2VOb2RlcyA9IGdldE1pbmltdW1SYW5nZVRyYW5zaXRpb25SYW5nZSgoMCwgX2RpZmZVdGlsLmdldEV4cGFuZFJhbmdlKShkYXRhLCBwcmV2RGF0YSwgZGlmZkV4cGFuZGVkLmtleSksIHZpcnR1YWwsIGhlaWdodCwgaXRlbUhlaWdodCk7XG4gICAgICAgIHZhciBfbmV3VHJhbnNpdGlvbkRhdGEgPSBkYXRhLnNsaWNlKCk7XG4gICAgICAgIF9uZXdUcmFuc2l0aW9uRGF0YS5zcGxpY2UoX2tleUluZGV4ICsgMSwgMCwgTW90aW9uRmxhdHRlbkRhdGEpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uRGF0YShfbmV3VHJhbnNpdGlvbkRhdGEpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uUmFuZ2UoX3JhbmdlTm9kZXMpO1xuICAgICAgICBzZXRNb3Rpb25UeXBlKCdoaWRlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcmV2RGF0YSAhPT0gZGF0YSkge1xuICAgICAgLy8gSWYgd2hvbGUgZGF0YSBjaGFuZ2VkLCB3ZSBqdXN0IHJlZnJlc2ggdGhlIGxpc3RcbiAgICAgIHNldFByZXZEYXRhKGRhdGEpO1xuICAgICAgc2V0VHJhbnNpdGlvbkRhdGEoZGF0YSk7XG4gICAgfVxuICB9LCBbZXhwYW5kZWRLZXlzLCBkYXRhXSk7XG5cbiAgLy8gV2Ugc2hvdWxkIGNsZWFuIHVwIG1vdGlvbiBpZiBpcyBjaGFuZ2VkIGJ5IGRyYWdnaW5nXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgb25Nb3Rpb25FbmQoKTtcbiAgICB9XG4gIH0sIFtkcmFnZ2luZ10pO1xuICB2YXIgbWVyZ2VkRGF0YSA9IG1vdGlvbiA/IHRyYW5zaXRpb25EYXRhIDogZGF0YTtcbiAgdmFyIHRyZWVOb2RlUmVxdWlyZWRQcm9wcyA9IHtcbiAgICBleHBhbmRlZEtleXM6IGV4cGFuZGVkS2V5cyxcbiAgICBzZWxlY3RlZEtleXM6IHNlbGVjdGVkS2V5cyxcbiAgICBsb2FkZWRLZXlzOiBsb2FkZWRLZXlzLFxuICAgIGxvYWRpbmdLZXlzOiBsb2FkaW5nS2V5cyxcbiAgICBjaGVja2VkS2V5czogY2hlY2tlZEtleXMsXG4gICAgaGFsZkNoZWNrZWRLZXlzOiBoYWxmQ2hlY2tlZEtleXMsXG4gICAgZHJhZ092ZXJOb2RlS2V5OiBkcmFnT3Zlck5vZGVLZXksXG4gICAgZHJvcFBvc2l0aW9uOiBkcm9wUG9zaXRpb24sXG4gICAga2V5RW50aXRpZXM6IGtleUVudGl0aWVzXG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgZm9jdXNlZCAmJiBhY3RpdmVJdGVtICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgc3R5bGU6IEhJRERFTl9TVFlMRSxcbiAgICBcImFyaWEtbGl2ZVwiOiBcImFzc2VydGl2ZVwiXG4gIH0sIGdldEFjY2Vzc2liaWxpdHlQYXRoKGFjdGl2ZUl0ZW0pKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgc3R5bGU6IEhJRERFTl9TVFlMRSxcbiAgICBkaXNhYmxlZDogZm9jdXNhYmxlID09PSBmYWxzZSB8fCBkaXNhYmxlZCxcbiAgICB0YWJJbmRleDogZm9jdXNhYmxlICE9PSBmYWxzZSA/IHRhYkluZGV4IDogbnVsbCxcbiAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIHZhbHVlOiBcIlwiLFxuICAgIG9uQ2hhbmdlOiBub29wLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBcImZvciBzY3JlZW4gcmVhZGVyXCJcbiAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRyZWVub2RlXCIpLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBzdHlsZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5kZW50XCIpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IGluZGVudE1lYXN1cmVyUmVmLFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbmRlbnQtdW5pdFwiKVxuICB9KSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfcmNWaXJ0dWFsTGlzdC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBkb21Qcm9wcywge1xuICAgIGRhdGE6IG1lcmdlZERhdGEsXG4gICAgaXRlbUtleTogaXRlbUtleSxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBmdWxsSGVpZ2h0OiBmYWxzZSxcbiAgICB2aXJ0dWFsOiB2aXJ0dWFsLFxuICAgIGl0ZW1IZWlnaHQ6IGl0ZW1IZWlnaHQsXG4gICAgc2Nyb2xsV2lkdGg6IHNjcm9sbFdpZHRoLFxuICAgIHByZWZpeENsczogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1saXN0XCIpLFxuICAgIHJlZjogbGlzdFJlZixcbiAgICByb2xlOiBcInRyZWVcIixcbiAgICBvblZpc2libGVDaGFuZ2U6IGZ1bmN0aW9uIG9uVmlzaWJsZUNoYW5nZShvcmlnaW5MaXN0KSB7XG4gICAgICAvLyBUaGUgYmVzdCBtYXRjaCBpcyB1c2luZyBgZnVsbExpc3RgIC0gYG9yaWdpbkxpc3RgID0gYHJlc3RMaXN0YFxuICAgICAgLy8gYW5kIGNoZWNrIHRoZSBgcmVzdExpc3RgIHRvIHNlZSBpZiBoYXMgdGhlIE1PVElPTl9LRVkgbm9kZVxuICAgICAgLy8gYnV0IHRoaXMgd2lsbCBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZSBmb3IgbG9uZyBsaXN0IGNvbXBhcmVcbiAgICAgIC8vIHdlIGp1c3QgY2hlY2sgYG9yaWdpbkxpc3RgIGFuZCByZXBlYXQgdHJpZ2dlciBgb25Nb3Rpb25FbmRgXG4gICAgICBpZiAob3JpZ2luTGlzdC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbUtleShpdGVtKSAhPT0gTU9USU9OX0tFWTtcbiAgICAgIH0pKSB7XG4gICAgICAgIG9uTW90aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9KSwgZnVuY3Rpb24gKHRyZWVOb2RlKSB7XG4gICAgdmFyIHBvcyA9IHRyZWVOb2RlLnBvcyxcbiAgICAgIHJlc3RQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sICgoMCwgX29iamVjdERlc3RydWN0dXJpbmdFbXB0eTIuZGVmYXVsdCkodHJlZU5vZGUuZGF0YSksIHRyZWVOb2RlLmRhdGEpKSxcbiAgICAgIHRpdGxlID0gdHJlZU5vZGUudGl0bGUsXG4gICAgICBrZXkgPSB0cmVlTm9kZS5rZXksXG4gICAgICBpc1N0YXJ0ID0gdHJlZU5vZGUuaXNTdGFydCxcbiAgICAgIGlzRW5kID0gdHJlZU5vZGUuaXNFbmQ7XG4gICAgdmFyIG1lcmdlZEtleSA9ICgwLCBfdHJlZVV0aWwuZ2V0S2V5KShrZXksIHBvcyk7XG4gICAgZGVsZXRlIHJlc3RQcm9wcy5rZXk7XG4gICAgZGVsZXRlIHJlc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgdHJlZU5vZGVQcm9wcyA9ICgwLCBfdHJlZVV0aWwuZ2V0VHJlZU5vZGVQcm9wcykobWVyZ2VkS2V5LCB0cmVlTm9kZVJlcXVpcmVkUHJvcHMpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfTW90aW9uVHJlZU5vZGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcmVzdFByb3BzLCB0cmVlTm9kZVByb3BzLCB7XG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBhY3RpdmU6ICEhYWN0aXZlSXRlbSAmJiBrZXkgPT09IGFjdGl2ZUl0ZW0ua2V5LFxuICAgICAgcG9zOiBwb3MsXG4gICAgICBkYXRhOiB0cmVlTm9kZS5kYXRhLFxuICAgICAgaXNTdGFydDogaXNTdGFydCxcbiAgICAgIGlzRW5kOiBpc0VuZCxcbiAgICAgIG1vdGlvbjogbW90aW9uLFxuICAgICAgbW90aW9uTm9kZXM6IGtleSA9PT0gTU9USU9OX0tFWSA/IHRyYW5zaXRpb25SYW5nZSA6IG51bGwsXG4gICAgICBtb3Rpb25UeXBlOiBtb3Rpb25UeXBlLFxuICAgICAgb25Nb3Rpb25TdGFydDogb25MaXN0Q2hhbmdlU3RhcnQsXG4gICAgICBvbk1vdGlvbkVuZDogb25Nb3Rpb25FbmQsXG4gICAgICB0cmVlTm9kZVJlcXVpcmVkUHJvcHM6IHRyZWVOb2RlUmVxdWlyZWRQcm9wcyxcbiAgICAgIG9uTW91c2VNb3ZlOiBmdW5jdGlvbiBvbk1vdXNlTW92ZSgpIHtcbiAgICAgICAgb25BY3RpdmVDaGFuZ2UobnVsbCk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9KSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE5vZGVMaXN0LmRpc3BsYXlOYW1lID0gJ05vZGVMaXN0Jztcbn1cbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IE5vZGVMaXN0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGLElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3RERSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxH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