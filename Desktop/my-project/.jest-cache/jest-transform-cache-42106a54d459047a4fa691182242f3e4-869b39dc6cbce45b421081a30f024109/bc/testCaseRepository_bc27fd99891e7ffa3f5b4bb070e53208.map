{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/testcases/repositories/testCaseRepository.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/testcases/repositories/testCaseRepository.ts"],"sourcesContent":["import pgClient, { ensurePgConnected } from '../../../infrastructure/database/pgClient';\nimport { TestCase, TestCaseVersion } from '../models/TestCase';\n\nexport async function createTestCase(tc: Omit<TestCase, 'id' | 'createdAt' | 'updatedAt'>): Promise<TestCase> {\n    await ensurePgConnected();\n    const result = await pgClient.query(\n        `INSERT INTO testcases (title, prereq, steps, expected, priority, tags, status, created_by) \n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`,\n        [tc.title, tc.prereq, JSON.stringify(tc.steps), tc.expected, tc.priority, tc.tags, tc.status, tc.createdBy]\n    );\n    return rowToTestCase(result.rows[0]);\n}\n\nexport async function getTestCaseById(id: number): Promise<TestCase | null> {\n    await ensurePgConnected();\n    const result = await pgClient.query('SELECT * FROM testcases WHERE id = $1', [id]);\n    if (result.rows.length === 0) return null;\n    return rowToTestCase(result.rows[0]);\n}\n\nexport async function updateTestCase(id: number, patch: Partial<TestCase>): Promise<TestCase | null> {\n    await ensurePgConnected();\n    const current = await getTestCaseById(id);\n    if (!current) return null;\n    const result = await pgClient.query(\n        `UPDATE testcases SET title=$1, prereq=$2, steps=$3, expected=$4, priority=$5, tags=$6, status=$7, updated_at=NOW() WHERE id=$8 RETURNING *`,\n        [\n            patch.title ?? current.title,\n            patch.prereq ?? current.prereq,\n            JSON.stringify(patch.steps ?? current.steps),\n            patch.expected ?? current.expected,\n            patch.priority ?? current.priority,\n            patch.tags ?? current.tags,\n            patch.status ?? current.status,\n            id\n        ]\n    );\n    if (result.rows.length === 0) return null;\n    return rowToTestCase(result.rows[0]);\n}\n\nexport async function deleteTestCase(id: number): Promise<boolean> {\n    await ensurePgConnected();\n    await pgClient.query('DELETE FROM testcase_versions WHERE testcase_id = $1', [id]);\n    const result = await pgClient.query('DELETE FROM testcases WHERE id = $1', [id]);\n    return (result.rowCount ?? 0) > 0;\n}\n\nexport async function listTestCases(): Promise<TestCase[]> {\n    await ensurePgConnected();\n    const result = await pgClient.query('SELECT * FROM testcases ORDER BY id DESC');\n    return result.rows.map(rowToTestCase);\n}\n\nexport async function createTestCaseVersion(tcVersion: Omit<TestCaseVersion, 'id' | 'createdAt'>): Promise<TestCaseVersion> {\n    await ensurePgConnected();\n    const result = await pgClient.query(\n        `INSERT INTO testcase_versions (testcase_id, version, data, created_by) VALUES ($1, $2, $3, $4) RETURNING *`,\n        [tcVersion.testcaseId, tcVersion.version, JSON.stringify(tcVersion.data), tcVersion.createdBy]\n    );\n    return rowToTestCaseVersion(result.rows[0]);\n}\n\nexport async function listTestCaseVersions(testcaseId: number): Promise<TestCaseVersion[]> {\n    await ensurePgConnected();\n    const result = await pgClient.query('SELECT * FROM testcase_versions WHERE testcase_id = $1 ORDER BY version DESC', [testcaseId]);\n    return result.rows.map(rowToTestCaseVersion);\n}\n\nfunction rowToTestCase(row: any): TestCase {\n    return {\n        id: row.id,\n        title: row.title,\n        prereq: row.prereq,\n        steps: JSON.parse(row.steps),\n        expected: row.expected,\n        priority: row.priority,\n        tags: row.tags,\n        status: row.status,\n        createdBy: row.created_by,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n    };\n}\n\nfunction rowToTestCaseVersion(row: any): TestCaseVersion {\n    let dataObj;\n    if (typeof row.data === 'string') {\n        dataObj = JSON.parse(row.data);\n    } else {\n        dataObj = row.data;\n    }\n    return {\n        id: row.id,\n        testcaseId: row.testcase_id,\n        version: row.version,\n        data: dataObj,\n        createdAt: row.created_at,\n        createdBy: row.created_by,\n    };\n} "],"version":3}