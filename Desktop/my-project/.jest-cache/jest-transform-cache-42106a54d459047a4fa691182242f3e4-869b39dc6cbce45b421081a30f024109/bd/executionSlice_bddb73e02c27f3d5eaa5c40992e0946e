c07b36c6ae2d69022fb0427dc66ecfbc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearOfflineQueue = exports.enqueueOfflineExecution = exports.syncOfflineExecutions = exports.deleteExecution = exports.updateExecution = exports.addExecution = exports.fetchExecutions = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = __importDefault(require("../../../utils/axios"));
const initialState = {
    executions: [],
    loading: false,
    error: null,
    offlineQueue: [],
};
exports.fetchExecutions = (0, toolkit_1.createAsyncThunk)('executions/fetch', async (testcaseId) => {
    const res = await axios_1.default.get(`/api/executions/testcase/${testcaseId}`);
    return res.data;
});
exports.addExecution = (0, toolkit_1.createAsyncThunk)('executions/add', async (data, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.post('/api/executions', data);
        return res.data;
    }
    catch (err) {
        return rejectWithValue(err.response?.data?.error || err.message);
    }
});
exports.updateExecution = (0, toolkit_1.createAsyncThunk)('executions/update', async ({ id, update }, { rejectWithValue }) => {
    try {
        const res = await axios_1.default.put(`/api/executions/${id}`, update);
        return res.data;
    }
    catch (err) {
        return rejectWithValue(err.response?.data?.error || err.message);
    }
});
exports.deleteExecution = (0, toolkit_1.createAsyncThunk)('executions/delete', async (id, { rejectWithValue }) => {
    try {
        await axios_1.default.delete(`/api/executions/${id}`);
        return id;
    }
    catch (err) {
        return rejectWithValue(err.response?.data?.error || err.message);
    }
});
exports.syncOfflineExecutions = (0, toolkit_1.createAsyncThunk)('executions/syncOffline', async (executions, { rejectWithValue }) => {
    try {
        const results = [];
        for (const exec of executions) {
            const res = await axios_1.default.post('/api/executions', exec);
            results.push(res.data);
        }
        return results;
    }
    catch (err) {
        return rejectWithValue(err.response?.data?.error || err.message);
    }
});
const executionSlice = (0, toolkit_1.createSlice)({
    name: 'executions',
    initialState,
    reducers: {
        enqueueOfflineExecution(state, action) {
            state.offlineQueue.push(action.payload);
        },
        clearOfflineQueue(state) {
            state.offlineQueue = [];
        },
    },
    extraReducers: builder => {
        builder
            .addCase(exports.fetchExecutions.pending, state => { state.loading = true; state.error = null; })
            .addCase(exports.fetchExecutions.fulfilled, (state, action) => {
            state.loading = false;
            state.executions = action.payload;
        })
            .addCase(exports.fetchExecutions.rejected, (state, action) => {
            state.loading = false;
            state.error = action.error.message || null;
        })
            .addCase(exports.addExecution.fulfilled, (state, action) => {
            state.executions.push(action.payload);
        })
            .addCase(exports.addExecution.rejected, (state, action) => {
            state.error = action.payload;
        })
            .addCase(exports.updateExecution.fulfilled, (state, action) => {
            const idx = state.executions.findIndex(e => e.id === action.payload.id);
            if (idx !== -1)
                state.executions[idx] = action.payload;
        })
            .addCase(exports.updateExecution.rejected, (state, action) => {
            state.error = action.payload;
        })
            .addCase(exports.deleteExecution.fulfilled, (state, action) => {
            state.executions = state.executions.filter(e => e.id !== action.payload);
        })
            .addCase(exports.deleteExecution.rejected, (state, action) => {
            state.error = action.payload;
        })
            .addCase(exports.syncOfflineExecutions.fulfilled, (state, action) => {
            state.executions.push(...action.payload);
            state.offlineQueue = [];
        })
            .addCase(exports.syncOfflineExecutions.rejected, (state, action) => {
            state.error = action.payload;
        });
    }
});
_a = executionSlice.actions, exports.enqueueOfflineExecution = _a.enqueueOfflineExecution, exports.clearOfflineQueue = _a.clearOfflineQueue;
exports.default = executionSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvZmVhdHVyZXMvRXhlY3V0aW9uTWFuYWdlbWVudC9zdG9yZS9leGVjdXRpb25TbGljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsOENBQWdGO0FBRWhGLGlFQUF1QztBQVN2QyxNQUFNLFlBQVksR0FBbUI7SUFDakMsVUFBVSxFQUFFLEVBQUU7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLEtBQUssRUFBRSxJQUFJO0lBQ1gsWUFBWSxFQUFFLEVBQUU7Q0FDbkIsQ0FBQztBQUVXLFFBQUEsZUFBZSxHQUFHLElBQUEsMEJBQWdCLEVBQzNDLGtCQUFrQixFQUNsQixLQUFLLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBRyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNwRSxPQUFPLEdBQUcsQ0FBQyxJQUFtQixDQUFDO0FBQ25DLENBQUMsQ0FDSixDQUFDO0FBRVcsUUFBQSxZQUFZLEdBQUcsSUFBQSwwQkFBZ0IsRUFDeEMsZ0JBQWdCLEVBQ2hCLEtBQUssRUFBRSxJQUF1RCxFQUFFLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRTtJQUNuRixJQUFJLENBQUM7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxHQUFHLENBQUMsSUFBaUIsQ0FBQztJQUNqQyxDQUFDO0lBQUMsT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUNoQixPQUFPLGVBQWUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JFLENBQUM7QUFDTCxDQUFDLENBQ0osQ0FBQztBQUVXLFFBQUEsZUFBZSxHQUFHLElBQUEsMEJBQWdCLEVBQzNDLG1CQUFtQixFQUNuQixLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUF3RSxFQUFFLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRTtJQUNoSCxJQUFJLENBQUM7UUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUcsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNELE9BQU8sR0FBRyxDQUFDLElBQWlCLENBQUM7SUFDakMsQ0FBQztJQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDaEIsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDO0FBQ0wsQ0FBQyxDQUNKLENBQUM7QUFFVyxRQUFBLGVBQWUsR0FBRyxJQUFBLDBCQUFnQixFQUMzQyxtQkFBbUIsRUFDbkIsS0FBSyxFQUFFLEVBQVUsRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUU7SUFDdEMsSUFBSSxDQUFDO1FBQ0QsTUFBTSxlQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDaEIsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDO0FBQ0wsQ0FBQyxDQUNKLENBQUM7QUFFVyxRQUFBLHFCQUFxQixHQUFHLElBQUEsMEJBQWdCLEVBQ2pELHdCQUF3QixFQUN4QixLQUFLLEVBQUUsVUFBK0QsRUFBRSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUU7SUFDM0YsSUFBSSxDQUFDO1FBQ0QsTUFBTSxPQUFPLEdBQWdCLEVBQUUsQ0FBQztRQUNoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFpQixDQUFDLENBQUM7UUFDeEMsQ0FBQztRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckUsQ0FBQztBQUNMLENBQUMsQ0FDSixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQUcsSUFBQSxxQkFBVyxFQUFDO0lBQy9CLElBQUksRUFBRSxZQUFZO0lBQ2xCLFlBQVk7SUFDWixRQUFRLEVBQUU7UUFDTix1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsTUFBd0U7WUFDbkcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxLQUFLO1lBQ25CLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzVCLENBQUM7S0FDSjtJQUNELGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUNyQixPQUFPO2FBQ0YsT0FBTyxDQUFDLHVCQUFlLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4RixPQUFPLENBQUMsdUJBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbEQsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDdEIsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyx1QkFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNqRCxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQztRQUMvQyxDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsb0JBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDL0MsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxvQkFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM5QyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFpQixDQUFDO1FBQzNDLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyx1QkFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNsRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4RSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzNELENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyx1QkFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNqRCxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFpQixDQUFDO1FBQzNDLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyx1QkFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNsRCxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0UsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLHVCQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2pELEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQWlCLENBQUM7UUFDM0MsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLDZCQUFxQixDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4RCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsNkJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3ZELEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQWlCLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRVUsS0FBaUQsY0FBYyxDQUFDLE9BQU8sRUFBckUsK0JBQXVCLCtCQUFFLHlCQUFpQix3QkFBNEI7QUFDckYsa0JBQWUsY0FBYyxDQUFDLE9BQU8sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9yZW5kZXJlci9mZWF0dXJlcy9FeGVjdXRpb25NYW5hZ2VtZW50L3N0b3JlL2V4ZWN1dGlvblNsaWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBjcmVhdGVBc3luY1RodW5rLCBQYXlsb2FkQWN0aW9uIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgeyBFeGVjdXRpb24gfSBmcm9tICdAL21haW4vYXBwL2RvbWFpbnMvZXhlY3V0aW9ucy9tb2RlbHMvRXhlY3V0aW9uJztcbmltcG9ydCBhcGkgZnJvbSAnLi4vLi4vLi4vdXRpbHMvYXhpb3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvblN0YXRlIHtcbiAgICBleGVjdXRpb25zOiBFeGVjdXRpb25bXTtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGVycm9yOiBzdHJpbmcgfCBudWxsO1xuICAgIG9mZmxpbmVRdWV1ZTogT21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0JyB8ICd1cGRhdGVkQXQnPltdO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IEV4ZWN1dGlvblN0YXRlID0ge1xuICAgIGV4ZWN1dGlvbnM6IFtdLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIGVycm9yOiBudWxsLFxuICAgIG9mZmxpbmVRdWV1ZTogW10sXG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hFeGVjdXRpb25zID0gY3JlYXRlQXN5bmNUaHVuayhcbiAgICAnZXhlY3V0aW9ucy9mZXRjaCcsXG4gICAgYXN5bmMgKHRlc3RjYXNlSWQ6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KGAvYXBpL2V4ZWN1dGlvbnMvdGVzdGNhc2UvJHt0ZXN0Y2FzZUlkfWApO1xuICAgICAgICByZXR1cm4gcmVzLmRhdGEgYXMgRXhlY3V0aW9uW107XG4gICAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IGFkZEV4ZWN1dGlvbiA9IGNyZWF0ZUFzeW5jVGh1bmsoXG4gICAgJ2V4ZWN1dGlvbnMvYWRkJyxcbiAgICBhc3luYyAoZGF0YTogT21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0JyB8ICd1cGRhdGVkQXQnPiwgeyByZWplY3RXaXRoVmFsdWUgfSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLnBvc3QoJy9hcGkvZXhlY3V0aW9ucycsIGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhIGFzIEV4ZWN1dGlvbjtcbiAgICAgICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RXaXRoVmFsdWUoZXJyLnJlc3BvbnNlPy5kYXRhPy5lcnJvciB8fCBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlRXhlY3V0aW9uID0gY3JlYXRlQXN5bmNUaHVuayhcbiAgICAnZXhlY3V0aW9ucy91cGRhdGUnLFxuICAgIGFzeW5jICh7IGlkLCB1cGRhdGUgfTogeyBpZDogbnVtYmVyOyB1cGRhdGU6IFBhcnRpYWw8T21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0Jz4+IH0sIHsgcmVqZWN0V2l0aFZhbHVlIH0pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5wdXQoYC9hcGkvZXhlY3V0aW9ucy8ke2lkfWAsIHVwZGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEgYXMgRXhlY3V0aW9uO1xuICAgICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdFdpdGhWYWx1ZShlcnIucmVzcG9uc2U/LmRhdGE/LmVycm9yIHx8IGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmV4cG9ydCBjb25zdCBkZWxldGVFeGVjdXRpb24gPSBjcmVhdGVBc3luY1RodW5rKFxuICAgICdleGVjdXRpb25zL2RlbGV0ZScsXG4gICAgYXN5bmMgKGlkOiBudW1iZXIsIHsgcmVqZWN0V2l0aFZhbHVlIH0pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGFwaS5kZWxldGUoYC9hcGkvZXhlY3V0aW9ucy8ke2lkfWApO1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdFdpdGhWYWx1ZShlcnIucmVzcG9uc2U/LmRhdGE/LmVycm9yIHx8IGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmV4cG9ydCBjb25zdCBzeW5jT2ZmbGluZUV4ZWN1dGlvbnMgPSBjcmVhdGVBc3luY1RodW5rKFxuICAgICdleGVjdXRpb25zL3N5bmNPZmZsaW5lJyxcbiAgICBhc3luYyAoZXhlY3V0aW9uczogT21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0JyB8ICd1cGRhdGVkQXQnPltdLCB7IHJlamVjdFdpdGhWYWx1ZSB9KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzOiBFeGVjdXRpb25bXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBleGVjIG9mIGV4ZWN1dGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkucG9zdCgnL2FwaS9leGVjdXRpb25zJywgZXhlYyk7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlcy5kYXRhIGFzIEV4ZWN1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RXaXRoVmFsdWUoZXJyLnJlc3BvbnNlPy5kYXRhPy5lcnJvciB8fCBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5jb25zdCBleGVjdXRpb25TbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAnZXhlY3V0aW9ucycsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIHJlZHVjZXJzOiB7XG4gICAgICAgIGVucXVldWVPZmZsaW5lRXhlY3V0aW9uKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248T21pdDxFeGVjdXRpb24sICdpZCcgfCAnY3JlYXRlZEF0JyB8ICd1cGRhdGVkQXQnPj4pIHtcbiAgICAgICAgICAgIHN0YXRlLm9mZmxpbmVRdWV1ZS5wdXNoKGFjdGlvbi5wYXlsb2FkKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJPZmZsaW5lUXVldWUoc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlLm9mZmxpbmVRdWV1ZSA9IFtdO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgZXh0cmFSZWR1Y2VyczogYnVpbGRlciA9PiB7XG4gICAgICAgIGJ1aWxkZXJcbiAgICAgICAgICAgIC5hZGRDYXNlKGZldGNoRXhlY3V0aW9ucy5wZW5kaW5nLCBzdGF0ZSA9PiB7IHN0YXRlLmxvYWRpbmcgPSB0cnVlOyBzdGF0ZS5lcnJvciA9IG51bGw7IH0pXG4gICAgICAgICAgICAuYWRkQ2FzZShmZXRjaEV4ZWN1dGlvbnMuZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5leGVjdXRpb25zID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZmV0Y2hFeGVjdXRpb25zLnJlamVjdGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5lcnJvci5tZXNzYWdlIHx8IG51bGw7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoYWRkRXhlY3V0aW9uLmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5leGVjdXRpb25zLnB1c2goYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKGFkZEV4ZWN1dGlvbi5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5wYXlsb2FkIGFzIHN0cmluZztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkQ2FzZSh1cGRhdGVFeGVjdXRpb24uZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IHN0YXRlLmV4ZWN1dGlvbnMuZmluZEluZGV4KGUgPT4gZS5pZCA9PT0gYWN0aW9uLnBheWxvYWQuaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZHggIT09IC0xKSBzdGF0ZS5leGVjdXRpb25zW2lkeF0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkQ2FzZSh1cGRhdGVFeGVjdXRpb24ucmVqZWN0ZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24ucGF5bG9hZCBhcyBzdHJpbmc7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZGVsZXRlRXhlY3V0aW9uLmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5leGVjdXRpb25zID0gc3RhdGUuZXhlY3V0aW9ucy5maWx0ZXIoZSA9PiBlLmlkICE9PSBhY3Rpb24ucGF5bG9hZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZGVsZXRlRXhlY3V0aW9uLnJlamVjdGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQgYXMgc3RyaW5nO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKHN5bmNPZmZsaW5lRXhlY3V0aW9ucy5mdWxmaWxsZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXhlY3V0aW9ucy5wdXNoKC4uLmFjdGlvbi5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5vZmZsaW5lUXVldWUgPSBbXTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkQ2FzZShzeW5jT2ZmbGluZUV4ZWN1dGlvbnMucmVqZWN0ZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24ucGF5bG9hZCBhcyBzdHJpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IHsgZW5xdWV1ZU9mZmxpbmVFeGVjdXRpb24sIGNsZWFyT2ZmbGluZVF1ZXVlIH0gPSBleGVjdXRpb25TbGljZS5hY3Rpb25zO1xuZXhwb3J0IGRlZmF1bHQgZXhlY3V0aW9uU2xpY2UucmVkdWNlcjsgIl0sInZlcnNpb24iOjN9