{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/Dashboard/components/DashboardLayout.tsx","mappings":";;;;;;AACA,0EAAuC;AACvC,6CAAuD;AAEvD,8EAAwF;AACxF,4DAAoC;AACpC,gEAAwC;AACxC,8DAAsC;AAetC,MAAM,eAAe,GAAG,2BAAM,CAAC,GAAG,CAAsB;;2BAE7B,KAAK,CAAC,EAAE;IAC/B,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;IAC/C,MAAM,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,IAAI,CAAC;IAC1E,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC;IAC7E,OAAO,GAAG,SAAS,QAAQ,UAAU,EAAE,CAAC;AAC1C,CAAC;;;;CAIF,CAAC;AAEF,MAAM,YAAY,GAAG,2BAAM,CAAC,MAAM,CAAgC;;;IAG9D,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa;;;;;;;;;;;;;;;;;;;CAmBtE,CAAC;AAEF,MAAM,cAAc,GAAG,2BAAM,CAAC,GAAG,CAA0B;;gBAE3C,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;kBAC9C,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,mBAAmB;;;CAGvF,CAAC;AAEF,MAAM,eAAe,GAAa,GAAG,EAAE;IACrC,MAAM,QAAQ,GAAG,IAAA,yBAAW,GAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,IAAA,yBAAW,EAAC,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAExE,MAAM,qBAAqB,GAAG,GAAG,EAAE;QACjC,QAAQ,CAAC,IAAA,sCAAe,GAAE,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAM,sBAAsB,GAAG,GAAG,EAAE;QAClC,QAAQ,CAAC,IAAA,uCAAgB,GAAE,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF,OAAO,CACL,wBAAC,eAAe,IAAC,MAAM,EAAE,MAAM,aAC7B,wBAAC,cAAc,IAAC,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,WAAW,aACvD,uBAAC,mBAAS,KAAG,EACb,uBAAC,YAAY,IAAC,QAAQ,EAAC,MAAM,EAAC,OAAO,EAAE,qBAAqB,YACzD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAC5B,IACA,EAEjB,uBAAC,qBAAW,KAAG,EAEf,wBAAC,cAAc,IAAC,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,aACxD,uBAAC,oBAAU,KAAG,EACd,uBAAC,YAAY,IAAC,QAAQ,EAAC,OAAO,EAAC,OAAO,EAAE,sBAAsB,YAC3D,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAC7B,IACA,IACD,CACnB,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,eAAe,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/Dashboard/components/DashboardLayout.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../../store';\nimport { toggleLeftPanel, toggleRightPanel } from '../../../store/dashboardLayoutSlice';\nimport LeftPanel from './LeftPanel';\nimport CenterPanel from './CenterPanel';\nimport RightPanel from './RightPanel';\n\ninterface LayoutContainerProps {\n  layout: {\n    leftPanel: {\n      isCollapsed: boolean;\n      width: number;\n    };\n    rightPanel: {\n      isCollapsed: boolean;\n      width: number;\n    };\n  };\n}\n\nconst LayoutContainer = styled.div<LayoutContainerProps>`\n  display: grid;\n  grid-template-columns: ${props => {\n    const { leftPanel, rightPanel } = props.layout;\n    const leftWidth = leftPanel.isCollapsed ? '60px' : `${leftPanel.width}px`;\n    const rightWidth = rightPanel.isCollapsed ? '60px' : `${rightPanel.width}px`;\n    return `${leftWidth} 1fr ${rightWidth}`;\n  }};\n  height: 100vh;\n  transition: grid-template-columns 0.3s ease;\n  overflow: hidden;\n`;\n\nconst ToggleButton = styled.button<{ position: 'left' | 'right' }>`\n  position: absolute;\n  top: 50%;\n  ${props => props.position === 'left' ? 'right: -15px' : 'left: -15px'};\n  transform: translateY(-50%);\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background: #3b82f6;\n  color: white;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  z-index: 10;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  \n  &:hover {\n    background: #2563eb;\n  }\n`;\n\nconst PanelContainer = styled.div<{ isCollapsed: boolean }>`\n  position: relative;\n  background: ${props => props.isCollapsed ? '#f8fafc' : 'white'};\n  border-right: ${props => props.isCollapsed ? '1px solid #e2e8f0' : '1px solid #e2e8f0'};\n  overflow: hidden;\n  transition: all 0.3s ease;\n`;\n\nconst DashboardLayout: React.FC = () => {\n  const dispatch = useDispatch();\n  const layout = useSelector((state: RootState) => state.dashboardLayout);\n\n  const handleToggleLeftPanel = () => {\n    dispatch(toggleLeftPanel());\n  };\n\n  const handleToggleRightPanel = () => {\n    dispatch(toggleRightPanel());\n  };\n\n  return (\n    <LayoutContainer layout={layout}>\n      <PanelContainer isCollapsed={layout.leftPanel.isCollapsed}>\n        <LeftPanel />\n        <ToggleButton position=\"left\" onClick={handleToggleLeftPanel}>\n          {layout.leftPanel.isCollapsed ? '→' : '←'}\n        </ToggleButton>\n      </PanelContainer>\n      \n      <CenterPanel />\n      \n      <PanelContainer isCollapsed={layout.rightPanel.isCollapsed}>\n        <RightPanel />\n        <ToggleButton position=\"right\" onClick={handleToggleRightPanel}>\n          {layout.rightPanel.isCollapsed ? '←' : '→'}\n        </ToggleButton>\n      </PanelContainer>\n    </LayoutContainer>\n  );\n};\n\nexport default DashboardLayout; "],"version":3}