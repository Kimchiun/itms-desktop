8f96b46c6bfc0cee3b8a0688d2420401
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestCaseWithVersion = createTestCaseWithVersion;
exports.updateTestCaseWithVersion = updateTestCaseWithVersion;
exports.deleteTestCaseWithIndex = deleteTestCaseWithIndex;
exports.getTestCaseVersions = getTestCaseVersions;
const testCaseRepository_1 = require("../repositories/testCaseRepository");
const testCaseIndexer_1 = require("../elasticsearch/testCaseIndexer");
function omitFields(obj, keys) {
    const copy = { ...obj };
    keys.forEach(k => { delete copy[k]; });
    return copy;
}
async function createTestCaseWithVersion(tc) {
    const created = await (0, testCaseRepository_1.createTestCase)(tc);
    await (0, testCaseRepository_1.createTestCaseVersion)({
        testcaseId: created.id,
        version: 1,
        data: { ...tc },
        createdBy: tc.createdBy,
    });
    await (0, testCaseIndexer_1.indexTestCase)(created);
    return created;
}
async function updateTestCaseWithVersion(id, patch, user) {
    const before = await (0, testCaseRepository_1.getTestCaseById)(id);
    if (!before)
        return null;
    const updated = await (0, testCaseRepository_1.updateTestCase)(id, patch);
    if (!updated)
        return null;
    const versions = await (0, testCaseRepository_1.listTestCaseVersions)(id);
    await (0, testCaseRepository_1.createTestCaseVersion)({
        testcaseId: id,
        version: (versions[0]?.version || 1) + 1,
        data: omitFields(updated, ['id', 'createdAt', 'updatedAt']),
        createdBy: user,
    });
    await (0, testCaseIndexer_1.indexTestCase)(updated);
    return updated;
}
async function deleteTestCaseWithIndex(id) {
    const ok = await (0, testCaseRepository_1.deleteTestCase)(id);
    if (ok)
        await (0, testCaseIndexer_1.removeTestCaseFromIndex)(id);
    return ok;
}
async function getTestCaseVersions(id) {
    return (0, testCaseRepository_1.listTestCaseVersions)(id);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy90ZXN0Y2FzZXMvc2VydmljZXMvdGVzdENhc2VTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7O0FBVUEsOERBVUM7QUFFRCw4REFjQztBQUVELDBEQUlDO0FBRUQsa0RBRUM7QUE5Q0QsMkVBQWlMO0FBQ2pMLHNFQUEwRjtBQUcxRixTQUFTLFVBQVUsQ0FBc0MsR0FBTSxFQUFFLElBQVM7SUFDdEUsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxPQUFRLElBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELE9BQU8sSUFBa0IsQ0FBQztBQUM5QixDQUFDO0FBRU0sS0FBSyxVQUFVLHlCQUF5QixDQUFDLEVBQW9EO0lBQ2hHLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBQSxtQ0FBYyxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sSUFBQSwwQ0FBcUIsRUFBQztRQUN4QixVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxFQUFFLENBQUM7UUFDVixJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNmLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUztLQUMxQixDQUFDLENBQUM7SUFDSCxNQUFNLElBQUEsK0JBQWEsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBRU0sS0FBSyxVQUFVLHlCQUF5QixDQUFDLEVBQVUsRUFBRSxLQUF3QixFQUFFLElBQVk7SUFDOUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLG9DQUFlLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLElBQUksQ0FBQztJQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsbUNBQWMsRUFBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFPLElBQUksQ0FBQztJQUMxQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEseUNBQW9CLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEQsTUFBTSxJQUFBLDBDQUFxQixFQUFDO1FBQ3hCLFVBQVUsRUFBRSxFQUFFO1FBQ2QsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3hDLElBQUksRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMzRCxTQUFTLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUM7SUFDSCxNQUFNLElBQUEsK0JBQWEsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBRU0sS0FBSyxVQUFVLHVCQUF1QixDQUFDLEVBQVU7SUFDcEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFBLG1DQUFjLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsSUFBSSxFQUFFO1FBQUUsTUFBTSxJQUFBLHlDQUF1QixFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sRUFBRSxDQUFDO0FBQ2QsQ0FBQztBQUVNLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxFQUFVO0lBQ2hELE9BQU8sSUFBQSx5Q0FBb0IsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3Qvc3JjL21haW4vYXBwL2RvbWFpbnMvdGVzdGNhc2VzL3NlcnZpY2VzL3Rlc3RDYXNlU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVUZXN0Q2FzZSwgZ2V0VGVzdENhc2VCeUlkLCB1cGRhdGVUZXN0Q2FzZSwgZGVsZXRlVGVzdENhc2UsIGxpc3RUZXN0Q2FzZXMsIGNyZWF0ZVRlc3RDYXNlVmVyc2lvbiwgbGlzdFRlc3RDYXNlVmVyc2lvbnMgfSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvdGVzdENhc2VSZXBvc2l0b3J5JztcbmltcG9ydCB7IGluZGV4VGVzdENhc2UsIHJlbW92ZVRlc3RDYXNlRnJvbUluZGV4IH0gZnJvbSAnLi4vZWxhc3RpY3NlYXJjaC90ZXN0Q2FzZUluZGV4ZXInO1xuaW1wb3J0IHsgVGVzdENhc2UsIFRlc3RDYXNlVmVyc2lvbiB9IGZyb20gJy4uL21vZGVscy9UZXN0Q2FzZSc7XG5cbmZ1bmN0aW9uIG9taXRGaWVsZHM8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KG9iajogVCwga2V5czogS1tdKTogT21pdDxULCBLPiB7XG4gICAgY29uc3QgY29weSA9IHsgLi4ub2JqIH07XG4gICAga2V5cy5mb3JFYWNoKGsgPT4geyBkZWxldGUgKGNvcHkgYXMgYW55KVtrXTsgfSk7XG4gICAgcmV0dXJuIGNvcHkgYXMgT21pdDxULCBLPjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRlc3RDYXNlV2l0aFZlcnNpb24odGM6IE9taXQ8VGVzdENhc2UsICdpZCcgfCAnY3JlYXRlZEF0JyB8ICd1cGRhdGVkQXQnPik6IFByb21pc2U8VGVzdENhc2U+IHtcbiAgICBjb25zdCBjcmVhdGVkID0gYXdhaXQgY3JlYXRlVGVzdENhc2UodGMpO1xuICAgIGF3YWl0IGNyZWF0ZVRlc3RDYXNlVmVyc2lvbih7XG4gICAgICAgIHRlc3RjYXNlSWQ6IGNyZWF0ZWQuaWQsXG4gICAgICAgIHZlcnNpb246IDEsXG4gICAgICAgIGRhdGE6IHsgLi4udGMgfSxcbiAgICAgICAgY3JlYXRlZEJ5OiB0Yy5jcmVhdGVkQnksXG4gICAgfSk7XG4gICAgYXdhaXQgaW5kZXhUZXN0Q2FzZShjcmVhdGVkKTtcbiAgICByZXR1cm4gY3JlYXRlZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRlc3RDYXNlV2l0aFZlcnNpb24oaWQ6IG51bWJlciwgcGF0Y2g6IFBhcnRpYWw8VGVzdENhc2U+LCB1c2VyOiBzdHJpbmcpOiBQcm9taXNlPFRlc3RDYXNlIHwgbnVsbD4ge1xuICAgIGNvbnN0IGJlZm9yZSA9IGF3YWl0IGdldFRlc3RDYXNlQnlJZChpZCk7XG4gICAgaWYgKCFiZWZvcmUpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCB1cGRhdGVUZXN0Q2FzZShpZCwgcGF0Y2gpO1xuICAgIGlmICghdXBkYXRlZCkgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgdmVyc2lvbnMgPSBhd2FpdCBsaXN0VGVzdENhc2VWZXJzaW9ucyhpZCk7XG4gICAgYXdhaXQgY3JlYXRlVGVzdENhc2VWZXJzaW9uKHtcbiAgICAgICAgdGVzdGNhc2VJZDogaWQsXG4gICAgICAgIHZlcnNpb246ICh2ZXJzaW9uc1swXT8udmVyc2lvbiB8fCAxKSArIDEsXG4gICAgICAgIGRhdGE6IG9taXRGaWVsZHModXBkYXRlZCwgWydpZCcsICdjcmVhdGVkQXQnLCAndXBkYXRlZEF0J10pLFxuICAgICAgICBjcmVhdGVkQnk6IHVzZXIsXG4gICAgfSk7XG4gICAgYXdhaXQgaW5kZXhUZXN0Q2FzZSh1cGRhdGVkKTtcbiAgICByZXR1cm4gdXBkYXRlZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVRlc3RDYXNlV2l0aEluZGV4KGlkOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBvayA9IGF3YWl0IGRlbGV0ZVRlc3RDYXNlKGlkKTtcbiAgICBpZiAob2spIGF3YWl0IHJlbW92ZVRlc3RDYXNlRnJvbUluZGV4KGlkKTtcbiAgICByZXR1cm4gb2s7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUZXN0Q2FzZVZlcnNpb25zKGlkOiBudW1iZXIpOiBQcm9taXNlPFRlc3RDYXNlVmVyc2lvbltdPiB7XG4gICAgcmV0dXJuIGxpc3RUZXN0Q2FzZVZlcnNpb25zKGlkKTtcbn0gIl0sInZlcnNpb24iOjN9