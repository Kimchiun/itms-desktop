98648a0ab63fb1247586d40fe3d4e442
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.store = exports.logout = exports.setMe = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const testCaseSlice_1 = __importDefault(require("../features/TestCaseManagement/store/testCaseSlice"));
const releaseSlice_1 = __importDefault(require("../features/ReleasePlanning/store/releaseSlice"));
const dashboardSlice_1 = __importDefault(require("../features/Dashboard/store/dashboardSlice"));
const executionSlice_1 = __importDefault(require("../features/ExecutionManagement/store/executionSlice"));
const commentSlice_1 = __importDefault(require("../features/ExecutionManagement/store/commentSlice"));
const notificationSlice_1 = __importDefault(require("../features/ExecutionManagement/store/notificationSlice"));
const selectionSlice_1 = __importDefault(require("../features/TestCaseManagement/store/selectionSlice"));
const dashboardLayoutSlice_1 = __importDefault(require("./dashboardLayoutSlice"));
const undoRedoMiddleware_1 = require("./undoRedoMiddleware");
const userSlice = (0, toolkit_1.createSlice)({
    name: 'users',
    initialState: { me: null },
    reducers: {
        setMe: (state, action) => {
            state.me = action.payload;
        },
        logout: (state) => {
            state.me = null;
        }
    }
});
_a = userSlice.actions, exports.setMe = _a.setMe, exports.logout = _a.logout;
exports.store = (0, toolkit_1.configureStore)({
    reducer: {
        testcases: testCaseSlice_1.default,
        releases: releaseSlice_1.default,
        dashboard: dashboardSlice_1.default,
        executions: executionSlice_1.default,
        comments: commentSlice_1.default,
        notifications: notificationSlice_1.default,
        selection: selectionSlice_1.default,
        dashboardLayout: dashboardLayoutSlice_1.default,
        users: userSlice.reducer
    },
    middleware: (getDefaultMiddleware) => getDefaultMiddleware({
        serializableCheck: {
            ignoredActions: ['persist/PERSIST']
        }
    }).concat(undoRedoMiddleware_1.undoRedoMiddleware)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDhDQUE4RTtBQUM5RSx1R0FBaUY7QUFDakYsa0dBQTRFO0FBQzVFLGdHQUEwRTtBQUMxRSwwR0FBb0Y7QUFDcEYsc0dBQWdGO0FBQ2hGLGdIQUEwRjtBQUMxRix5R0FBbUY7QUFDbkYsa0ZBQTREO0FBQzVELDZEQUEwRDtBQU8xRCxNQUFNLFNBQVMsR0FBRyxJQUFBLHFCQUFXLEVBQUM7SUFDNUIsSUFBSSxFQUFFLE9BQU87SUFDYixZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFlO0lBQ3ZDLFFBQVEsRUFBRTtRQUNSLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxNQUF1RSxFQUFFLEVBQUU7WUFDeEYsS0FBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQzVCLENBQUM7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQixLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNsQixDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFVSxLQUFvQixTQUFTLENBQUMsT0FBTyxFQUFuQyxhQUFLLGFBQUUsY0FBTSxhQUF1QjtBQUV0QyxRQUFBLEtBQUssR0FBRyxJQUFBLHdCQUFjLEVBQUM7SUFDbEMsT0FBTyxFQUFFO1FBQ1AsU0FBUyxFQUFFLHVCQUFlO1FBQzFCLFFBQVEsRUFBRSxzQkFBYztRQUN4QixTQUFTLEVBQUUsd0JBQWdCO1FBQzNCLFVBQVUsRUFBRSx3QkFBZ0I7UUFDNUIsUUFBUSxFQUFFLHNCQUFjO1FBQ3hCLGFBQWEsRUFBRSwyQkFBbUI7UUFDbEMsU0FBUyxFQUFFLHdCQUFnQjtRQUMzQixlQUFlLEVBQUUsOEJBQXNCO1FBQ3ZDLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTztLQUN6QjtJQUNELFVBQVUsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FDbkMsb0JBQW9CLENBQUM7UUFDbkIsaUJBQWlCLEVBQUU7WUFDakIsY0FBYyxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDcEM7S0FDRixDQUFDLENBQUMsTUFBTSxDQUFDLHVDQUFrQixDQUFDO0NBQ2hDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9yZW5kZXJlci9zdG9yZS9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWd1cmVTdG9yZSwgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB0ZXN0Q2FzZVJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvVGVzdENhc2VNYW5hZ2VtZW50L3N0b3JlL3Rlc3RDYXNlU2xpY2UnO1xuaW1wb3J0IHJlbGVhc2VSZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL1JlbGVhc2VQbGFubmluZy9zdG9yZS9yZWxlYXNlU2xpY2UnO1xuaW1wb3J0IGRhc2hib2FyZFJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvRGFzaGJvYXJkL3N0b3JlL2Rhc2hib2FyZFNsaWNlJztcbmltcG9ydCBleGVjdXRpb25SZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvZXhlY3V0aW9uU2xpY2UnO1xuaW1wb3J0IGNvbW1lbnRSZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvY29tbWVudFNsaWNlJztcbmltcG9ydCBub3RpZmljYXRpb25SZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvbm90aWZpY2F0aW9uU2xpY2UnO1xuaW1wb3J0IHNlbGVjdGlvblJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvVGVzdENhc2VNYW5hZ2VtZW50L3N0b3JlL3NlbGVjdGlvblNsaWNlJztcbmltcG9ydCBkYXNoYm9hcmRMYXlvdXRSZWR1Y2VyIGZyb20gJy4vZGFzaGJvYXJkTGF5b3V0U2xpY2UnO1xuaW1wb3J0IHsgdW5kb1JlZG9NaWRkbGV3YXJlIH0gZnJvbSAnLi91bmRvUmVkb01pZGRsZXdhcmUnO1xuXG5leHBvcnQgdHlwZSBVc2VyUm9sZSA9ICdBRE1JTicgfCAnUUEnIHwgJ0RFVicgfCAnUE0nO1xuZXhwb3J0IGludGVyZmFjZSBVc2VyU3RhdGUge1xuICBtZTogbnVsbCB8IHsgaWQ6IG51bWJlcjsgdXNlcm5hbWU6IHN0cmluZzsgcm9sZTogVXNlclJvbGUgfTtcbn1cblxuY29uc3QgdXNlclNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiAndXNlcnMnLFxuICBpbml0aWFsU3RhdGU6IHsgbWU6IG51bGwgfSBhcyBVc2VyU3RhdGUsXG4gIHJlZHVjZXJzOiB7XG4gICAgc2V0TWU6IChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHsgaWQ6IG51bWJlcjsgdXNlcm5hbWU6IHN0cmluZzsgcm9sZTogVXNlclJvbGUgfT4pID0+IHtcbiAgICAgIHN0YXRlLm1lID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBsb2dvdXQ6IChzdGF0ZSkgPT4ge1xuICAgICAgc3RhdGUubWUgPSBudWxsO1xuICAgIH1cbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCB7IHNldE1lLCBsb2dvdXQgfSA9IHVzZXJTbGljZS5hY3Rpb25zO1xuXG5leHBvcnQgY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG4gIHJlZHVjZXI6IHtcbiAgICB0ZXN0Y2FzZXM6IHRlc3RDYXNlUmVkdWNlcixcbiAgICByZWxlYXNlczogcmVsZWFzZVJlZHVjZXIsXG4gICAgZGFzaGJvYXJkOiBkYXNoYm9hcmRSZWR1Y2VyLFxuICAgIGV4ZWN1dGlvbnM6IGV4ZWN1dGlvblJlZHVjZXIsXG4gICAgY29tbWVudHM6IGNvbW1lbnRSZWR1Y2VyLFxuICAgIG5vdGlmaWNhdGlvbnM6IG5vdGlmaWNhdGlvblJlZHVjZXIsXG4gICAgc2VsZWN0aW9uOiBzZWxlY3Rpb25SZWR1Y2VyLFxuICAgIGRhc2hib2FyZExheW91dDogZGFzaGJvYXJkTGF5b3V0UmVkdWNlcixcbiAgICB1c2VyczogdXNlclNsaWNlLnJlZHVjZXJcbiAgfSxcbiAgbWlkZGxld2FyZTogKGdldERlZmF1bHRNaWRkbGV3YXJlKSA9PlxuICAgIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcbiAgICAgIHNlcmlhbGl6YWJsZUNoZWNrOiB7XG4gICAgICAgIGlnbm9yZWRBY3Rpb25zOiBbJ3BlcnNpc3QvUEVSU0lTVCddXG4gICAgICB9XG4gICAgfSkuY29uY2F0KHVuZG9SZWRvTWlkZGxld2FyZSlcbn0pO1xuXG5leHBvcnQgdHlwZSBSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XG5leHBvcnQgdHlwZSBBcHBEaXNwYXRjaCA9IHR5cGVvZiBzdG9yZS5kaXNwYXRjaDsgIl0sInZlcnNpb24iOjN9