{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/index.ts","mappings":";;;;;;;AAAA,8CAA8E;AAC9E,uGAAiF;AACjF,kGAA4E;AAC5E,gGAA0E;AAC1E,0GAAoF;AACpF,sGAAgF;AAChF,gHAA0F;AAC1F,yGAAmF;AACnF,kFAA4D;AAC5D,6DAA0D;AAO1D,MAAM,SAAS,GAAG,IAAA,qBAAW,EAAC;IAC5B,IAAI,EAAE,OAAO;IACb,YAAY,EAAE,EAAE,EAAE,EAAE,IAAI,EAAe;IACvC,QAAQ,EAAE;QACR,KAAK,EAAE,CAAC,KAAK,EAAE,MAAuE,EAAE,EAAE;YACxF,KAAK,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC;QAC5B,CAAC;QACD,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;YAChB,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC;QAClB,CAAC;KACF;CACF,CAAC,CAAC;AAEU,KAAoB,SAAS,CAAC,OAAO,EAAnC,aAAK,aAAE,cAAM,aAAuB;AAEtC,QAAA,KAAK,GAAG,IAAA,wBAAc,EAAC;IAClC,OAAO,EAAE;QACP,SAAS,EAAE,uBAAe;QAC1B,QAAQ,EAAE,sBAAc;QACxB,SAAS,EAAE,wBAAgB;QAC3B,UAAU,EAAE,wBAAgB;QAC5B,QAAQ,EAAE,sBAAc;QACxB,aAAa,EAAE,2BAAmB;QAClC,SAAS,EAAE,wBAAgB;QAC3B,eAAe,EAAE,8BAAsB;QACvC,KAAK,EAAE,SAAS,CAAC,OAAO;KACzB;IACD,UAAU,EAAE,CAAC,oBAAoB,EAAE,EAAE,CACnC,oBAAoB,CAAC;QACnB,iBAAiB,EAAE;YACjB,cAAc,EAAE,CAAC,iBAAiB,CAAC;SACpC;KACF,CAAC,CAAC,MAAM,CAAC,uCAAkB,CAAC;CAChC,CAAC,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/store/index.ts"],"sourcesContent":["import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport testCaseReducer from '../features/TestCaseManagement/store/testCaseSlice';\nimport releaseReducer from '../features/ReleasePlanning/store/releaseSlice';\nimport dashboardReducer from '../features/Dashboard/store/dashboardSlice';\nimport executionReducer from '../features/ExecutionManagement/store/executionSlice';\nimport commentReducer from '../features/ExecutionManagement/store/commentSlice';\nimport notificationReducer from '../features/ExecutionManagement/store/notificationSlice';\nimport selectionReducer from '../features/TestCaseManagement/store/selectionSlice';\nimport dashboardLayoutReducer from './dashboardLayoutSlice';\nimport { undoRedoMiddleware } from './undoRedoMiddleware';\n\nexport type UserRole = 'ADMIN' | 'QA' | 'DEV' | 'PM';\nexport interface UserState {\n  me: null | { id: number; username: string; role: UserRole };\n}\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: { me: null } as UserState,\n  reducers: {\n    setMe: (state, action: PayloadAction<{ id: number; username: string; role: UserRole }>) => {\n      state.me = action.payload;\n    },\n    logout: (state) => {\n      state.me = null;\n    }\n  }\n});\n\nexport const { setMe, logout } = userSlice.actions;\n\nexport const store = configureStore({\n  reducer: {\n    testcases: testCaseReducer,\n    releases: releaseReducer,\n    dashboard: dashboardReducer,\n    executions: executionReducer,\n    comments: commentReducer,\n    notifications: notificationReducer,\n    selection: selectionReducer,\n    dashboardLayout: dashboardLayoutReducer,\n    users: userSlice.reducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST']\n      }\n    }).concat(undoRedoMiddleware)\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; "],"version":3}