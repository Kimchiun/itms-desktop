a1cc46929ad99fdf19e0e73ccaaaea0a
// Jest setup file for global polyfills
const {
  TextEncoder,
  TextDecoder
} = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

// Mock fetch for Node.js environment
global.fetch = jest.fn();

// Mock clearImmediate for Node.js environment
if (typeof global.clearImmediate === 'undefined') {
  global.clearImmediate = jest.fn();
}

// Mock setImmediate for Node.js environment
if (typeof global.setImmediate === 'undefined') {
  global.setImmediate = jest.fn((fn, ...args) => setTimeout(fn, 0, ...args));
}

// Mock ReadableStream and related APIs
global.ReadableStream = class ReadableStream {
  constructor() {
    this.reader = {
      read: jest.fn().mockResolvedValue({
        done: true,
        value: undefined
      }),
      cancel: jest.fn(),
      releaseLock: jest.fn()
    };
  }
};
global.WritableStream = class WritableStream {
  constructor() {
    this.writer = {
      write: jest.fn().mockResolvedValue(undefined),
      close: jest.fn().mockResolvedValue(undefined),
      abort: jest.fn().mockResolvedValue(undefined),
      releaseLock: jest.fn()
    };
  }
};
global.TransformStream = class TransformStream {
  constructor() {
    this.readable = new ReadableStream();
    this.writable = new WritableStream();
  }
};

// Mock Response and Request
global.Response = class Response {
  constructor(body, init = {}) {
    this.body = body;
    this.status = init.status || 200;
    this.statusText = init.statusText || 'OK';
    this.headers = new Map(Object.entries(init.headers || {}));
  }
  json() {
    return Promise.resolve(this.body);
  }
  text() {
    return Promise.resolve(JSON.stringify(this.body));
  }
};
global.Request = class Request {
  constructor(url, init = {}) {
    this.url = url;
    this.method = init.method || 'GET';
    this.headers = new Map(Object.entries(init.headers || {}));
  }
};

// Mock canvas for chart.js
global.HTMLCanvasElement.prototype.getContext = () => ({
  fillRect: jest.fn(),
  clearRect: jest.fn(),
  getImageData: jest.fn(() => ({
    data: new Array(4)
  })),
  putImageData: jest.fn(),
  createImageData: jest.fn(() => []),
  setTransform: jest.fn(),
  drawImage: jest.fn(),
  save: jest.fn(),
  fillText: jest.fn(),
  restore: jest.fn(),
  beginPath: jest.fn(),
  moveTo: jest.fn(),
  lineTo: jest.fn(),
  closePath: jest.fn(),
  stroke: jest.fn(),
  translate: jest.fn(),
  scale: jest.fn(),
  rotate: jest.fn(),
  arc: jest.fn(),
  fill: jest.fn(),
  measureText: jest.fn(() => ({
    width: 0
  })),
  transform: jest.fn(),
  rect: jest.fn(),
  clip: jest.fn()
});

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor(callback) {
    this.callback = callback;
  }
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor(callback) {
    this.callback = callback;
  }
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock matchMedia
global.matchMedia = jest.fn().mockImplementation(query => ({
  matches: false,
  media: query,
  onchange: null,
  addListener: jest.fn(),
  removeListener: jest.fn(),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn()
}));

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = localStorageMock;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;

// Mock console methods to reduce noise in tests
global.console = {
  ...console,
  log: jest.fn(),
  debug: jest.fn(),
  info: jest.fn(),
  warn: jest.fn(),
  error: jest.fn()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,