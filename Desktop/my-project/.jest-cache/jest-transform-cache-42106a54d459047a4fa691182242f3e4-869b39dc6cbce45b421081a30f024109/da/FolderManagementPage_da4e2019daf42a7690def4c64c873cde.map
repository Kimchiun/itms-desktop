{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/FolderManagement/components/FolderManagementPage.tsx","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/FolderManagement/components/FolderManagementPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport FolderTreeComponent from './FolderTree';\nimport { TestCase } from '@/main/app/domains/testcases/models/TestCase';\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  gap: 24px;\n  padding: 24px;\n`;\n\nconst Sidebar = styled.div`\n  width: 300px;\n  background: #fff;\n  border-radius: 12px;\n  box-shadow: 0 2px 16px rgba(0,0,0,0.06);\n  padding: 20px;\n`;\n\nconst MainContent = styled.div`\n  flex: 1;\n  background: #fff;\n  border-radius: 12px;\n  box-shadow: 0 2px 16px rgba(0,0,0,0.06);\n  padding: 20px;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid #e1e5e9;\n`;\n\nconst Title = styled.h2`\n  margin: 0;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n`;\n\nconst FolderInfo = styled.div`\n  margin-bottom: 20px;\n  padding: 16px;\n  background: #f8f9fa;\n  border-radius: 8px;\n  border-left: 4px solid #1976d2;\n`;\n\nconst FolderName = styled.h3`\n  margin: 0 0 8px 0;\n  color: #1976d2;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst FolderDescription = styled.p`\n  margin: 0;\n  color: #666;\n  font-size: 14px;\n`;\n\nconst FolderManagementPage: React.FC = () => {\n  const [selectedFolderId, setSelectedFolderId] = useState<number | undefined>();\n  const [selectedFolder, setSelectedFolder] = useState<any>(null);\n  const [testCases, setTestCases] = useState<TestCase[]>([]);\n\n  useEffect(() => {\n    if (selectedFolderId) {\n      fetchFolderDetails(selectedFolderId);\n      fetchTestCasesInFolder(selectedFolderId);\n    }\n  }, [selectedFolderId]);\n\n  const fetchFolderDetails = async (folderId: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/folders/${folderId}`);\n      if (response.ok) {\n        const folder = await response.json();\n        setSelectedFolder(folder);\n      }\n    } catch (error) {\n      console.error('폴더 상세 정보 조회 실패:', error);\n    }\n  };\n\n  const fetchTestCasesInFolder = async (folderId: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/folders/${folderId}/testcases`);\n      if (response.ok) {\n        const testCaseIds = await response.json();\n        // 실제 테스트 케이스 데이터를 가져오는 로직\n        const testCasesData = await fetchTestCasesByIds(testCaseIds);\n        setTestCases(testCasesData);\n      }\n    } catch (error) {\n      console.error('폴더 내 테스트 케이스 조회 실패:', error);\n    }\n  };\n\n  const fetchTestCasesByIds = async (testCaseIds: number[]): Promise<TestCase[]> => {\n    if (testCaseIds.length === 0) return [];\n    \n    try {\n      const promises = testCaseIds.map(id => \n        fetch(`http://localhost:3000/api/testcases/${id}`).then(res => res.json())\n      );\n      const results = await Promise.all(promises);\n      return results.filter(Boolean);\n    } catch (error) {\n      console.error('테스트 케이스 상세 정보 조회 실패:', error);\n      return [];\n    }\n  };\n\n  const handleFolderSelect = (folderId: number) => {\n    setSelectedFolderId(folderId);\n  };\n\n  return (\n    <Container>\n      <Sidebar>\n        <Header>\n          <Title>폴더 구조</Title>\n        </Header>\n        <FolderTreeComponent\n          onFolderSelect={handleFolderSelect}\n          selectedFolderId={selectedFolderId}\n        />\n      </Sidebar>\n      \n      <MainContent>\n        <Header>\n          <Title>\n            {selectedFolder ? selectedFolder.name : '폴더를 선택하세요'}\n          </Title>\n        </Header>\n        \n        {selectedFolder && (\n          <FolderInfo>\n            <FolderName>{selectedFolder.name}</FolderName>\n            {selectedFolder.description && (\n              <FolderDescription>{selectedFolder.description}</FolderDescription>\n            )}\n          </FolderInfo>\n        )}\n        \n        {selectedFolderId && (\n          <div>\n            <h3>테스트 케이스 목록 ({testCases.length}개)</h3>\n            {testCases.length > 0 ? (\n              <div style={{ display: 'grid', gap: '12px' }}>\n                {testCases.map(testCase => (\n                  <div key={testCase.id} style={{ \n                    padding: '12px', \n                    border: '1px solid #e1e5e9', \n                    borderRadius: '8px',\n                    background: '#fff'\n                  }}>\n                    <div style={{ fontWeight: '600', marginBottom: '4px' }}>\n                      {testCase.title}\n                    </div>\n                    <div style={{ fontSize: '14px', color: '#666' }}>\n                      우선순위: {testCase.priority} | 상태: {testCase.status}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div style={{ textAlign: 'center', color: '#666', padding: '40px' }}>\n                이 폴더에 테스트 케이스가 없습니다.\n              </div>\n            )}\n          </div>\n        )}\n        \n        {!selectedFolderId && (\n          <div style={{ textAlign: 'center', color: '#666', marginTop: '100px' }}>\n            폴더를 선택하여 테스트 케이스를 확인하세요\n          </div>\n        )}\n      </MainContent>\n    </Container>\n  );\n};\n\nexport default FolderManagementPage; "],"version":3}