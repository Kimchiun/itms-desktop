70557358e2920b8e8b15f9af65e15abd
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const styled_components_1 = __importDefault(require("styled-components"));
const axios_1 = __importDefault(require("../../../utils/axios"));
const Container = styled_components_1.default.div `
  display: flex;
  flex-direction: column;
  gap: 16px;
`;
const Header = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
`;
const Title = styled_components_1.default.h3 `
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #1e293b;
`;
const ActionButton = styled_components_1.default.button `
  padding: 8px 16px;
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: background 0.2s;
  
  &:hover {
    background: #2563eb;
  }
`;
const SearchRow = styled_components_1.default.div `
  display: flex;
  gap: 12px;
  margin-bottom: 16px;
`;
const SearchInput = styled_components_1.default.input `
  flex: 1;
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
`;
const FilterSelect = styled_components_1.default.select `
  padding: 8px 12px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 14px;
  background: white;
`;
const Table = styled_components_1.default.table `
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
`;
const Th = styled_components_1.default.th `
  background: #f8fafc;
  padding: 12px;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 1px solid #e5e7eb;
`;
const Td = styled_components_1.default.td `
  padding: 12px;
  border-bottom: 1px solid #f3f4f6;
  vertical-align: middle;
`;
const SeverityBadge = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  color: ${({ severity }) => {
    switch (severity) {
        case 'Critical': return '#ffffff';
        case 'High': return '#ffffff';
        case 'Medium': return '#ffffff';
        case 'Low': return '#ffffff';
        default: return '#6b7280';
    }
}};
  background: ${({ severity }) => {
    switch (severity) {
        case 'Critical': return '#dc2626';
        case 'High': return '#ea580c';
        case 'Medium': return '#d97706';
        case 'Low': return '#059669';
        default: return '#f9fafb';
    }
}};
`;
const StatusBadge = styled_components_1.default.span `
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  color: ${({ status }) => {
    switch (status) {
        case 'Open': return '#dc2626';
        case 'In Progress': return '#d97706';
        case 'Resolved': return '#059669';
        case 'Closed': return '#6b7280';
        default: return '#6b7280';
    }
}};
  background: ${({ status }) => {
    switch (status) {
        case 'Open': return '#fef2f2';
        case 'In Progress': return '#fffbeb';
        case 'Resolved': return '#f0fdf4';
        case 'Closed': return '#f9fafb';
        default: return '#f9fafb';
    }
}};
`;
const EmptyState = styled_components_1.default.div `
  text-align: center;
  padding: 40px;
  color: #6b7280;
`;
const DefectList = ({ releaseId, defects, onDataChange }) => {
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [severityFilter, setSeverityFilter] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('');
    const filteredDefects = (0, react_1.useMemo)(() => {
        return defects.filter(defect => {
            const matchesSearch = defect.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (defect.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);
            const matchesSeverity = !severityFilter || defect.severity === severityFilter;
            const matchesStatus = !statusFilter || defect.status === statusFilter;
            return matchesSearch && matchesSeverity && matchesStatus;
        });
    }, [defects, searchTerm, severityFilter, statusFilter]);
    const handleCreateDefect = async () => {
        try {
            await axios_1.default.post('/api/defects', {
                title: '새 결함',
                severity: 'Medium',
                status: 'Open',
                createdBy: 'current-user',
                description: '결함 설명',
                releaseId: releaseId
            });
            onDataChange();
        }
        catch (error) {
            console.error('결함 생성 실패:', error);
        }
    };
    const handleUpdateDefectStatus = async (id, newStatus) => {
        try {
            await axios_1.default.patch(`/api/defects/${id}`, { status: newStatus });
            onDataChange();
        }
        catch (error) {
            console.error('결함 상태 업데이트 실패:', error);
        }
    };
    const handleDeleteDefect = async (id) => {
        try {
            await axios_1.default.delete(`/api/defects/${id}`);
            onDataChange();
        }
        catch (error) {
            console.error('결함 삭제 실패:', error);
        }
    };
    const getSeverityLabel = (severity) => {
        switch (severity) {
            case 'Critical': return '치명적';
            case 'High': return '높음';
            case 'Medium': return '보통';
            case 'Low': return '낮음';
            default: return severity;
        }
    };
    const getStatusLabel = (status) => {
        switch (status) {
            case 'Open': return '열림';
            case 'In Progress': return '진행 중';
            case 'Resolved': return '해결됨';
            case 'Closed': return '닫힘';
            default: return status;
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Container, { children: [(0, jsx_runtime_1.jsxs)(Header, { children: [(0, jsx_runtime_1.jsx)(Title, { children: "\uACB0\uD568 \uBAA9\uB85D" }), (0, jsx_runtime_1.jsx)(ActionButton, { onClick: handleCreateDefect, "data-testid": "create-defect-btn", children: "+ \uC0C8 \uACB0\uD568" })] }), (0, jsx_runtime_1.jsxs)(SearchRow, { children: [(0, jsx_runtime_1.jsx)(SearchInput, { placeholder: "\uACB0\uD568 \uAC80\uC0C9...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), "data-testid": "defect-search-input" }), (0, jsx_runtime_1.jsxs)(FilterSelect, { value: severityFilter, onChange: (e) => setSeverityFilter(e.target.value), "data-testid": "severity-filter", children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "\uBAA8\uB4E0 \uC2EC\uAC01\uB3C4" }), (0, jsx_runtime_1.jsx)("option", { value: "Critical", children: "\uCE58\uBA85\uC801" }), (0, jsx_runtime_1.jsx)("option", { value: "High", children: "\uB192\uC74C" }), (0, jsx_runtime_1.jsx)("option", { value: "Medium", children: "\uBCF4\uD1B5" }), (0, jsx_runtime_1.jsx)("option", { value: "Low", children: "\uB0AE\uC74C" })] }), (0, jsx_runtime_1.jsxs)(FilterSelect, { value: statusFilter, onChange: (e) => setStatusFilter(e.target.value), "data-testid": "status-filter", children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "\uBAA8\uB4E0 \uC0C1\uD0DC" }), (0, jsx_runtime_1.jsx)("option", { value: "Open", children: "\uC5F4\uB9BC" }), (0, jsx_runtime_1.jsx)("option", { value: "In Progress", children: "\uC9C4\uD589 \uC911" }), (0, jsx_runtime_1.jsx)("option", { value: "Resolved", children: "\uD574\uACB0\uB428" }), (0, jsx_runtime_1.jsx)("option", { value: "Closed", children: "\uB2EB\uD798" })] })] }), filteredDefects.length === 0 ? ((0, jsx_runtime_1.jsx)(EmptyState, { children: defects.length === 0 ? '결함이 없습니다.' : '검색 결과가 없습니다.' })) : ((0, jsx_runtime_1.jsxs)(Table, { children: [(0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsxs)("tr", { children: [(0, jsx_runtime_1.jsx)(Th, { children: "\uC81C\uBAA9" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC2EC\uAC01\uB3C4" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0C1\uD0DC" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uB2F4\uB2F9\uC790" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0DD\uC131\uC790" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC0DD\uC131\uC77C" }), (0, jsx_runtime_1.jsx)(Th, { children: "\uC791\uC5C5" })] }) }), (0, jsx_runtime_1.jsx)("tbody", { children: filteredDefects.map((defect) => ((0, jsx_runtime_1.jsxs)("tr", { "data-testid": `defect-row-${defect.id}`, children: [(0, jsx_runtime_1.jsx)(Td, { children: defect.title }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(SeverityBadge, { severity: defect.severity, children: getSeverityLabel(defect.severity) }) }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsx)(StatusBadge, { status: defect.status, children: getStatusLabel(defect.status) }) }), (0, jsx_runtime_1.jsx)(Td, { children: defect.assignedTo || '-' }), (0, jsx_runtime_1.jsx)(Td, { children: defect.createdBy }), (0, jsx_runtime_1.jsx)(Td, { children: new Date(defect.createdAt).toLocaleDateString() }), (0, jsx_runtime_1.jsx)(Td, { children: (0, jsx_runtime_1.jsxs)("div", { style: { display: 'flex', gap: '4px' }, children: [(0, jsx_runtime_1.jsxs)("select", { value: defect.status, onChange: (e) => handleUpdateDefectStatus(defect.id, e.target.value), style: {
                                                    padding: '2px 4px',
                                                    fontSize: '12px',
                                                    border: '1px solid #d1d5db',
                                                    borderRadius: '4px'
                                                }, "data-testid": `status-select-${defect.id}`, children: [(0, jsx_runtime_1.jsx)("option", { value: "Open", children: "\uC5F4\uB9BC" }), (0, jsx_runtime_1.jsx)("option", { value: "In Progress", children: "\uC9C4\uD589 \uC911" }), (0, jsx_runtime_1.jsx)("option", { value: "Resolved", children: "\uD574\uACB0\uB428" }), (0, jsx_runtime_1.jsx)("option", { value: "Closed", children: "\uB2EB\uD798" })] }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleDeleteDefect(defect.id), style: {
                                                    padding: '2px 6px',
                                                    background: '#ef4444',
                                                    color: 'white',
                                                    border: 'none',
                                                    borderRadius: '4px',
                                                    fontSize: '12px',
                                                    cursor: 'pointer'
                                                }, "data-testid": `delete-defect-${defect.id}`, children: "\uC0AD\uC81C" })] }) })] }, defect.id))) })] }))] }));
};
exports.default = DefectList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,