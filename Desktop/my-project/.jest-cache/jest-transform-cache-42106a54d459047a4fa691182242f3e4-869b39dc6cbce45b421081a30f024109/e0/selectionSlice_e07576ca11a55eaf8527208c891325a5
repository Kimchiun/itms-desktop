f5e91599450fac16ce326aaa2dfe6e22
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAllSelections = exports.setSelecting = exports.deselectAllTestCases = exports.selectAllTestCases = exports.clearTestCaseSelection = exports.selectTestCases = exports.deselectTestCase = exports.selectTestCase = exports.clearFolderSelection = exports.selectFolders = exports.deselectFolder = exports.selectFolder = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const initialState = {
    selectedFolders: [],
    selectedTestCases: [],
    lastSelectedIndex: null,
    isSelecting: false,
};
const selectionSlice = (0, toolkit_1.createSlice)({
    name: 'selection',
    initialState,
    reducers: {
        // 폴더 선택 관련
        selectFolder: (state, action) => {
            const folderId = action.payload;
            if (!state.selectedFolders.includes(folderId)) {
                state.selectedFolders.push(folderId);
            }
        },
        deselectFolder: (state, action) => {
            state.selectedFolders = state.selectedFolders.filter(id => id !== action.payload);
        },
        selectFolders: (state, action) => {
            state.selectedFolders = action.payload;
        },
        clearFolderSelection: (state) => {
            state.selectedFolders = [];
        },
        // 테스트 케이스 선택 관련
        selectTestCase: (state, action) => {
            const { id, index, isShiftKey } = action.payload;
            if (isShiftKey && state.lastSelectedIndex !== null) {
                // Shift+클릭 범위 선택
                const start = Math.min(state.lastSelectedIndex, index);
                const end = Math.max(state.lastSelectedIndex, index);
                // 범위 내 모든 테스트 케이스 ID를 가져와야 함 (실제 구현에서는 API 호출 필요)
                // 임시로 현재 선택된 항목들만 처리
                if (!state.selectedTestCases.includes(id)) {
                    state.selectedTestCases.push(id);
                }
            }
            else {
                // 단일 선택
                if (!state.selectedTestCases.includes(id)) {
                    state.selectedTestCases.push(id);
                }
            }
            state.lastSelectedIndex = index;
        },
        deselectTestCase: (state, action) => {
            state.selectedTestCases = state.selectedTestCases.filter(id => id !== action.payload);
        },
        selectTestCases: (state, action) => {
            state.selectedTestCases = action.payload;
        },
        clearTestCaseSelection: (state) => {
            state.selectedTestCases = [];
            state.lastSelectedIndex = null;
        },
        // 전체 선택/해제
        selectAllTestCases: (state, action) => {
            state.selectedTestCases = action.payload;
        },
        deselectAllTestCases: (state) => {
            state.selectedTestCases = [];
            state.lastSelectedIndex = null;
        },
        // 선택 상태 관리
        setSelecting: (state, action) => {
            state.isSelecting = action.payload;
        },
        // 전체 선택 해제
        clearAllSelections: (state) => {
            state.selectedFolders = [];
            state.selectedTestCases = [];
            state.lastSelectedIndex = null;
            state.isSelecting = false;
        },
    },
});
_a = selectionSlice.actions, exports.selectFolder = _a.selectFolder, exports.deselectFolder = _a.deselectFolder, exports.selectFolders = _a.selectFolders, exports.clearFolderSelection = _a.clearFolderSelection, exports.selectTestCase = _a.selectTestCase, exports.deselectTestCase = _a.deselectTestCase, exports.selectTestCases = _a.selectTestCases, exports.clearTestCaseSelection = _a.clearTestCaseSelection, exports.selectAllTestCases = _a.selectAllTestCases, exports.deselectAllTestCases = _a.deselectAllTestCases, exports.setSelecting = _a.setSelecting, exports.clearAllSelections = _a.clearAllSelections;
exports.default = selectionSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,