c177f229c6830ee90072bcc7d887ec6e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrAdd = arrAdd;
exports.arrDel = arrDel;
exports.calcDropPosition = calcDropPosition;
exports.calcSelectedKeys = calcSelectedKeys;
exports.conductExpandParent = conductExpandParent;
exports.convertDataToTree = convertDataToTree;
exports.getDragChildrenKeys = getDragChildrenKeys;
Object.defineProperty(exports, "getPosition", {
  enumerable: true,
  get: function get() {
    return _treeUtil.getPosition;
  }
});
exports.isFirstChild = isFirstChild;
exports.isLastChild = isLastChild;
Object.defineProperty(exports, "isTreeNode", {
  enumerable: true,
  get: function get() {
    return _treeUtil.isTreeNode;
  }
});
exports.parseCheckedKeys = parseCheckedKeys;
exports.posToArr = posToArr;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _warning = _interopRequireDefault(require("rc-util/lib/warning"));
var _react = _interopRequireDefault(require("react"));
var _TreeNode = _interopRequireDefault(require("./TreeNode"));
var _keyUtil = _interopRequireDefault(require("./utils/keyUtil"));
var _treeUtil = require("./utils/treeUtil");
var _excluded = ["children"];
/* eslint-disable no-lonely-if */
/**
 * Legacy code. Should avoid to use if you are new to import these code.
 */
function arrDel(list, value) {
  if (!list) return [];
  var clone = list.slice();
  var index = clone.indexOf(value);
  if (index >= 0) {
    clone.splice(index, 1);
  }
  return clone;
}
function arrAdd(list, value) {
  var clone = (list || []).slice();
  if (clone.indexOf(value) === -1) {
    clone.push(value);
  }
  return clone;
}
function posToArr(pos) {
  return pos.split('-');
}
function getDragChildrenKeys(dragNodeKey, keyEntities) {
  // not contains self
  // self for left or right drag
  var dragChildrenKeys = [];
  var entity = (0, _keyUtil.default)(keyEntities, dragNodeKey);
  function dig() {
    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    list.forEach(function (_ref) {
      var key = _ref.key,
        children = _ref.children;
      dragChildrenKeys.push(key);
      dig(children);
    });
  }
  dig(entity.children);
  return dragChildrenKeys;
}
function isLastChild(treeNodeEntity) {
  if (treeNodeEntity.parent) {
    var posArr = posToArr(treeNodeEntity.pos);
    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;
  }
  return false;
}
function isFirstChild(treeNodeEntity) {
  var posArr = posToArr(treeNodeEntity.pos);
  return Number(posArr[posArr.length - 1]) === 0;
}

// Only used when drag, not affect SSR.
function calcDropPosition(event, dragNodeProps, targetNodeProps, indent, startMousePosition, allowDrop, flattenedNodes, keyEntities, expandKeys, direction) {
  var _abstractDropNodeEnti;
  var clientX = event.clientX,
    clientY = event.clientY;
  var _getBoundingClientRec = event.target.getBoundingClientRect(),
    top = _getBoundingClientRec.top,
    height = _getBoundingClientRec.height;
  // optional chain for testing
  var horizontalMouseOffset = (direction === 'rtl' ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);
  var rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;

  // Filter the expanded keys to exclude the node that not has children currently (like async nodes).
  var filteredExpandKeys = expandKeys.filter(function (key) {
    var _keyEntities$key;
    return (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.children) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key.length;
  });

  // find abstract drop node by horizontal offset
  var abstractDropNodeEntity = (0, _keyUtil.default)(keyEntities, targetNodeProps.eventKey);
  if (clientY < top + height / 2) {
    // first half, set abstract drop node to previous node
    var nodeIndex = flattenedNodes.findIndex(function (flattenedNode) {
      return flattenedNode.key === abstractDropNodeEntity.key;
    });
    var prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;
    var prevNodeKey = flattenedNodes[prevNodeIndex].key;
    abstractDropNodeEntity = (0, _keyUtil.default)(keyEntities, prevNodeKey);
  }
  var initialAbstractDropNodeKey = abstractDropNodeEntity.key;
  var abstractDragOverEntity = abstractDropNodeEntity;
  var dragOverNodeKey = abstractDropNodeEntity.key;
  var dropPosition = 0;
  var dropLevelOffset = 0;

  // Only allow cross level drop when dragging on a non-expanded node
  if (!filteredExpandKeys.includes(initialAbstractDropNodeKey)) {
    for (var i = 0; i < rawDropLevelOffset; i += 1) {
      if (isLastChild(abstractDropNodeEntity)) {
        abstractDropNodeEntity = abstractDropNodeEntity.parent;
        dropLevelOffset += 1;
      } else {
        break;
      }
    }
  }
  var abstractDragDataNode = dragNodeProps.data;
  var abstractDropDataNode = abstractDropNodeEntity.node;
  var dropAllowed = true;
  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop({
    dragNode: abstractDragDataNode,
    dropNode: abstractDropDataNode,
    dropPosition: -1
  }) && abstractDropNodeEntity.key === targetNodeProps.eventKey) {
    // first half of first node in first level
    dropPosition = -1;
  } else if ((abstractDragOverEntity.children || []).length && filteredExpandKeys.includes(dragOverNodeKey)) {
    // drop on expanded node
    // only allow drop inside
    if (allowDrop({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: 0
    })) {
      dropPosition = 0;
    } else {
      dropAllowed = false;
    }
  } else if (dropLevelOffset === 0) {
    if (rawDropLevelOffset > -1.5) {
      // | Node     | <- abstractDropNode
      // | -^-===== | <- mousePosition
      // 1. try drop after
      // 2. do not allow drop
      if (allowDrop({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    } else {
      // | Node     | <- abstractDropNode
      // | ---==^== | <- mousePosition
      // whether it has children or doesn't has children
      // always
      // 1. try drop inside
      // 2. try drop after
      // 3. do not allow drop
      if (allowDrop({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 0
      })) {
        dropPosition = 0;
      } else if (allowDrop({
        dragNode: abstractDragDataNode,
        dropNode: abstractDropDataNode,
        dropPosition: 1
      })) {
        dropPosition = 1;
      } else {
        dropAllowed = false;
      }
    }
  } else {
    // | Node1 | <- abstractDropNode
    //      |  Node2  |
    // --^--|----=====| <- mousePosition
    // 1. try insert after Node1
    // 2. do not allow drop
    if (allowDrop({
      dragNode: abstractDragDataNode,
      dropNode: abstractDropDataNode,
      dropPosition: 1
    })) {
      dropPosition = 1;
    } else {
      dropAllowed = false;
    }
  }
  return {
    dropPosition: dropPosition,
    dropLevelOffset: dropLevelOffset,
    dropTargetKey: abstractDropNodeEntity.key,
    dropTargetPos: abstractDropNodeEntity.pos,
    dragOverNodeKey: dragOverNodeKey,
    dropContainerKey: dropPosition === 0 ? null : ((_abstractDropNodeEnti = abstractDropNodeEntity.parent) === null || _abstractDropNodeEnti === void 0 ? void 0 : _abstractDropNodeEnti.key) || null,
    dropAllowed: dropAllowed
  };
}

/**
 * Return selectedKeys according with multiple prop
 * @param selectedKeys
 * @param props
 * @returns [string]
 */
function calcSelectedKeys(selectedKeys, props) {
  if (!selectedKeys) return undefined;
  var multiple = props.multiple;
  if (multiple) {
    return selectedKeys.slice();
  }
  if (selectedKeys.length) {
    return [selectedKeys[0]];
  }
  return selectedKeys;
}
var internalProcessProps = function internalProcessProps(props) {
  return props;
};
function convertDataToTree(treeData, processor) {
  if (!treeData) return [];
  var _ref2 = processor || {},
    _ref2$processProps = _ref2.processProps,
    processProps = _ref2$processProps === void 0 ? internalProcessProps : _ref2$processProps;
  var list = Array.isArray(treeData) ? treeData : [treeData];
  return list.map(function (_ref3) {
    var children = _ref3.children,
      props = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
    var childrenNodes = convertDataToTree(children, processor);
    return /*#__PURE__*/_react.default.createElement(_TreeNode.default, (0, _extends2.default)({
      key: props.key
    }, processProps(props)), childrenNodes);
  });
}

/**
 * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style
 */
function parseCheckedKeys(keys) {
  if (!keys) {
    return null;
  }

  // Convert keys to object format
  var keyProps;
  if (Array.isArray(keys)) {
    // [Legacy] Follow the api doc
    keyProps = {
      checkedKeys: keys,
      halfCheckedKeys: undefined
    };
  } else if ((0, _typeof2.default)(keys) === 'object') {
    keyProps = {
      checkedKeys: keys.checked || undefined,
      halfCheckedKeys: keys.halfChecked || undefined
    };
  } else {
    (0, _warning.default)(false, '`checkedKeys` is not an array or an object');
    return null;
  }
  return keyProps;
}

/**
 * If user use `autoExpandParent` we should get the list of parent node
 * @param keyList
 * @param keyEntities
 */
function conductExpandParent(keyList, keyEntities) {
  var expandedKeys = new Set();
  function conductUp(key) {
    if (expandedKeys.has(key)) return;
    var entity = (0, _keyUtil.default)(keyEntities, key);
    if (!entity) return;
    expandedKeys.add(key);
    var parent = entity.parent,
      node = entity.node;
    if (node.disabled) return;
    if (parent) {
      conductUp(parent.key);
    }
  }
  (keyList || []).forEach(function (key) {
    conductUp(key);
  });
  return (0, _toConsumableArray2.default)(expandedKeys);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXJyQWRkIiwiYXJyRGVsIiwiY2FsY0Ryb3BQb3NpdGlvbiIsImNhbGNTZWxlY3RlZEtleXMiLCJjb25kdWN0RXhwYW5kUGFyZW50IiwiY29udmVydERhdGFUb1RyZWUiLCJnZXREcmFnQ2hpbGRyZW5LZXlzIiwiZW51bWVyYWJsZSIsImdldCIsIl90cmVlVXRpbCIsImdldFBvc2l0aW9uIiwiaXNGaXJzdENoaWxkIiwiaXNMYXN0Q2hpbGQiLCJpc1RyZWVOb2RlIiwicGFyc2VDaGVja2VkS2V5cyIsInBvc1RvQXJyIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIl90eXBlb2YyIiwiX2V4dGVuZHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl93YXJuaW5nIiwiX3JlYWN0IiwiX1RyZWVOb2RlIiwiX2tleVV0aWwiLCJfZXhjbHVkZWQiLCJsaXN0IiwiY2xvbmUiLCJzbGljZSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInB1c2giLCJwb3MiLCJzcGxpdCIsImRyYWdOb2RlS2V5Iiwia2V5RW50aXRpZXMiLCJkcmFnQ2hpbGRyZW5LZXlzIiwiZW50aXR5IiwiZGVmYXVsdCIsImRpZyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImZvckVhY2giLCJfcmVmIiwia2V5IiwiY2hpbGRyZW4iLCJ0cmVlTm9kZUVudGl0eSIsInBhcmVudCIsInBvc0FyciIsIk51bWJlciIsImV2ZW50IiwiZHJhZ05vZGVQcm9wcyIsInRhcmdldE5vZGVQcm9wcyIsImluZGVudCIsInN0YXJ0TW91c2VQb3NpdGlvbiIsImFsbG93RHJvcCIsImZsYXR0ZW5lZE5vZGVzIiwiZXhwYW5kS2V5cyIsImRpcmVjdGlvbiIsIl9hYnN0cmFjdERyb3BOb2RlRW50aSIsImNsaWVudFgiLCJjbGllbnRZIiwiX2dldEJvdW5kaW5nQ2xpZW50UmVjIiwidGFyZ2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiaGVpZ2h0IiwiaG9yaXpvbnRhbE1vdXNlT2Zmc2V0IiwieCIsInJhd0Ryb3BMZXZlbE9mZnNldCIsImZpbHRlcmVkRXhwYW5kS2V5cyIsImZpbHRlciIsIl9rZXlFbnRpdGllcyRrZXkiLCJhYnN0cmFjdERyb3BOb2RlRW50aXR5IiwiZXZlbnRLZXkiLCJub2RlSW5kZXgiLCJmaW5kSW5kZXgiLCJmbGF0dGVuZWROb2RlIiwicHJldk5vZGVJbmRleCIsInByZXZOb2RlS2V5IiwiaW5pdGlhbEFic3RyYWN0RHJvcE5vZGVLZXkiLCJhYnN0cmFjdERyYWdPdmVyRW50aXR5IiwiZHJhZ092ZXJOb2RlS2V5IiwiZHJvcFBvc2l0aW9uIiwiZHJvcExldmVsT2Zmc2V0IiwiaW5jbHVkZXMiLCJpIiwiYWJzdHJhY3REcmFnRGF0YU5vZGUiLCJkYXRhIiwiYWJzdHJhY3REcm9wRGF0YU5vZGUiLCJub2RlIiwiZHJvcEFsbG93ZWQiLCJsZXZlbCIsImRyYWdOb2RlIiwiZHJvcE5vZGUiLCJkcm9wVGFyZ2V0S2V5IiwiZHJvcFRhcmdldFBvcyIsImRyb3BDb250YWluZXJLZXkiLCJzZWxlY3RlZEtleXMiLCJwcm9wcyIsIm11bHRpcGxlIiwiaW50ZXJuYWxQcm9jZXNzUHJvcHMiLCJ0cmVlRGF0YSIsInByb2Nlc3NvciIsIl9yZWYyIiwiX3JlZjIkcHJvY2Vzc1Byb3BzIiwicHJvY2Vzc1Byb3BzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiX3JlZjMiLCJjaGlsZHJlbk5vZGVzIiwiY3JlYXRlRWxlbWVudCIsImtleXMiLCJrZXlQcm9wcyIsImNoZWNrZWRLZXlzIiwiaGFsZkNoZWNrZWRLZXlzIiwiY2hlY2tlZCIsImhhbGZDaGVja2VkIiwia2V5TGlzdCIsImV4cGFuZGVkS2V5cyIsIlNldCIsImNvbmR1Y3RVcCIsImhhcyIsImFkZCIsImRpc2FibGVkIl0sInNvdXJjZXMiOlsidXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcnJBZGQgPSBhcnJBZGQ7XG5leHBvcnRzLmFyckRlbCA9IGFyckRlbDtcbmV4cG9ydHMuY2FsY0Ryb3BQb3NpdGlvbiA9IGNhbGNEcm9wUG9zaXRpb247XG5leHBvcnRzLmNhbGNTZWxlY3RlZEtleXMgPSBjYWxjU2VsZWN0ZWRLZXlzO1xuZXhwb3J0cy5jb25kdWN0RXhwYW5kUGFyZW50ID0gY29uZHVjdEV4cGFuZFBhcmVudDtcbmV4cG9ydHMuY29udmVydERhdGFUb1RyZWUgPSBjb252ZXJ0RGF0YVRvVHJlZTtcbmV4cG9ydHMuZ2V0RHJhZ0NoaWxkcmVuS2V5cyA9IGdldERyYWdDaGlsZHJlbktleXM7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRQb3NpdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdHJlZVV0aWwuZ2V0UG9zaXRpb247XG4gIH1cbn0pO1xuZXhwb3J0cy5pc0ZpcnN0Q2hpbGQgPSBpc0ZpcnN0Q2hpbGQ7XG5leHBvcnRzLmlzTGFzdENoaWxkID0gaXNMYXN0Q2hpbGQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1RyZWVOb2RlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90cmVlVXRpbC5pc1RyZWVOb2RlO1xuICB9XG59KTtcbmV4cG9ydHMucGFyc2VDaGVja2VkS2V5cyA9IHBhcnNlQ2hlY2tlZEtleXM7XG5leHBvcnRzLnBvc1RvQXJyID0gcG9zVG9BcnI7XG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvd2FybmluZ1wiKSk7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9UcmVlTm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHJlZU5vZGVcIikpO1xudmFyIF9rZXlVdGlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9rZXlVdGlsXCIpKTtcbnZhciBfdHJlZVV0aWwgPSByZXF1aXJlKFwiLi91dGlscy90cmVlVXRpbFwiKTtcbnZhciBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiXTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLWxvbmVseS1pZiAqL1xuLyoqXG4gKiBMZWdhY3kgY29kZS4gU2hvdWxkIGF2b2lkIHRvIHVzZSBpZiB5b3UgYXJlIG5ldyB0byBpbXBvcnQgdGhlc2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gYXJyRGVsKGxpc3QsIHZhbHVlKSB7XG4gIGlmICghbGlzdCkgcmV0dXJuIFtdO1xuICB2YXIgY2xvbmUgPSBsaXN0LnNsaWNlKCk7XG4gIHZhciBpbmRleCA9IGNsb25lLmluZGV4T2YodmFsdWUpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGNsb25lLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufVxuZnVuY3Rpb24gYXJyQWRkKGxpc3QsIHZhbHVlKSB7XG4gIHZhciBjbG9uZSA9IChsaXN0IHx8IFtdKS5zbGljZSgpO1xuICBpZiAoY2xvbmUuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgY2xvbmUucHVzaCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufVxuZnVuY3Rpb24gcG9zVG9BcnIocG9zKSB7XG4gIHJldHVybiBwb3Muc3BsaXQoJy0nKTtcbn1cbmZ1bmN0aW9uIGdldERyYWdDaGlsZHJlbktleXMoZHJhZ05vZGVLZXksIGtleUVudGl0aWVzKSB7XG4gIC8vIG5vdCBjb250YWlucyBzZWxmXG4gIC8vIHNlbGYgZm9yIGxlZnQgb3IgcmlnaHQgZHJhZ1xuICB2YXIgZHJhZ0NoaWxkcmVuS2V5cyA9IFtdO1xuICB2YXIgZW50aXR5ID0gKDAsIF9rZXlVdGlsLmRlZmF1bHQpKGtleUVudGl0aWVzLCBkcmFnTm9kZUtleSk7XG4gIGZ1bmN0aW9uIGRpZygpIHtcbiAgICB2YXIgbGlzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgICAgIGRyYWdDaGlsZHJlbktleXMucHVzaChrZXkpO1xuICAgICAgZGlnKGNoaWxkcmVuKTtcbiAgICB9KTtcbiAgfVxuICBkaWcoZW50aXR5LmNoaWxkcmVuKTtcbiAgcmV0dXJuIGRyYWdDaGlsZHJlbktleXM7XG59XG5mdW5jdGlvbiBpc0xhc3RDaGlsZCh0cmVlTm9kZUVudGl0eSkge1xuICBpZiAodHJlZU5vZGVFbnRpdHkucGFyZW50KSB7XG4gICAgdmFyIHBvc0FyciA9IHBvc1RvQXJyKHRyZWVOb2RlRW50aXR5LnBvcyk7XG4gICAgcmV0dXJuIE51bWJlcihwb3NBcnJbcG9zQXJyLmxlbmd0aCAtIDFdKSA9PT0gdHJlZU5vZGVFbnRpdHkucGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNGaXJzdENoaWxkKHRyZWVOb2RlRW50aXR5KSB7XG4gIHZhciBwb3NBcnIgPSBwb3NUb0Fycih0cmVlTm9kZUVudGl0eS5wb3MpO1xuICByZXR1cm4gTnVtYmVyKHBvc0Fycltwb3NBcnIubGVuZ3RoIC0gMV0pID09PSAwO1xufVxuXG4vLyBPbmx5IHVzZWQgd2hlbiBkcmFnLCBub3QgYWZmZWN0IFNTUi5cbmZ1bmN0aW9uIGNhbGNEcm9wUG9zaXRpb24oZXZlbnQsIGRyYWdOb2RlUHJvcHMsIHRhcmdldE5vZGVQcm9wcywgaW5kZW50LCBzdGFydE1vdXNlUG9zaXRpb24sIGFsbG93RHJvcCwgZmxhdHRlbmVkTm9kZXMsIGtleUVudGl0aWVzLCBleHBhbmRLZXlzLCBkaXJlY3Rpb24pIHtcbiAgdmFyIF9hYnN0cmFjdERyb3BOb2RlRW50aTtcbiAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYLFxuICAgIGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICB2YXIgX2dldEJvdW5kaW5nQ2xpZW50UmVjID0gZXZlbnQudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgIHRvcCA9IF9nZXRCb3VuZGluZ0NsaWVudFJlYy50b3AsXG4gICAgaGVpZ2h0ID0gX2dldEJvdW5kaW5nQ2xpZW50UmVjLmhlaWdodDtcbiAgLy8gb3B0aW9uYWwgY2hhaW4gZm9yIHRlc3RpbmdcbiAgdmFyIGhvcml6b250YWxNb3VzZU9mZnNldCA9IChkaXJlY3Rpb24gPT09ICdydGwnID8gLTEgOiAxKSAqICgoKHN0YXJ0TW91c2VQb3NpdGlvbiA9PT0gbnVsbCB8fCBzdGFydE1vdXNlUG9zaXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0YXJ0TW91c2VQb3NpdGlvbi54KSB8fCAwKSAtIGNsaWVudFgpO1xuICB2YXIgcmF3RHJvcExldmVsT2Zmc2V0ID0gKGhvcml6b250YWxNb3VzZU9mZnNldCAtIDEyKSAvIGluZGVudDtcblxuICAvLyBGaWx0ZXIgdGhlIGV4cGFuZGVkIGtleXMgdG8gZXhjbHVkZSB0aGUgbm9kZSB0aGF0IG5vdCBoYXMgY2hpbGRyZW4gY3VycmVudGx5IChsaWtlIGFzeW5jIG5vZGVzKS5cbiAgdmFyIGZpbHRlcmVkRXhwYW5kS2V5cyA9IGV4cGFuZEtleXMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgX2tleUVudGl0aWVzJGtleTtcbiAgICByZXR1cm4gKF9rZXlFbnRpdGllcyRrZXkgPSBrZXlFbnRpdGllc1trZXldKSA9PT0gbnVsbCB8fCBfa2V5RW50aXRpZXMka2V5ID09PSB2b2lkIDAgfHwgKF9rZXlFbnRpdGllcyRrZXkgPSBfa2V5RW50aXRpZXMka2V5LmNoaWxkcmVuKSA9PT0gbnVsbCB8fCBfa2V5RW50aXRpZXMka2V5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfa2V5RW50aXRpZXMka2V5Lmxlbmd0aDtcbiAgfSk7XG5cbiAgLy8gZmluZCBhYnN0cmFjdCBkcm9wIG5vZGUgYnkgaG9yaXpvbnRhbCBvZmZzZXRcbiAgdmFyIGFic3RyYWN0RHJvcE5vZGVFbnRpdHkgPSAoMCwgX2tleVV0aWwuZGVmYXVsdCkoa2V5RW50aXRpZXMsIHRhcmdldE5vZGVQcm9wcy5ldmVudEtleSk7XG4gIGlmIChjbGllbnRZIDwgdG9wICsgaGVpZ2h0IC8gMikge1xuICAgIC8vIGZpcnN0IGhhbGYsIHNldCBhYnN0cmFjdCBkcm9wIG5vZGUgdG8gcHJldmlvdXMgbm9kZVxuICAgIHZhciBub2RlSW5kZXggPSBmbGF0dGVuZWROb2Rlcy5maW5kSW5kZXgoZnVuY3Rpb24gKGZsYXR0ZW5lZE5vZGUpIHtcbiAgICAgIHJldHVybiBmbGF0dGVuZWROb2RlLmtleSA9PT0gYWJzdHJhY3REcm9wTm9kZUVudGl0eS5rZXk7XG4gICAgfSk7XG4gICAgdmFyIHByZXZOb2RlSW5kZXggPSBub2RlSW5kZXggPD0gMCA/IDAgOiBub2RlSW5kZXggLSAxO1xuICAgIHZhciBwcmV2Tm9kZUtleSA9IGZsYXR0ZW5lZE5vZGVzW3ByZXZOb2RlSW5kZXhdLmtleTtcbiAgICBhYnN0cmFjdERyb3BOb2RlRW50aXR5ID0gKDAsIF9rZXlVdGlsLmRlZmF1bHQpKGtleUVudGl0aWVzLCBwcmV2Tm9kZUtleSk7XG4gIH1cbiAgdmFyIGluaXRpYWxBYnN0cmFjdERyb3BOb2RlS2V5ID0gYWJzdHJhY3REcm9wTm9kZUVudGl0eS5rZXk7XG4gIHZhciBhYnN0cmFjdERyYWdPdmVyRW50aXR5ID0gYWJzdHJhY3REcm9wTm9kZUVudGl0eTtcbiAgdmFyIGRyYWdPdmVyTm9kZUtleSA9IGFic3RyYWN0RHJvcE5vZGVFbnRpdHkua2V5O1xuICB2YXIgZHJvcFBvc2l0aW9uID0gMDtcbiAgdmFyIGRyb3BMZXZlbE9mZnNldCA9IDA7XG5cbiAgLy8gT25seSBhbGxvdyBjcm9zcyBsZXZlbCBkcm9wIHdoZW4gZHJhZ2dpbmcgb24gYSBub24tZXhwYW5kZWQgbm9kZVxuICBpZiAoIWZpbHRlcmVkRXhwYW5kS2V5cy5pbmNsdWRlcyhpbml0aWFsQWJzdHJhY3REcm9wTm9kZUtleSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0Ryb3BMZXZlbE9mZnNldDsgaSArPSAxKSB7XG4gICAgICBpZiAoaXNMYXN0Q2hpbGQoYWJzdHJhY3REcm9wTm9kZUVudGl0eSkpIHtcbiAgICAgICAgYWJzdHJhY3REcm9wTm9kZUVudGl0eSA9IGFic3RyYWN0RHJvcE5vZGVFbnRpdHkucGFyZW50O1xuICAgICAgICBkcm9wTGV2ZWxPZmZzZXQgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgYWJzdHJhY3REcmFnRGF0YU5vZGUgPSBkcmFnTm9kZVByb3BzLmRhdGE7XG4gIHZhciBhYnN0cmFjdERyb3BEYXRhTm9kZSA9IGFic3RyYWN0RHJvcE5vZGVFbnRpdHkubm9kZTtcbiAgdmFyIGRyb3BBbGxvd2VkID0gdHJ1ZTtcbiAgaWYgKGlzRmlyc3RDaGlsZChhYnN0cmFjdERyb3BOb2RlRW50aXR5KSAmJiBhYnN0cmFjdERyb3BOb2RlRW50aXR5LmxldmVsID09PSAwICYmIGNsaWVudFkgPCB0b3AgKyBoZWlnaHQgLyAyICYmIGFsbG93RHJvcCh7XG4gICAgZHJhZ05vZGU6IGFic3RyYWN0RHJhZ0RhdGFOb2RlLFxuICAgIGRyb3BOb2RlOiBhYnN0cmFjdERyb3BEYXRhTm9kZSxcbiAgICBkcm9wUG9zaXRpb246IC0xXG4gIH0pICYmIGFic3RyYWN0RHJvcE5vZGVFbnRpdHkua2V5ID09PSB0YXJnZXROb2RlUHJvcHMuZXZlbnRLZXkpIHtcbiAgICAvLyBmaXJzdCBoYWxmIG9mIGZpcnN0IG5vZGUgaW4gZmlyc3QgbGV2ZWxcbiAgICBkcm9wUG9zaXRpb24gPSAtMTtcbiAgfSBlbHNlIGlmICgoYWJzdHJhY3REcmFnT3ZlckVudGl0eS5jaGlsZHJlbiB8fCBbXSkubGVuZ3RoICYmIGZpbHRlcmVkRXhwYW5kS2V5cy5pbmNsdWRlcyhkcmFnT3Zlck5vZGVLZXkpKSB7XG4gICAgLy8gZHJvcCBvbiBleHBhbmRlZCBub2RlXG4gICAgLy8gb25seSBhbGxvdyBkcm9wIGluc2lkZVxuICAgIGlmIChhbGxvd0Ryb3Aoe1xuICAgICAgZHJhZ05vZGU6IGFic3RyYWN0RHJhZ0RhdGFOb2RlLFxuICAgICAgZHJvcE5vZGU6IGFic3RyYWN0RHJvcERhdGFOb2RlLFxuICAgICAgZHJvcFBvc2l0aW9uOiAwXG4gICAgfSkpIHtcbiAgICAgIGRyb3BQb3NpdGlvbiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyb3BBbGxvd2VkID0gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRyb3BMZXZlbE9mZnNldCA9PT0gMCkge1xuICAgIGlmIChyYXdEcm9wTGV2ZWxPZmZzZXQgPiAtMS41KSB7XG4gICAgICAvLyB8IE5vZGUgICAgIHwgPC0gYWJzdHJhY3REcm9wTm9kZVxuICAgICAgLy8gfCAtXi09PT09PSB8IDwtIG1vdXNlUG9zaXRpb25cbiAgICAgIC8vIDEuIHRyeSBkcm9wIGFmdGVyXG4gICAgICAvLyAyLiBkbyBub3QgYWxsb3cgZHJvcFxuICAgICAgaWYgKGFsbG93RHJvcCh7XG4gICAgICAgIGRyYWdOb2RlOiBhYnN0cmFjdERyYWdEYXRhTm9kZSxcbiAgICAgICAgZHJvcE5vZGU6IGFic3RyYWN0RHJvcERhdGFOb2RlLFxuICAgICAgICBkcm9wUG9zaXRpb246IDFcbiAgICAgIH0pKSB7XG4gICAgICAgIGRyb3BQb3NpdGlvbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcm9wQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB8IE5vZGUgICAgIHwgPC0gYWJzdHJhY3REcm9wTm9kZVxuICAgICAgLy8gfCAtLS09PV49PSB8IDwtIG1vdXNlUG9zaXRpb25cbiAgICAgIC8vIHdoZXRoZXIgaXQgaGFzIGNoaWxkcmVuIG9yIGRvZXNuJ3QgaGFzIGNoaWxkcmVuXG4gICAgICAvLyBhbHdheXNcbiAgICAgIC8vIDEuIHRyeSBkcm9wIGluc2lkZVxuICAgICAgLy8gMi4gdHJ5IGRyb3AgYWZ0ZXJcbiAgICAgIC8vIDMuIGRvIG5vdCBhbGxvdyBkcm9wXG4gICAgICBpZiAoYWxsb3dEcm9wKHtcbiAgICAgICAgZHJhZ05vZGU6IGFic3RyYWN0RHJhZ0RhdGFOb2RlLFxuICAgICAgICBkcm9wTm9kZTogYWJzdHJhY3REcm9wRGF0YU5vZGUsXG4gICAgICAgIGRyb3BQb3NpdGlvbjogMFxuICAgICAgfSkpIHtcbiAgICAgICAgZHJvcFBvc2l0aW9uID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoYWxsb3dEcm9wKHtcbiAgICAgICAgZHJhZ05vZGU6IGFic3RyYWN0RHJhZ0RhdGFOb2RlLFxuICAgICAgICBkcm9wTm9kZTogYWJzdHJhY3REcm9wRGF0YU5vZGUsXG4gICAgICAgIGRyb3BQb3NpdGlvbjogMVxuICAgICAgfSkpIHtcbiAgICAgICAgZHJvcFBvc2l0aW9uID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyb3BBbGxvd2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHwgTm9kZTEgfCA8LSBhYnN0cmFjdERyb3BOb2RlXG4gICAgLy8gICAgICB8ICBOb2RlMiAgfFxuICAgIC8vIC0tXi0tfC0tLS09PT09PXwgPC0gbW91c2VQb3NpdGlvblxuICAgIC8vIDEuIHRyeSBpbnNlcnQgYWZ0ZXIgTm9kZTFcbiAgICAvLyAyLiBkbyBub3QgYWxsb3cgZHJvcFxuICAgIGlmIChhbGxvd0Ryb3Aoe1xuICAgICAgZHJhZ05vZGU6IGFic3RyYWN0RHJhZ0RhdGFOb2RlLFxuICAgICAgZHJvcE5vZGU6IGFic3RyYWN0RHJvcERhdGFOb2RlLFxuICAgICAgZHJvcFBvc2l0aW9uOiAxXG4gICAgfSkpIHtcbiAgICAgIGRyb3BQb3NpdGlvbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyb3BBbGxvd2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZHJvcFBvc2l0aW9uOiBkcm9wUG9zaXRpb24sXG4gICAgZHJvcExldmVsT2Zmc2V0OiBkcm9wTGV2ZWxPZmZzZXQsXG4gICAgZHJvcFRhcmdldEtleTogYWJzdHJhY3REcm9wTm9kZUVudGl0eS5rZXksXG4gICAgZHJvcFRhcmdldFBvczogYWJzdHJhY3REcm9wTm9kZUVudGl0eS5wb3MsXG4gICAgZHJhZ092ZXJOb2RlS2V5OiBkcmFnT3Zlck5vZGVLZXksXG4gICAgZHJvcENvbnRhaW5lcktleTogZHJvcFBvc2l0aW9uID09PSAwID8gbnVsbCA6ICgoX2Fic3RyYWN0RHJvcE5vZGVFbnRpID0gYWJzdHJhY3REcm9wTm9kZUVudGl0eS5wYXJlbnQpID09PSBudWxsIHx8IF9hYnN0cmFjdERyb3BOb2RlRW50aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fic3RyYWN0RHJvcE5vZGVFbnRpLmtleSkgfHwgbnVsbCxcbiAgICBkcm9wQWxsb3dlZDogZHJvcEFsbG93ZWRcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gc2VsZWN0ZWRLZXlzIGFjY29yZGluZyB3aXRoIG11bHRpcGxlIHByb3BcbiAqIEBwYXJhbSBzZWxlY3RlZEtleXNcbiAqIEBwYXJhbSBwcm9wc1xuICogQHJldHVybnMgW3N0cmluZ11cbiAqL1xuZnVuY3Rpb24gY2FsY1NlbGVjdGVkS2V5cyhzZWxlY3RlZEtleXMsIHByb3BzKSB7XG4gIGlmICghc2VsZWN0ZWRLZXlzKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZTtcbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkS2V5cy5zbGljZSgpO1xuICB9XG4gIGlmIChzZWxlY3RlZEtleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtzZWxlY3RlZEtleXNbMF1dO1xuICB9XG4gIHJldHVybiBzZWxlY3RlZEtleXM7XG59XG52YXIgaW50ZXJuYWxQcm9jZXNzUHJvcHMgPSBmdW5jdGlvbiBpbnRlcm5hbFByb2Nlc3NQcm9wcyhwcm9wcykge1xuICByZXR1cm4gcHJvcHM7XG59O1xuZnVuY3Rpb24gY29udmVydERhdGFUb1RyZWUodHJlZURhdGEsIHByb2Nlc3Nvcikge1xuICBpZiAoIXRyZWVEYXRhKSByZXR1cm4gW107XG4gIHZhciBfcmVmMiA9IHByb2Nlc3NvciB8fCB7fSxcbiAgICBfcmVmMiRwcm9jZXNzUHJvcHMgPSBfcmVmMi5wcm9jZXNzUHJvcHMsXG4gICAgcHJvY2Vzc1Byb3BzID0gX3JlZjIkcHJvY2Vzc1Byb3BzID09PSB2b2lkIDAgPyBpbnRlcm5hbFByb2Nlc3NQcm9wcyA6IF9yZWYyJHByb2Nlc3NQcm9wcztcbiAgdmFyIGxpc3QgPSBBcnJheS5pc0FycmF5KHRyZWVEYXRhKSA/IHRyZWVEYXRhIDogW3RyZWVEYXRhXTtcbiAgcmV0dXJuIGxpc3QubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgIHZhciBjaGlsZHJlbiA9IF9yZWYzLmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcmVmMywgX2V4Y2x1ZGVkKTtcbiAgICB2YXIgY2hpbGRyZW5Ob2RlcyA9IGNvbnZlcnREYXRhVG9UcmVlKGNoaWxkcmVuLCBwcm9jZXNzb3IpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJlZU5vZGUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBrZXk6IHByb3BzLmtleVxuICAgIH0sIHByb2Nlc3NQcm9wcyhwcm9wcykpLCBjaGlsZHJlbk5vZGVzKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2UgYGNoZWNrZWRLZXlzYCB0byB7IGNoZWNrZWRLZXlzLCBoYWxmQ2hlY2tlZEtleXMgfSBzdHlsZVxuICovXG5mdW5jdGlvbiBwYXJzZUNoZWNrZWRLZXlzKGtleXMpIHtcbiAgaWYgKCFrZXlzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDb252ZXJ0IGtleXMgdG8gb2JqZWN0IGZvcm1hdFxuICB2YXIga2V5UHJvcHM7XG4gIGlmIChBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgLy8gW0xlZ2FjeV0gRm9sbG93IHRoZSBhcGkgZG9jXG4gICAga2V5UHJvcHMgPSB7XG4gICAgICBjaGVja2VkS2V5czoga2V5cyxcbiAgICAgIGhhbGZDaGVja2VkS2V5czogdW5kZWZpbmVkXG4gICAgfTtcbiAgfSBlbHNlIGlmICgoMCwgX3R5cGVvZjIuZGVmYXVsdCkoa2V5cykgPT09ICdvYmplY3QnKSB7XG4gICAga2V5UHJvcHMgPSB7XG4gICAgICBjaGVja2VkS2V5czoga2V5cy5jaGVja2VkIHx8IHVuZGVmaW5lZCxcbiAgICAgIGhhbGZDaGVja2VkS2V5czoga2V5cy5oYWxmQ2hlY2tlZCB8fCB1bmRlZmluZWRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgICgwLCBfd2FybmluZy5kZWZhdWx0KShmYWxzZSwgJ2BjaGVja2VkS2V5c2AgaXMgbm90IGFuIGFycmF5IG9yIGFuIG9iamVjdCcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBrZXlQcm9wcztcbn1cblxuLyoqXG4gKiBJZiB1c2VyIHVzZSBgYXV0b0V4cGFuZFBhcmVudGAgd2Ugc2hvdWxkIGdldCB0aGUgbGlzdCBvZiBwYXJlbnQgbm9kZVxuICogQHBhcmFtIGtleUxpc3RcbiAqIEBwYXJhbSBrZXlFbnRpdGllc1xuICovXG5mdW5jdGlvbiBjb25kdWN0RXhwYW5kUGFyZW50KGtleUxpc3QsIGtleUVudGl0aWVzKSB7XG4gIHZhciBleHBhbmRlZEtleXMgPSBuZXcgU2V0KCk7XG4gIGZ1bmN0aW9uIGNvbmR1Y3RVcChrZXkpIHtcbiAgICBpZiAoZXhwYW5kZWRLZXlzLmhhcyhrZXkpKSByZXR1cm47XG4gICAgdmFyIGVudGl0eSA9ICgwLCBfa2V5VXRpbC5kZWZhdWx0KShrZXlFbnRpdGllcywga2V5KTtcbiAgICBpZiAoIWVudGl0eSkgcmV0dXJuO1xuICAgIGV4cGFuZGVkS2V5cy5hZGQoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gZW50aXR5LnBhcmVudCxcbiAgICAgIG5vZGUgPSBlbnRpdHkubm9kZTtcbiAgICBpZiAobm9kZS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGNvbmR1Y3RVcChwYXJlbnQua2V5KTtcbiAgICB9XG4gIH1cbiAgKGtleUxpc3QgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvbmR1Y3RVcChrZXkpO1xuICB9KTtcbiAgcmV0dXJuICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGV4cGFuZGVkS2V5cyk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxNQUFNLEdBQUdBLE1BQU07QUFDdkJGLE9BQU8sQ0FBQ0csTUFBTSxHQUFHQSxNQUFNO0FBQ3ZCSCxPQUFPLENBQUNJLGdCQUFnQixHQUFHQSxnQkFBZ0I7QUFDM0NKLE9BQU8sQ0FBQ0ssZ0JBQWdCLEdBQUdBLGdCQUFnQjtBQUMzQ0wsT0FBTyxDQUFDTSxtQkFBbUIsR0FBR0EsbUJBQW1CO0FBQ2pETixPQUFPLENBQUNPLGlCQUFpQixHQUFHQSxpQkFBaUI7QUFDN0NQLE9BQU8sQ0FBQ1EsbUJBQW1CLEdBQUdBLG1CQUFtQjtBQUNqRFYsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxhQUFhLEVBQUU7RUFDNUNTLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBU0EsR0FBR0EsQ0FBQSxFQUFHO0lBQ2xCLE9BQU9DLFNBQVMsQ0FBQ0MsV0FBVztFQUM5QjtBQUNGLENBQUMsQ0FBQztBQUNGWixPQUFPLENBQUNhLFlBQVksR0FBR0EsWUFBWTtBQUNuQ2IsT0FBTyxDQUFDYyxXQUFXLEdBQUdBLFdBQVc7QUFDakNoQixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ1MsVUFBVSxFQUFFLElBQUk7RUFDaEJDLEdBQUcsRUFBRSxTQUFTQSxHQUFHQSxDQUFBLEVBQUc7SUFDbEIsT0FBT0MsU0FBUyxDQUFDSSxVQUFVO0VBQzdCO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZmLE9BQU8sQ0FBQ2dCLGdCQUFnQixHQUFHQSxnQkFBZ0I7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