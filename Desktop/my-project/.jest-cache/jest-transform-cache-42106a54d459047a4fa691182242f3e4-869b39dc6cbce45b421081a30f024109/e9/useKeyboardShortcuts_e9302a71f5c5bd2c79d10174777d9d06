06348c63c7a7a939209f9abbd7a18189
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKeyboardShortcuts = void 0;
const react_1 = require("react");
const react_redux_1 = require("react-redux");
const useKeyboardShortcuts = ({ onCopy, onPaste, onDelete, onSelectAll, onDeselectAll }) => {
    const dispatch = (0, react_redux_1.useDispatch)();
    const selectedItems = (0, react_redux_1.useSelector)((state) => state.selection.selectedTestCases || []);
    const handleKeyDown = (0, react_1.useCallback)((event) => {
        // Ctrl/Cmd + C: 복사
        if ((event.ctrlKey || event.metaKey) && event.key === 'c') {
            event.preventDefault();
            if (onCopy && selectedItems.length > 0) {
                onCopy();
            }
        }
        // Ctrl/Cmd + V: 붙여넣기
        if ((event.ctrlKey || event.metaKey) && event.key === 'v') {
            event.preventDefault();
            if (onPaste) {
                onPaste();
            }
        }
        // Delete: 삭제
        if (event.key === 'Delete') {
            event.preventDefault();
            if (onDelete && selectedItems.length > 0) {
                onDelete();
            }
        }
        // Ctrl/Cmd + A: 전체 선택
        if ((event.ctrlKey || event.metaKey) && event.key === 'a') {
            event.preventDefault();
            if (onSelectAll) {
                onSelectAll();
            }
        }
        // Escape: 선택 해제
        if (event.key === 'Escape') {
            event.preventDefault();
            if (onDeselectAll) {
                onDeselectAll();
            }
        }
    }, [selectedItems.length, onCopy, onPaste, onDelete, onSelectAll, onDeselectAll]);
    (0, react_1.useEffect)(() => {
        document.addEventListener('keydown', handleKeyDown);
        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);
    return {
        selectedItemsCount: selectedItems.length
    };
};
exports.useKeyboardShortcuts = useKeyboardShortcuts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvaG9va3MvdXNlS2V5Ym9hcmRTaG9ydGN1dHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQStDO0FBQy9DLDZDQUF1RDtBQVdoRCxNQUFNLG9CQUFvQixHQUFHLENBQUMsRUFDbkMsTUFBTSxFQUNOLE9BQU8sRUFDUCxRQUFRLEVBQ1IsV0FBVyxFQUNYLGFBQWEsRUFDVSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxRQUFRLEdBQUcsSUFBQSx5QkFBVyxHQUFFLENBQUM7SUFDL0IsTUFBTSxhQUFhLEdBQUcsSUFBQSx5QkFBVyxFQUFDLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVqRyxNQUFNLGFBQWEsR0FBRyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUU7UUFDekQsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQzFELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLE1BQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN2QyxNQUFNLEVBQUUsQ0FBQztZQUNYLENBQUM7UUFDSCxDQUFDO1FBRUQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQzFELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLE9BQU8sRUFBRSxDQUFDO2dCQUNaLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQztRQUNILENBQUM7UUFFRCxhQUFhO1FBQ2IsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzNCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLFFBQVEsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN6QyxRQUFRLEVBQUUsQ0FBQztZQUNiLENBQUM7UUFDSCxDQUFDO1FBRUQsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQzFELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixJQUFJLFdBQVcsRUFBRSxDQUFDO2dCQUNoQixXQUFXLEVBQUUsQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQztRQUVELGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDM0IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksYUFBYSxFQUFFLENBQUM7Z0JBQ2xCLGFBQWEsRUFBRSxDQUFDO1lBQ2xCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVsRixJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUVwRCxPQUFPLEdBQUcsRUFBRTtZQUNWLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVwQixPQUFPO1FBQ0wsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLE1BQU07S0FDekMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQS9EVyxRQUFBLG9CQUFvQix3QkErRC9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy8zaS1hMS0yMDIxLTAxNy9EZXNrdG9wL215LXByb2plY3Qvc3JjL3JlbmRlcmVyL2hvb2tzL3VzZUtleWJvYXJkU2hvcnRjdXRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tICcuLi9zdG9yZSc7XG5cbmludGVyZmFjZSBLZXlib2FyZFNob3J0Y3V0c1Byb3BzIHtcbiAgb25Db3B5PzogKCkgPT4gdm9pZDtcbiAgb25QYXN0ZT86ICgpID0+IHZvaWQ7XG4gIG9uRGVsZXRlPzogKCkgPT4gdm9pZDtcbiAgb25TZWxlY3RBbGw/OiAoKSA9PiB2b2lkO1xuICBvbkRlc2VsZWN0QWxsPzogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUtleWJvYXJkU2hvcnRjdXRzID0gKHtcbiAgb25Db3B5LFxuICBvblBhc3RlLFxuICBvbkRlbGV0ZSxcbiAgb25TZWxlY3RBbGwsXG4gIG9uRGVzZWxlY3RBbGxcbn06IEtleWJvYXJkU2hvcnRjdXRzUHJvcHMpID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBzZWxlY3RlZEl0ZW1zID0gdXNlU2VsZWN0b3IoKHN0YXRlOiBSb290U3RhdGUpID0+IHN0YXRlLnNlbGVjdGlvbi5zZWxlY3RlZFRlc3RDYXNlcyB8fCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIC8vIEN0cmwvQ21kICsgQzog67O17IKsXG4gICAgaWYgKChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICYmIGV2ZW50LmtleSA9PT0gJ2MnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ29weSAmJiBzZWxlY3RlZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb25Db3B5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEN0cmwvQ21kICsgVjog67aZ7Jes64Sj6riwXG4gICAgaWYgKChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICYmIGV2ZW50LmtleSA9PT0gJ3YnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uUGFzdGUpIHtcbiAgICAgICAgb25QYXN0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBEZWxldGU6IOyCreygnFxuICAgIGlmIChldmVudC5rZXkgPT09ICdEZWxldGUnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uRGVsZXRlICYmIHNlbGVjdGVkSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvbkRlbGV0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBDdHJsL0NtZCArIEE6IOyghOyytCDshKDtg51cbiAgICBpZiAoKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgZXZlbnQua2V5ID09PSAnYScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAob25TZWxlY3RBbGwpIHtcbiAgICAgICAgb25TZWxlY3RBbGwoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gRXNjYXBlOiDshKDtg50g7ZW07KCcXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAob25EZXNlbGVjdEFsbCkge1xuICAgICAgICBvbkRlc2VsZWN0QWxsKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRJdGVtcy5sZW5ndGgsIG9uQ29weSwgb25QYXN0ZSwgb25EZWxldGUsIG9uU2VsZWN0QWxsLCBvbkRlc2VsZWN0QWxsXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlS2V5RG93bl0pO1xuXG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWRJdGVtc0NvdW50OiBzZWxlY3RlZEl0ZW1zLmxlbmd0aFxuICB9O1xufTsgIl0sInZlcnNpb24iOjN9