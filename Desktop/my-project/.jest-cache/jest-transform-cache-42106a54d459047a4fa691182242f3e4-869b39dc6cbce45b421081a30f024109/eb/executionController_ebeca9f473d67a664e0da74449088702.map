{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/controllers/executionController.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/domains/executions/controllers/executionController.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport { executionService } from '../services/executionService';\n\nconst router = Router();\n\n// 실행 기록 생성\nrouter.post('/', async (req: Request, res: Response) => {\n    try {\n        const execution = await executionService.createExecution(req.body);\n        res.status(201).json(execution);\n    } catch (err: any) {\n        res.status(400).json({ error: err.message });\n    }\n});\n\n// 실행 기록 단건 조회\nrouter.get('/:id', async (req: Request, res: Response) => {\n    try {\n        const execution = await executionService.getExecutionById(Number(req.params.id));\n        if (!execution) return res.status(404).json({ error: 'Not found' });\n        res.json(execution);\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// 특정 테스트케이스의 실행 기록 전체 조회\nrouter.get('/testcase/:testcaseId', async (req: Request, res: Response) => {\n    try {\n        const executions = await executionService.getExecutionsByTestCase(Number(req.params.testcaseId));\n        res.json(executions);\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\n// 실행 기록 수정\nrouter.put('/:id', async (req: Request, res: Response) => {\n    try {\n        const updated = await executionService.updateExecution(Number(req.params.id), req.body);\n        if (!updated) return res.status(404).json({ error: 'Not found' });\n        res.json(updated);\n    } catch (err: any) {\n        res.status(400).json({ error: err.message });\n    }\n});\n\n// 실행 기록 삭제\nrouter.delete('/:id', async (req: Request, res: Response) => {\n    try {\n        await executionService.deleteExecution(Number(req.params.id));\n        res.status(204).send();\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\nexport default router; "],"version":3}