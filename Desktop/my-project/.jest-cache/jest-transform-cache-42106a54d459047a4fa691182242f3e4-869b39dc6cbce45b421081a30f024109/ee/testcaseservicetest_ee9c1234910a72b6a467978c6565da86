897a3167bdfc64aff920d7aaa16267b1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Elasticsearch client
jest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({
    indices: {
        delete: jest.fn().mockResolvedValue({}),
        create: jest.fn().mockResolvedValue({}),
    },
    index: jest.fn().mockResolvedValue({}),
    search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),
    update: jest.fn().mockResolvedValue({}),
    delete: jest.fn().mockResolvedValue({}),
}));
// Mock PostgreSQL client with ensurePgConnected
jest.mock('../src/main/app/infrastructure/database/pgClient', () => ({
    query: jest.fn().mockResolvedValue({ rows: [] }),
    connect: jest.fn().mockResolvedValue({}),
    ensurePgConnected: jest.fn().mockResolvedValue({}),
}));
const testCaseService_1 = require("../src/main/app/domains/testcases/services/testCaseService");
const testCaseRepository_1 = require("../src/main/app/domains/testcases/repositories/testCaseRepository");
describe('TestCaseService', () => {
    let testcaseId;
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('createTestCaseWithVersion', async () => {
        const tc = await (0, testCaseService_1.createTestCaseWithVersion)({
            title: 'TC2',
            prereq: 'none',
            steps: ['step1', 'step2'],
            expected: 'ok',
            priority: 'Medium',
            tags: ['regression'],
            status: 'Active',
            createdBy: 'tester',
        });
        testcaseId = tc.id;
        expect(tc.title).toBe('TC2');
        const found = await (0, testCaseRepository_1.getTestCaseById)(tc.id);
        expect(found?.id).toBe(tc.id);
    }, 60000);
    it('updateTestCaseWithVersion', async () => {
        const updated = await (0, testCaseService_1.updateTestCaseWithVersion)(testcaseId, { title: 'TC2-upd', steps: ['step1'], status: 'Archived' }, 'tester');
        expect(updated?.title).toBe('TC2-upd');
        expect(updated?.status).toBe('Archived');
    }, 60000);
    it('getTestCaseVersions', async () => {
        const versions = await (0, testCaseService_1.getTestCaseVersions)(testcaseId);
        expect(versions.length).toBeGreaterThan(0);
    }, 60000);
    it('deleteTestCaseWithIndex', async () => {
        const ok = await (0, testCaseService_1.deleteTestCaseWithIndex)(testcaseId);
        expect(ok).toBe(true);
        const found = await (0, testCaseRepository_1.getTestCaseById)(testcaseId);
        expect(found).toBeNull();
    }, 60000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC90ZXN0cy90ZXN0Y2FzZS5zZXJ2aWNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFHQSw0QkFBNEI7QUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyx1REFBdUQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0tBQ3hDO0lBQ0QsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7SUFDdEMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzNELE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0NBQ3hDLENBQUMsQ0FBQyxDQUFDO0FBRUosZ0RBQWdEO0FBQ2hELElBQUksQ0FBQyxJQUFJLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2hELE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO0lBQ3hDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7Q0FDbkQsQ0FBQyxDQUFDLENBQUM7QUFwQkosZ0dBQWdMO0FBQ2hMLDBHQUFvRztBQXFCcEcsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLFVBQWtCLENBQUM7SUFFdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6QyxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUEsMkNBQXlCLEVBQUM7WUFDekMsS0FBSyxFQUFFLEtBQUs7WUFDWixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUM7WUFDekIsUUFBUSxFQUFFLElBQUk7WUFDZCxRQUFRLEVBQUUsUUFBUTtZQUNsQixJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDcEIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLG9DQUFlLEVBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFVixFQUFFLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLDJDQUF5QixFQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVWLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEscUNBQW1CLEVBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRVYsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBQSx5Q0FBdUIsRUFBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBQSxvQ0FBZSxFQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3Rlc3RzL3Rlc3RjYXNlLnNlcnZpY2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uLCB1cGRhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uLCBkZWxldGVUZXN0Q2FzZVdpdGhJbmRleCwgZ2V0VGVzdENhc2VWZXJzaW9ucyB9IGZyb20gJy4uL3NyYy9tYWluL2FwcC9kb21haW5zL3Rlc3RjYXNlcy9zZXJ2aWNlcy90ZXN0Q2FzZVNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0VGVzdENhc2VCeUlkIH0gZnJvbSAnLi4vc3JjL21haW4vYXBwL2RvbWFpbnMvdGVzdGNhc2VzL3JlcG9zaXRvcmllcy90ZXN0Q2FzZVJlcG9zaXRvcnknO1xuXG4vLyBNb2NrIEVsYXN0aWNzZWFyY2ggY2xpZW50XG5qZXN0Lm1vY2soJy4uL3NyYy9tYWluL2FwcC9pbmZyYXN0cnVjdHVyZS9lbGFzdGljc2VhcmNoL2VzQ2xpZW50JywgKCkgPT4gKHtcbiAgaW5kaWNlczoge1xuICAgIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcbiAgICBjcmVhdGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXG4gIH0sXG4gIGluZGV4OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxuICBzZWFyY2g6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGhpdHM6IHsgaGl0czogW10gfSB9KSxcbiAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxuICBkZWxldGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXG59KSk7XG5cbi8vIE1vY2sgUG9zdGdyZVNRTCBjbGllbnQgd2l0aCBlbnN1cmVQZ0Nvbm5lY3RlZFxuamVzdC5tb2NrKCcuLi9zcmMvbWFpbi9hcHAvaW5mcmFzdHJ1Y3R1cmUvZGF0YWJhc2UvcGdDbGllbnQnLCAoKSA9PiAoe1xuICBxdWVyeTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgcm93czogW10gfSksXG4gIGNvbm5lY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSksXG4gIGVuc3VyZVBnQ29ubmVjdGVkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pLFxufSkpO1xuXG5kZXNjcmliZSgnVGVzdENhc2VTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgdGVzdGNhc2VJZDogbnVtYmVyO1xuICBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdjcmVhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRjID0gYXdhaXQgY3JlYXRlVGVzdENhc2VXaXRoVmVyc2lvbih7XG4gICAgICB0aXRsZTogJ1RDMicsXG4gICAgICBwcmVyZXE6ICdub25lJyxcbiAgICAgIHN0ZXBzOiBbJ3N0ZXAxJywgJ3N0ZXAyJ10sXG4gICAgICBleHBlY3RlZDogJ29rJyxcbiAgICAgIHByaW9yaXR5OiAnTWVkaXVtJyxcbiAgICAgIHRhZ3M6IFsncmVncmVzc2lvbiddLFxuICAgICAgc3RhdHVzOiAnQWN0aXZlJyxcbiAgICAgIGNyZWF0ZWRCeTogJ3Rlc3RlcicsXG4gICAgfSk7XG4gICAgdGVzdGNhc2VJZCA9IHRjLmlkO1xuICAgIGV4cGVjdCh0Yy50aXRsZSkudG9CZSgnVEMyJyk7XG4gICAgY29uc3QgZm91bmQgPSBhd2FpdCBnZXRUZXN0Q2FzZUJ5SWQodGMuaWQpO1xuICAgIGV4cGVjdChmb3VuZD8uaWQpLnRvQmUodGMuaWQpO1xuICB9LCA2MDAwMCk7XG5cbiAgaXQoJ3VwZGF0ZVRlc3RDYXNlV2l0aFZlcnNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZVRlc3RDYXNlV2l0aFZlcnNpb24odGVzdGNhc2VJZCwgeyB0aXRsZTogJ1RDMi11cGQnLCBzdGVwczogWydzdGVwMSddLCBzdGF0dXM6ICdBcmNoaXZlZCcgfSwgJ3Rlc3RlcicpO1xuICAgIGV4cGVjdCh1cGRhdGVkPy50aXRsZSkudG9CZSgnVEMyLXVwZCcpO1xuICAgIGV4cGVjdCh1cGRhdGVkPy5zdGF0dXMpLnRvQmUoJ0FyY2hpdmVkJyk7XG4gIH0sIDYwMDAwKTtcblxuICBpdCgnZ2V0VGVzdENhc2VWZXJzaW9ucycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB2ZXJzaW9ucyA9IGF3YWl0IGdldFRlc3RDYXNlVmVyc2lvbnModGVzdGNhc2VJZCk7XG4gICAgZXhwZWN0KHZlcnNpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICB9LCA2MDAwMCk7XG5cbiAgaXQoJ2RlbGV0ZVRlc3RDYXNlV2l0aEluZGV4JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9rID0gYXdhaXQgZGVsZXRlVGVzdENhc2VXaXRoSW5kZXgodGVzdGNhc2VJZCk7XG4gICAgZXhwZWN0KG9rKS50b0JlKHRydWUpO1xuICAgIGNvbnN0IGZvdW5kID0gYXdhaXQgZ2V0VGVzdENhc2VCeUlkKHRlc3RjYXNlSWQpO1xuICAgIGV4cGVjdChmb3VuZCkudG9CZU51bGwoKTtcbiAgfSwgNjAwMDApO1xufSk7ICJdLCJ2ZXJzaW9uIjozfQ==