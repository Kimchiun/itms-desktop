{"file":"/Users/3i-a1-2021-017/Desktop/my-project/tests/testcase.service.test.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/tests/testcase.service.test.ts"],"sourcesContent":["import { createTestCaseWithVersion, updateTestCaseWithVersion, deleteTestCaseWithIndex, getTestCaseVersions } from '../src/main/app/domains/testcases/services/testCaseService';\nimport { getTestCaseById } from '../src/main/app/domains/testcases/repositories/testCaseRepository';\n\n// Mock Elasticsearch client\njest.mock('../src/main/app/infrastructure/elasticsearch/esClient', () => ({\n  indices: {\n    delete: jest.fn().mockResolvedValue({}),\n    create: jest.fn().mockResolvedValue({}),\n  },\n  index: jest.fn().mockResolvedValue({}),\n  search: jest.fn().mockResolvedValue({ hits: { hits: [] } }),\n  update: jest.fn().mockResolvedValue({}),\n  delete: jest.fn().mockResolvedValue({}),\n}));\n\n// Mock PostgreSQL client with ensurePgConnected\njest.mock('../src/main/app/infrastructure/database/pgClient', () => ({\n  query: jest.fn().mockResolvedValue({ rows: [] }),\n  connect: jest.fn().mockResolvedValue({}),\n  ensurePgConnected: jest.fn().mockResolvedValue({}),\n}));\n\ndescribe('TestCaseService', () => {\n  let testcaseId: number;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('createTestCaseWithVersion', async () => {\n    const tc = await createTestCaseWithVersion({\n      title: 'TC2',\n      prereq: 'none',\n      steps: ['step1', 'step2'],\n      expected: 'ok',\n      priority: 'Medium',\n      tags: ['regression'],\n      status: 'Active',\n      createdBy: 'tester',\n    });\n    testcaseId = tc.id;\n    expect(tc.title).toBe('TC2');\n    const found = await getTestCaseById(tc.id);\n    expect(found?.id).toBe(tc.id);\n  }, 60000);\n\n  it('updateTestCaseWithVersion', async () => {\n    const updated = await updateTestCaseWithVersion(testcaseId, { title: 'TC2-upd', steps: ['step1'], status: 'Archived' }, 'tester');\n    expect(updated?.title).toBe('TC2-upd');\n    expect(updated?.status).toBe('Archived');\n  }, 60000);\n\n  it('getTestCaseVersions', async () => {\n    const versions = await getTestCaseVersions(testcaseId);\n    expect(versions.length).toBeGreaterThan(0);\n  }, 60000);\n\n  it('deleteTestCaseWithIndex', async () => {\n    const ok = await deleteTestCaseWithIndex(testcaseId);\n    expect(ok).toBe(true);\n    const found = await getTestCaseById(testcaseId);\n    expect(found).toBeNull();\n  }, 60000);\n}); "],"version":3}