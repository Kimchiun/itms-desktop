{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/controllers/dashboardController.ts","mappings":";;;;;AAAA,qCAAoD;AACpD,kGAA0E;AAC1E,2EAAgH;AAEhH,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB,2BAA2B;AAC3B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IACvD,IAAI,CAAC;QACD,eAAe;QACf,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,kBAAQ,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAClF,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC7C,YAAY;QACZ,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,kBAAQ,CAAC,KAAK,CAAC;;SAE/C,CAAC,CAAC;QACH,MAAM,YAAY,GAA2B,EAAE,CAAC;QAChD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,iDAAiD;QACjD,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,kBAAQ,CAAC,KAAK,CAAC;;SAEjD,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,WAAW;QACX,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,kBAAQ,CAAC,KAAK,CAAC;;SAEnD,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,IAAA,kCAAiB,EAAC,YAAY,CAAC,CAAC;QACjD,wBAAwB;QACxB,MAAM,aAAa,GAAG,IAAA,kCAAiB,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACjE,2BAA2B;QAC3B,MAAM,YAAY,GAAG,IAAA,iCAAgB,EAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;QAC7E,GAAG,CAAC,IAAI,CAAC;YACL,UAAU;YACV,YAAY;YACZ,WAAW;YACX,aAAa;YACb,YAAY;YACZ,QAAQ;SACX,CAAC,CAAC;IACP,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/main/app/controllers/dashboardController.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\nimport pgClient from '../../../main/app/infrastructure/database/pgClient';\nimport { calcDefectDensity, calcProgressRate, aggregateWorkload } from '../../../main/app/utils/dashboardStats';\n\nconst router = Router();\n\n// GET /api/dashboard/stats\nrouter.get('/stats', async (req: Request, res: Response) => {\n    try {\n        // 전체 테스트 케이스 수\n        const { rows: caseRows } = await pgClient.query('SELECT COUNT(*) FROM testcases');\n        const totalCases = Number(caseRows[0].count);\n        // 실행 상태별 집계\n        const { rows: execRows } = await pgClient.query(`\n            SELECT status, COUNT(*) FROM executions GROUP BY status\n        `);\n        const statusCounts: Record<string, number> = {};\n        execRows.forEach(r => { statusCounts[r.status] = Number(r.count); });\n        // 결함(이슈) 수 (comment에 [Jira: 또는 [Redmine: 포함된 실행)\n        const { rows: defectRows } = await pgClient.query(`\n            SELECT COUNT(*) FROM executions WHERE comment LIKE '%[Jira:%' OR comment LIKE '%[Redmine:%'\n        `);\n        const defectCount = Number(defectRows[0].count);\n        // 사용자별 작업량\n        const { rows: workloadRows } = await pgClient.query(`\n            SELECT executed_by FROM executions\n        `);\n        const workload = aggregateWorkload(workloadRows);\n        // 결함 밀도 = 결함수 / 전체 케이스수\n        const defectDensity = calcDefectDensity(defectCount, totalCases);\n        // 진행률 = 완료(Pass) / 전체 케이스수\n        const progressRate = calcProgressRate(statusCounts['Pass'] || 0, totalCases);\n        res.json({\n            totalCases,\n            statusCounts,\n            defectCount,\n            defectDensity,\n            progressRate,\n            workload,\n        });\n    } catch (err: any) {\n        res.status(500).json({ error: err.message });\n    }\n});\n\nexport default router; "],"version":3}