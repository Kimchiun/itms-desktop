{"file":"/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/ReleasePlanning/store/releaseSlice.ts","mappings":"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","names":[],"sources":["/Users/3i-a1-2021-017/Desktop/my-project/src/renderer/features/ReleasePlanning/store/releaseSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport api from '../../../utils/axios';\n\nexport interface Release {\n  id: number;\n  name: string;\n  description?: string;\n  startDate?: string;\n  endDate?: string;\n  createdAt: string;\n}\nexport interface Suite {\n  id: number;\n  releaseId: number;\n  name: string;\n  description?: string;\n  executor?: string;\n  environment?: string;\n  dueDate?: string;\n  createdAt: string;\n}\n\nexport interface ReleaseState {\n  releases: Release[];\n  suites: Suite[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: ReleaseState = {\n  releases: [],\n  suites: [],\n  loading: false,\n  error: null,\n};\n\nexport const fetchReleases = createAsyncThunk('releases/fetch', async () => {\n  const res = await api.get('/api/releases');\n  return res.data as Release[];\n});\nexport const fetchSuites = createAsyncThunk('suites/fetch', async (releaseId: number) => {\n  const res = await api.get(`/api/releases/${releaseId}/suites`);\n  return res.data as Suite[];\n});\n\nexport const createRelease = createAsyncThunk('releases/create', async (data: Omit<Release, 'id' | 'createdAt'>) => {\n  const res = await api.post('/api/releases', data);\n  return res.data as Release;\n});\nexport const updateRelease = createAsyncThunk('releases/update', async ({ id, data }: { id: number; data: Partial<Omit<Release, 'id' | 'createdAt'>> }) => {\n  const res = await api.put(`/api/releases/${id}`, data);\n  return res.data as Release;\n});\nexport const deleteRelease = createAsyncThunk('releases/delete', async (id: number) => {\n  await api.delete(`/api/releases/${id}`);\n  return id;\n});\n\nconst releaseSlice = createSlice({\n  name: 'release',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(fetchReleases.pending, state => { state.loading = true; state.error = null; })\n      .addCase(fetchReleases.fulfilled, (state, action) => { state.loading = false; state.releases = action.payload; })\n      .addCase(fetchReleases.rejected, (state, action) => { state.loading = false; state.error = action.error.message || '릴리즈 불러오기 실패'; })\n      .addCase(fetchSuites.pending, state => { state.loading = true; state.error = null; })\n      .addCase(fetchSuites.fulfilled, (state, action) => { state.loading = false; state.suites = action.payload; })\n      .addCase(fetchSuites.rejected, (state, action) => { state.loading = false; state.error = action.error.message || '스위트 불러오기 실패'; })\n      // 릴리즈 생성\n      .addCase(createRelease.fulfilled, (state, action) => { state.releases.push(action.payload); })\n      // 릴리즈 수정\n      .addCase(updateRelease.fulfilled, (state, action) => {\n        const idx = state.releases.findIndex(r => r.id === action.payload.id);\n        if (idx !== -1) state.releases[idx] = action.payload;\n      })\n      // 릴리즈 삭제\n      .addCase(deleteRelease.fulfilled, (state, action) => {\n        state.releases = state.releases.filter(r => r.id !== action.payload);\n      });\n  },\n});\n\nexport default releaseSlice.reducer; "],"version":3}