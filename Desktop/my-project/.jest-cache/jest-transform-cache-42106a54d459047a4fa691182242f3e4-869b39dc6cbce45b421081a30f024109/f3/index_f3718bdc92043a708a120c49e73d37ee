a569774196929d9568b211c528527b6d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.store = exports.logout = exports.setUser = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const testCaseSlice_1 = __importDefault(require("../features/TestCaseManagement/store/testCaseSlice"));
const releaseSlice_1 = __importDefault(require("../features/ReleasePlanning/store/releaseSlice"));
const dashboardSlice_1 = __importDefault(require("../features/Dashboard/store/dashboardSlice"));
const executionSlice_1 = __importDefault(require("../features/ExecutionManagement/store/executionSlice"));
const commentSlice_1 = __importDefault(require("../features/ExecutionManagement/store/commentSlice"));
const notificationSlice_1 = __importDefault(require("../features/ExecutionManagement/store/notificationSlice"));
const selectionSlice_1 = __importDefault(require("../features/TestCaseManagement/store/selectionSlice"));
const undoRedoMiddleware_1 = require("./undoRedoMiddleware");
const initialUserState = { me: null, isLoggedIn: false };
const userSlice = (0, toolkit_1.createSlice)({
    name: 'users',
    initialState: initialUserState,
    reducers: {
        setUser(state, action) {
            state.me = action.payload;
            state.isLoggedIn = true;
        },
        logout(state) {
            state.me = null;
            state.isLoggedIn = false;
        },
    },
});
_a = userSlice.actions, exports.setUser = _a.setUser, exports.logout = _a.logout;
// 루트 리듀서 타입 정의
const rootReducer = {
    testcases: testCaseSlice_1.default,
    releases: releaseSlice_1.default,
    dashboard: dashboardSlice_1.default,
    executions: executionSlice_1.default,
    comments: commentSlice_1.default,
    notifications: notificationSlice_1.default,
    selection: selectionSlice_1.default,
    users: userSlice.reducer,
};
exports.store = (0, toolkit_1.configureStore)({
    reducer: rootReducer,
    middleware: (getDefaultMiddleware) => getDefaultMiddleware({
        serializableCheck: {
            ignoredActions: ['persist/PERSIST'],
        },
    }).concat(undoRedoMiddleware_1.undoRedoMiddleware),
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvc3RvcmUvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDhDQUE4RTtBQUM5RSx1R0FBaUY7QUFDakYsa0dBQTRFO0FBQzVFLGdHQUEwRTtBQUMxRSwwR0FBb0Y7QUFDcEYsc0dBQWdGO0FBQ2hGLGdIQUEwRjtBQUMxRix5R0FBbUY7QUFDbkYsNkRBQTBEO0FBTzFELE1BQU0sZ0JBQWdCLEdBQWMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUVwRSxNQUFNLFNBQVMsR0FBRyxJQUFBLHFCQUFXLEVBQUM7SUFDNUIsSUFBSSxFQUFFLE9BQU87SUFDYixZQUFZLEVBQUUsZ0JBQWdCO0lBQzlCLFFBQVEsRUFBRTtRQUNSLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBdUU7WUFDcEYsS0FBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQzFCLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzFCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSztZQUNWLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ2hCLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQzNCLENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUNVLEtBQXNCLFNBQVMsQ0FBQyxPQUFPLEVBQXJDLGVBQU8sZUFBRSxjQUFNLGFBQXVCO0FBRXJELGVBQWU7QUFDZixNQUFNLFdBQVcsR0FBRztJQUNsQixTQUFTLEVBQUUsdUJBQWU7SUFDMUIsUUFBUSxFQUFFLHNCQUFjO0lBQ3hCLFNBQVMsRUFBRSx3QkFBZ0I7SUFDM0IsVUFBVSxFQUFFLHdCQUFnQjtJQUM1QixRQUFRLEVBQUUsc0JBQWM7SUFDeEIsYUFBYSxFQUFFLDJCQUFtQjtJQUNsQyxTQUFTLEVBQUUsd0JBQWdCO0lBQzNCLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTztDQUN6QixDQUFDO0FBRVcsUUFBQSxLQUFLLEdBQUcsSUFBQSx3QkFBYyxFQUFDO0lBQ2xDLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLFVBQVUsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FDbkMsb0JBQW9CLENBQUM7UUFDbkIsaUJBQWlCLEVBQUU7WUFDakIsY0FBYyxFQUFFLENBQUMsaUJBQWlCLENBQUM7U0FDcEM7S0FDRixDQUFDLENBQUMsTUFBTSxDQUFDLHVDQUFrQixDQUFDO0NBQ2hDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9yZW5kZXJlci9zdG9yZS9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25maWd1cmVTdG9yZSwgY3JlYXRlU2xpY2UsIFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB0ZXN0Q2FzZVJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvVGVzdENhc2VNYW5hZ2VtZW50L3N0b3JlL3Rlc3RDYXNlU2xpY2UnO1xuaW1wb3J0IHJlbGVhc2VSZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL1JlbGVhc2VQbGFubmluZy9zdG9yZS9yZWxlYXNlU2xpY2UnO1xuaW1wb3J0IGRhc2hib2FyZFJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvRGFzaGJvYXJkL3N0b3JlL2Rhc2hib2FyZFNsaWNlJztcbmltcG9ydCBleGVjdXRpb25SZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvZXhlY3V0aW9uU2xpY2UnO1xuaW1wb3J0IGNvbW1lbnRSZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvY29tbWVudFNsaWNlJztcbmltcG9ydCBub3RpZmljYXRpb25SZWR1Y2VyIGZyb20gJy4uL2ZlYXR1cmVzL0V4ZWN1dGlvbk1hbmFnZW1lbnQvc3RvcmUvbm90aWZpY2F0aW9uU2xpY2UnO1xuaW1wb3J0IHNlbGVjdGlvblJlZHVjZXIgZnJvbSAnLi4vZmVhdHVyZXMvVGVzdENhc2VNYW5hZ2VtZW50L3N0b3JlL3NlbGVjdGlvblNsaWNlJztcbmltcG9ydCB7IHVuZG9SZWRvTWlkZGxld2FyZSB9IGZyb20gJy4vdW5kb1JlZG9NaWRkbGV3YXJlJztcblxuZXhwb3J0IHR5cGUgVXNlclJvbGUgPSAnQURNSU4nIHwgJ1FBJyB8ICdERVYnIHwgJ1BNJztcbmV4cG9ydCBpbnRlcmZhY2UgVXNlclN0YXRlIHtcbiAgbWU6IG51bGwgfCB7IGlkOiBudW1iZXI7IHVzZXJuYW1lOiBzdHJpbmc7IHJvbGU6IFVzZXJSb2xlIH07XG4gIGlzTG9nZ2VkSW46IGJvb2xlYW47XG59XG5jb25zdCBpbml0aWFsVXNlclN0YXRlOiBVc2VyU3RhdGUgPSB7IG1lOiBudWxsLCBpc0xvZ2dlZEluOiBmYWxzZSB9O1xuXG5jb25zdCB1c2VyU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICd1c2VycycsXG4gIGluaXRpYWxTdGF0ZTogaW5pdGlhbFVzZXJTdGF0ZSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRVc2VyKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248eyBpZDogbnVtYmVyOyB1c2VybmFtZTogc3RyaW5nOyByb2xlOiBVc2VyUm9sZSB9Pikge1xuICAgICAgc3RhdGUubWUgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIHN0YXRlLmlzTG9nZ2VkSW4gPSB0cnVlO1xuICAgIH0sXG4gICAgbG9nb3V0KHN0YXRlKSB7XG4gICAgICBzdGF0ZS5tZSA9IG51bGw7XG4gICAgICBzdGF0ZS5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgfSxcbiAgfSxcbn0pO1xuZXhwb3J0IGNvbnN0IHsgc2V0VXNlciwgbG9nb3V0IH0gPSB1c2VyU2xpY2UuYWN0aW9ucztcblxuLy8g66Oo7Yq4IOumrOuTgOyEnCDtg4DsnoUg7KCV7J2YXG5jb25zdCByb290UmVkdWNlciA9IHtcbiAgdGVzdGNhc2VzOiB0ZXN0Q2FzZVJlZHVjZXIsXG4gIHJlbGVhc2VzOiByZWxlYXNlUmVkdWNlcixcbiAgZGFzaGJvYXJkOiBkYXNoYm9hcmRSZWR1Y2VyLFxuICBleGVjdXRpb25zOiBleGVjdXRpb25SZWR1Y2VyLFxuICBjb21tZW50czogY29tbWVudFJlZHVjZXIsXG4gIG5vdGlmaWNhdGlvbnM6IG5vdGlmaWNhdGlvblJlZHVjZXIsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uUmVkdWNlcixcbiAgdXNlcnM6IHVzZXJTbGljZS5yZWR1Y2VyLFxufTtcblxuZXhwb3J0IGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xuICByZWR1Y2VyOiByb290UmVkdWNlcixcbiAgbWlkZGxld2FyZTogKGdldERlZmF1bHRNaWRkbGV3YXJlKSA9PlxuICAgIGdldERlZmF1bHRNaWRkbGV3YXJlKHtcbiAgICAgIHNlcmlhbGl6YWJsZUNoZWNrOiB7XG4gICAgICAgIGlnbm9yZWRBY3Rpb25zOiBbJ3BlcnNpc3QvUEVSU0lTVCddLFxuICAgICAgfSxcbiAgICB9KS5jb25jYXQodW5kb1JlZG9NaWRkbGV3YXJlKSxcbn0pO1xuXG4vLyDtg4DsnoUg7KCV7J2Y66W8IHN0b3JlIOyDneyEsSDtm4Tsl5Ag7KCV7J2YXG5leHBvcnQgdHlwZSBSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XG5leHBvcnQgdHlwZSBBcHBEaXNwYXRjaCA9IHR5cGVvZiBzdG9yZS5kaXNwYXRjaDsgIl0sInZlcnNpb24iOjN9