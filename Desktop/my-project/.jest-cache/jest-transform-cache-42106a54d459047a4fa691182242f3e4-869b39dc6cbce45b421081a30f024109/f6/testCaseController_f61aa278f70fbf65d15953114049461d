e4ee6433147d1e202076f1f044bfb780
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const testCaseService_1 = require("../services/testCaseService");
const testCaseRepository_1 = require("../repositories/testCaseRepository");
const testCaseIndexer_1 = require("../elasticsearch/testCaseIndexer");
const router = (0, express_1.Router)();
router.get('/', async (req, res) => {
    const cases = await (0, testCaseRepository_1.listTestCases)();
    res.json(cases);
});
router.get('/:id', async (req, res) => {
    const tc = await (0, testCaseRepository_1.getTestCaseById)(Number(req.params.id));
    if (!tc)
        return res.status(404).json({ message: 'Not found' });
    res.json(tc);
});
router.post('/', async (req, res) => {
    const created = await (0, testCaseService_1.createTestCaseWithVersion)({ ...req.body, createdBy: req.body.createdBy });
    res.status(201).json(created);
});
router.put('/:id', async (req, res) => {
    const updated = await (0, testCaseService_1.updateTestCaseWithVersion)(Number(req.params.id), req.body, req.body.updatedBy);
    if (!updated)
        return res.status(404).json({ message: 'Not found' });
    res.json(updated);
});
router.delete('/:id', async (req, res) => {
    const ok = await (0, testCaseService_1.deleteTestCaseWithIndex)(Number(req.params.id));
    if (!ok)
        return res.status(404).json({ message: 'Not found' });
    res.status(204).send();
});
router.get('/:id/versions', async (req, res) => {
    const versions = await (0, testCaseService_1.getTestCaseVersions)(Number(req.params.id));
    res.json(versions);
});
router.post('/search', async (req, res) => {
    // req.body: Elasticsearch DSL 쿼리
    const results = await (0, testCaseIndexer_1.searchTestCases)(req.body);
    res.json(results);
});
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvbWFpbi9hcHAvZG9tYWlucy90ZXN0Y2FzZXMvY29udHJvbGxlcnMvdGVzdENhc2VDb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscUNBQWlDO0FBQ2pDLGlFQUFpSjtBQUNqSiwyRUFBb0Y7QUFDcEYsc0VBQW1FO0FBRW5FLE1BQU0sTUFBTSxHQUFHLElBQUEsZ0JBQU0sR0FBRSxDQUFDO0FBRXhCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDL0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLGtDQUFhLEdBQUUsQ0FBQztJQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNsQyxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUEsb0NBQWUsRUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBQSwyQ0FBeUIsRUFBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2hHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNsQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsMkNBQXlCLEVBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JHLElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBQSx5Q0FBdUIsRUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLElBQUksQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzNDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxxQ0FBbUIsRUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ3RDLGlDQUFpQztJQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUEsaUNBQWUsRUFBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9tYWluL2FwcC9kb21haW5zL3Rlc3RjYXNlcy9jb250cm9sbGVycy90ZXN0Q2FzZUNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBjcmVhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uLCB1cGRhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uLCBkZWxldGVUZXN0Q2FzZVdpdGhJbmRleCwgZ2V0VGVzdENhc2VWZXJzaW9ucyB9IGZyb20gJy4uL3NlcnZpY2VzL3Rlc3RDYXNlU2VydmljZSc7XG5pbXBvcnQgeyBsaXN0VGVzdENhc2VzLCBnZXRUZXN0Q2FzZUJ5SWQgfSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvdGVzdENhc2VSZXBvc2l0b3J5JztcbmltcG9ydCB7IHNlYXJjaFRlc3RDYXNlcyB9IGZyb20gJy4uL2VsYXN0aWNzZWFyY2gvdGVzdENhc2VJbmRleGVyJztcblxuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbnJvdXRlci5nZXQoJy8nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBjYXNlcyA9IGF3YWl0IGxpc3RUZXN0Q2FzZXMoKTtcbiAgICByZXMuanNvbihjYXNlcyk7XG59KTtcblxucm91dGVyLmdldCgnLzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHRjID0gYXdhaXQgZ2V0VGVzdENhc2VCeUlkKE51bWJlcihyZXEucGFyYW1zLmlkKSk7XG4gICAgaWYgKCF0YykgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ05vdCBmb3VuZCcgfSk7XG4gICAgcmVzLmpzb24odGMpO1xufSk7XG5cbnJvdXRlci5wb3N0KCcvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IGNyZWF0ZVRlc3RDYXNlV2l0aFZlcnNpb24oeyAuLi5yZXEuYm9keSwgY3JlYXRlZEJ5OiByZXEuYm9keS5jcmVhdGVkQnkgfSk7XG4gICAgcmVzLnN0YXR1cygyMDEpLmpzb24oY3JlYXRlZCk7XG59KTtcblxucm91dGVyLnB1dCgnLzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCB1cGRhdGVUZXN0Q2FzZVdpdGhWZXJzaW9uKE51bWJlcihyZXEucGFyYW1zLmlkKSwgcmVxLmJvZHksIHJlcS5ib2R5LnVwZGF0ZWRCeSk7XG4gICAgaWYgKCF1cGRhdGVkKSByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnTm90IGZvdW5kJyB9KTtcbiAgICByZXMuanNvbih1cGRhdGVkKTtcbn0pO1xuXG5yb3V0ZXIuZGVsZXRlKCcvOmlkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3Qgb2sgPSBhd2FpdCBkZWxldGVUZXN0Q2FzZVdpdGhJbmRleChOdW1iZXIocmVxLnBhcmFtcy5pZCkpO1xuICAgIGlmICghb2spIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdOb3QgZm91bmQnIH0pO1xuICAgIHJlcy5zdGF0dXMoMjA0KS5zZW5kKCk7XG59KTtcblxucm91dGVyLmdldCgnLzppZC92ZXJzaW9ucycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHZlcnNpb25zID0gYXdhaXQgZ2V0VGVzdENhc2VWZXJzaW9ucyhOdW1iZXIocmVxLnBhcmFtcy5pZCkpO1xuICAgIHJlcy5qc29uKHZlcnNpb25zKTtcbn0pO1xuXG5yb3V0ZXIucG9zdCgnL3NlYXJjaCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIC8vIHJlcS5ib2R5OiBFbGFzdGljc2VhcmNoIERTTCDsv7zrpqxcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgc2VhcmNoVGVzdENhc2VzKHJlcS5ib2R5KTtcbiAgICByZXMuanNvbihyZXN1bHRzKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7ICJdLCJ2ZXJzaW9uIjozfQ==