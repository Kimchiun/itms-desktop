6da1d3896efbf0dbb35e019e3222cb64
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearComments = exports.deleteComment = exports.updateComment = exports.addComment = exports.fetchComments = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = __importDefault(require("../../../utils/axios"));
const initialState = {
    comments: [],
    loading: false,
    error: null,
};
exports.fetchComments = (0, toolkit_1.createAsyncThunk)('comments/fetchComments', async ({ objectType, objectId }) => {
    const res = await axios_1.default.get(`/api/comments/${objectType}/${objectId}`);
    return res.data;
});
exports.addComment = (0, toolkit_1.createAsyncThunk)('comments/addComment', async (data) => {
    const res = await axios_1.default.post('/api/comments', data);
    return res.data;
});
exports.updateComment = (0, toolkit_1.createAsyncThunk)('comments/updateComment', async ({ id, content, mentions }) => {
    const res = await axios_1.default.put(`/api/comments/${id}`, { content, mentions });
    return res.data;
});
exports.deleteComment = (0, toolkit_1.createAsyncThunk)('comments/deleteComment', async (id) => {
    await axios_1.default.delete(`/api/comments/${id}`);
    return id;
});
const commentSlice = (0, toolkit_1.createSlice)({
    name: 'comments',
    initialState,
    reducers: {
        clearComments(state) {
            state.comments = [];
            state.error = null;
        },
    },
    extraReducers: builder => {
        builder
            .addCase(exports.fetchComments.pending, state => {
            state.loading = true;
            state.error = null;
        })
            .addCase(exports.fetchComments.fulfilled, (state, action) => {
            state.loading = false;
            state.comments = action.payload;
        })
            .addCase(exports.fetchComments.rejected, (state, action) => {
            state.loading = false;
            state.error = action.error.message || '댓글 불러오기 실패';
        })
            .addCase(exports.addComment.fulfilled, (state, action) => {
            state.comments.push(action.payload);
        })
            .addCase(exports.updateComment.fulfilled, (state, action) => {
            const idx = state.comments.findIndex(c => c.id === action.payload.id);
            if (idx !== -1)
                state.comments[idx] = action.payload;
        })
            .addCase(exports.deleteComment.fulfilled, (state, action) => {
            state.comments = state.comments.filter(c => c.id !== action.payload);
        });
    },
});
exports.clearComments = commentSlice.actions.clearComments;
exports.default = commentSlice.reducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzLzNpLWExLTIwMjEtMDE3L0Rlc2t0b3AvbXktcHJvamVjdC9zcmMvcmVuZGVyZXIvZmVhdHVyZXMvRXhlY3V0aW9uTWFuYWdlbWVudC9zdG9yZS9jb21tZW50U2xpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOENBQWdGO0FBQ2hGLGlFQUF1QztBQW1CdkMsTUFBTSxZQUFZLEdBQWlCO0lBQ2pDLFFBQVEsRUFBRSxFQUFFO0lBQ1osT0FBTyxFQUFFLEtBQUs7SUFDZCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFFVyxRQUFBLGFBQWEsR0FBRyxJQUFBLDBCQUFnQixFQUMzQyx3QkFBd0IsRUFDeEIsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBNEMsRUFBRSxFQUFFO0lBQzNFLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBRyxDQUFDLEdBQUcsQ0FBWSxpQkFBaUIsVUFBVSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDaEYsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQ2xCLENBQUMsQ0FDRixDQUFDO0FBRVcsUUFBQSxVQUFVLEdBQUcsSUFBQSwwQkFBZ0IsRUFDeEMscUJBQXFCLEVBQ3JCLEtBQUssRUFBRSxJQUFxRCxFQUFFLEVBQUU7SUFDOUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFHLENBQUMsSUFBSSxDQUFVLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDbEIsQ0FBQyxDQUNGLENBQUM7QUFFVyxRQUFBLGFBQWEsR0FBRyxJQUFBLDBCQUFnQixFQUMzQyx3QkFBd0IsRUFDeEIsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVELEVBQUUsRUFBRTtJQUN2RixNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUcsQ0FBQyxHQUFHLENBQVUsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakYsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQ2xCLENBQUMsQ0FDRixDQUFDO0FBRVcsUUFBQSxhQUFhLEdBQUcsSUFBQSwwQkFBZ0IsRUFDM0Msd0JBQXdCLEVBQ3hCLEtBQUssRUFBRSxFQUFVLEVBQUUsRUFBRTtJQUNuQixNQUFNLGVBQUcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEMsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQ0YsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLElBQUEscUJBQVcsRUFBQztJQUMvQixJQUFJLEVBQUUsVUFBVTtJQUNoQixZQUFZO0lBQ1osUUFBUSxFQUFFO1FBQ1IsYUFBYSxDQUFDLEtBQUs7WUFDakIsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDcEIsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDckIsQ0FBQztLQUNGO0lBQ0QsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQ3ZCLE9BQU87YUFDSixPQUFPLENBQUMscUJBQWEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDdEMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDckIsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDckIsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLHFCQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQWdDLEVBQUUsRUFBRTtZQUM1RSxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbEMsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLHFCQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2pELEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksWUFBWSxDQUFDO1FBQ3JELENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxrQkFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUE4QixFQUFFLEVBQUU7WUFDdkUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxxQkFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUE4QixFQUFFLEVBQUU7WUFDMUUsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdEUsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN2RCxDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMscUJBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBNkIsRUFBRSxFQUFFO1lBQ3pFLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFWSxxQkFBYSxHQUFLLFlBQVksQ0FBQyxPQUFPLGVBQUM7QUFDdEQsa0JBQWUsWUFBWSxDQUFDLE9BQU8sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvM2ktYTEtMjAyMS0wMTcvRGVza3RvcC9teS1wcm9qZWN0L3NyYy9yZW5kZXJlci9mZWF0dXJlcy9FeGVjdXRpb25NYW5hZ2VtZW50L3N0b3JlL2NvbW1lbnRTbGljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTbGljZSwgY3JlYXRlQXN5bmNUaHVuaywgUGF5bG9hZEFjdGlvbiB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IGFwaSBmcm9tICcuLi8uLi8uLi91dGlscy9heGlvcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWVudCB7XG4gIGlkOiBudW1iZXI7XG4gIG9iamVjdFR5cGU6ICd0ZXN0Y2FzZScgfCAnZXhlY3V0aW9uJyB8ICdkZWZlY3QnO1xuICBvYmplY3RJZDogbnVtYmVyO1xuICBhdXRob3I6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nO1xuICBtZW50aW9uczogc3RyaW5nW107XG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xuICB1cGRhdGVkQXQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIENvbW1lbnRTdGF0ZSB7XG4gIGNvbW1lbnRzOiBDb21tZW50W107XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIGVycm9yOiBzdHJpbmcgfCBudWxsO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IENvbW1lbnRTdGF0ZSA9IHtcbiAgY29tbWVudHM6IFtdLFxuICBsb2FkaW5nOiBmYWxzZSxcbiAgZXJyb3I6IG51bGwsXG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hDb21tZW50cyA9IGNyZWF0ZUFzeW5jVGh1bmsoXG4gICdjb21tZW50cy9mZXRjaENvbW1lbnRzJyxcbiAgYXN5bmMgKHsgb2JqZWN0VHlwZSwgb2JqZWN0SWQgfTogeyBvYmplY3RUeXBlOiBzdHJpbmc7IG9iamVjdElkOiBudW1iZXIgfSkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQ8Q29tbWVudFtdPihgL2FwaS9jb21tZW50cy8ke29iamVjdFR5cGV9LyR7b2JqZWN0SWR9YCk7XG4gICAgcmV0dXJuIHJlcy5kYXRhO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgYWRkQ29tbWVudCA9IGNyZWF0ZUFzeW5jVGh1bmsoXG4gICdjb21tZW50cy9hZGRDb21tZW50JyxcbiAgYXN5bmMgKGRhdGE6IE9taXQ8Q29tbWVudCwgJ2lkJyB8ICdjcmVhdGVkQXQnIHwgJ3VwZGF0ZWRBdCc+KSA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLnBvc3Q8Q29tbWVudD4oJy9hcGkvY29tbWVudHMnLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzLmRhdGE7XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVDb21tZW50ID0gY3JlYXRlQXN5bmNUaHVuayhcbiAgJ2NvbW1lbnRzL3VwZGF0ZUNvbW1lbnQnLFxuICBhc3luYyAoeyBpZCwgY29udGVudCwgbWVudGlvbnMgfTogeyBpZDogbnVtYmVyOyBjb250ZW50OiBzdHJpbmc7IG1lbnRpb25zOiBzdHJpbmdbXSB9KSA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLnB1dDxDb21tZW50PihgL2FwaS9jb21tZW50cy8ke2lkfWAsIHsgY29udGVudCwgbWVudGlvbnMgfSk7XG4gICAgcmV0dXJuIHJlcy5kYXRhO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgZGVsZXRlQ29tbWVudCA9IGNyZWF0ZUFzeW5jVGh1bmsoXG4gICdjb21tZW50cy9kZWxldGVDb21tZW50JyxcbiAgYXN5bmMgKGlkOiBudW1iZXIpID0+IHtcbiAgICBhd2FpdCBhcGkuZGVsZXRlKGAvYXBpL2NvbW1lbnRzLyR7aWR9YCk7XG4gICAgcmV0dXJuIGlkO1xuICB9XG4pO1xuXG5jb25zdCBjb21tZW50U2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdjb21tZW50cycsXG4gIGluaXRpYWxTdGF0ZSxcbiAgcmVkdWNlcnM6IHtcbiAgICBjbGVhckNvbW1lbnRzKHN0YXRlKSB7XG4gICAgICBzdGF0ZS5jb21tZW50cyA9IFtdO1xuICAgICAgc3RhdGUuZXJyb3IgPSBudWxsO1xuICAgIH0sXG4gIH0sXG4gIGV4dHJhUmVkdWNlcnM6IGJ1aWxkZXIgPT4ge1xuICAgIGJ1aWxkZXJcbiAgICAgIC5hZGRDYXNlKGZldGNoQ29tbWVudHMucGVuZGluZywgc3RhdGUgPT4ge1xuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBudWxsO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoQ29tbWVudHMuZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxDb21tZW50W10+KSA9PiB7XG4gICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuY29tbWVudHMgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShmZXRjaENvbW1lbnRzLnJlamVjdGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLmVycm9yLm1lc3NhZ2UgfHwgJ+uMk+q4gCDrtojrn6zsmKTquLAg7Iuk7YyoJztcbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShhZGRDb21tZW50LmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248Q29tbWVudD4pID0+IHtcbiAgICAgICAgc3RhdGUuY29tbWVudHMucHVzaChhY3Rpb24ucGF5bG9hZCk7XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UodXBkYXRlQ29tbWVudC5mdWxmaWxsZWQsIChzdGF0ZSwgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPENvbW1lbnQ+KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHN0YXRlLmNvbW1lbnRzLmZpbmRJbmRleChjID0+IGMuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmlkKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHN0YXRlLmNvbW1lbnRzW2lkeF0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShkZWxldGVDb21tZW50LmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyPikgPT4ge1xuICAgICAgICBzdGF0ZS5jb21tZW50cyA9IHN0YXRlLmNvbW1lbnRzLmZpbHRlcihjID0+IGMuaWQgIT09IGFjdGlvbi5wYXlsb2FkKTtcbiAgICAgIH0pO1xuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB7IGNsZWFyQ29tbWVudHMgfSA9IGNvbW1lbnRTbGljZS5hY3Rpb25zO1xuZXhwb3J0IGRlZmF1bHQgY29tbWVudFNsaWNlLnJlZHVjZXI7ICJdLCJ2ZXJzaW9uIjozfQ==