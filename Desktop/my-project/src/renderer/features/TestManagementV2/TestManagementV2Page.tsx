import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { FolderTree } from '../../../types/folder';
import FolderTreePanel from './components/FolderTreePanel';
import TestCaseList from './components/TestCaseList';
import Toolbar from './components/Toolbar';
import TestCaseCreateModal from './components/TestCaseCreateModal';
import TestCaseDetailPanel from './components/TestCaseDetailPanel';


const Container = styled.div`
  display: flex;
  height: 100vh;
  background: #ffffff;
`;

const TreePanel = styled.div<{ isCollapsed: boolean; width: number }>`
  width: ${props => props.isCollapsed ? '50px' : `${props.width}px`};
  border-right: 1px solid #e5e7eb;
  border-top: 1px solid #e5e7eb;
  background: #f9fafb;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: width 0.3s ease;
  position: relative;
`;

const ContentPanel = styled.div`
  flex: 1;
  display: flex;
  flex-direction: row;
  overflow: hidden;
  min-width: 0;
`;

const ListPanel = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  min-width: 0;
  border-top: 1px solid #e5e7eb;
`;

const ResizeHandle = styled.div`
  width: 4px;
  background: transparent;
  cursor: col-resize;
  position: absolute;
  right: -2px;
  top: 0;
  bottom: 0;
  z-index: 10;
  transition: background-color 0.2s;

  &:hover {
    background: #3b82f6;
  }

  &:active {
    background: #2563eb;
  }
`;

const TestManagementV2Page: React.FC = () => {
  const [folders, setFolders] = useState<FolderTree[]>([]);
  const [selectedFolder, setSelectedFolder] = useState<FolderTree | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isTreeCollapsed, setIsTreeCollapsed] = useState(false);
  const [treeWidth, setTreeWidth] = useState(280);
  const [isResizing, setIsResizing] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);
  const [testCases, setTestCases] = useState<any[]>([]);
  const [selectedTestCase, setSelectedTestCase] = useState<any>(null);
  const [isDetailPanelOpen, setIsDetailPanelOpen] = useState(false);
  const [detailPanelWidth, setDetailPanelWidth] = useState(400); // ÏÉÅÏÑ∏ Ìå®ÎÑê Í∏∞Î≥∏ ÎÑàÎπÑ
  const [expandedFolders, setExpandedFolders] = useState<Set<number>>(new Set()); // Ìè¥Îçî ÌôïÏû• ÏÉÅÌÉú Í¥ÄÎ¶¨

  useEffect(() => {
    loadFolderTree();
  }, []);

  const loadFolderTree = async () => {
    try {
      setLoading(true);
      const response = await fetch('http://localhost:3001/api/folders/tree?projectId=1');
      if (!response.ok) {
        throw new Error('Ìè¥Îçî Ìä∏Î¶¨Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      const data = await response.json();
      setFolders(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  const generateUniqueFolderName = (parentId?: number): string => {
    const baseName = 'ÏÉàÌè¥Îçî';
    const existingFolders = getAllFoldersInParent(folders, parentId);
    
    // Í∞ôÏùÄ Î∂ÄÎ™® Ìè¥Îçî ÎÇ¥ÏóêÏÑú "ÏÉàÌè¥Îçî"Î°ú ÏãúÏûëÌïòÎäî Ìè¥ÎçîÎì§ Ï∞æÍ∏∞
    const newFolders = existingFolders.filter(folder => 
      folder.name.startsWith(baseName)
    );
    
    if (newFolders.length === 0) {
      return baseName;
    }
    
    // Î≤àÌò∏ Ï∂îÏ∂ú Î∞è ÏµúÎåÄÍ∞í Ï∞æÍ∏∞
    const numbers = newFolders.map(folder => {
      const match = folder.name.match(new RegExp(`^${baseName}(\\d+)$`));
      return match ? parseInt(match[1]) : 0;
    });
    
    const maxNumber = Math.max(...numbers, 0);
    return `${baseName}${maxNumber + 1}`;
  };

  const getAllFoldersInParent = (folders: FolderTree[], parentId?: number): FolderTree[] => {
    const result: FolderTree[] = [];
    
    const traverse = (folderList: FolderTree[]) => {
      for (const folder of folderList) {
        if (folder.parentId === parentId) {
          result.push(folder);
        }
        if (folder.children && folder.children.length > 0) {
          traverse(folder.children);
        }
      }
    };
    
    traverse(folders);
    return result;
  };

  const handleCreateFolder = async (parentId?: number) => {
    try {
      const folderName = generateUniqueFolderName(parentId);
      console.log('üìÅ ÏÉùÏÑ±Ìï† Ìè¥Îçî Ïù¥Î¶Ñ:', folderName, 'Î∂ÄÎ™® ID:', parentId);

      const response = await fetch('http://localhost:3001/api/folders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: folderName,
          parentId: parentId || null,
          projectId: 1
        }),
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const newFolder = await response.json();
      console.log('üìÅ ÏÉà Ìè¥Îçî ÏÉùÏÑ±Îê®:', newFolder);

      // Î∂ÄÎ™® Ìè¥ÎçîÍ∞Ä ÏûàÏúºÎ©¥ ÌôïÏû• ÏÉÅÌÉúÏóê Ï∂îÍ∞Ä
      if (parentId) {
        console.log('üìÅ Î∂ÄÎ™® Ìè¥Îçî ÌôïÏû• ÏÉÅÌÉú Ï∂îÍ∞Ä:', parentId);
        setExpandedFolders(prev => {
          const newSet = new Set(prev);
          newSet.add(parentId);
          console.log('üìÅ ÌôïÏû•Îêú Ìè¥Îçî Î™©Î°ù (ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏):', Array.from(newSet));
          return newSet;
        });
      }

      // Ìè¥Îçî Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      await loadFolderTree();

      // ÏÉàÎ°ú ÏÉùÏÑ±Îêú Ìè¥ÎçîÎ•º ÏÑ†ÌÉù
      setSelectedFolder(newFolder);
    } catch (error) {
      console.error('Ìè¥Îçî ÏÉùÏÑ± Ïò§Î•ò:', error);
      alert('Ìè¥Îçî ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
    }
  };



  const handleFolderSelect = (folder: FolderTree) => {
    console.log('üìÅ Ìè¥Îçî ÏÑ†ÌÉùÎê®:', folder.name, 'ID:', folder.id);
    setSelectedFolder(folder);
    // Ìè¥Îçî Î≥ÄÍ≤Ω Ïãú ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ÏÑ†ÌÉù Ìï¥Ï†ú Î∞è ÏÉÅÏÑ∏ Ìå®ÎÑê Îã´Í∏∞
    setSelectedTestCase(null);
    setIsDetailPanelOpen(false);
  };





  const handleRename = async (folderId: number, newName: string) => {
    try {
      const response = await fetch(`http://localhost:3001/api/folders/${folderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newName
        }),
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      await loadFolderTree();
    } catch (error) {
      console.error('Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ïò§Î•ò:', error);
      alert('Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
    }
  };

  const handleDelete = async (folderId: number) => {
    if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ Ìè¥ÎçîÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? ÌïòÏúÑ Ìè¥ÎçîÏôÄ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê©ÎãàÎã§.')) {
      return;
    }

    try {
      const response = await fetch(`http://localhost:3001/api/folders/${folderId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      await loadFolderTree();
      
      // ÏÇ≠Ï†úÎêú Ìè¥ÎçîÍ∞Ä ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ìè¥ÎçîÏòÄÎã§Î©¥ ÏÑ†ÌÉù Ìï¥Ï†ú
      if (selectedFolder?.id === folderId) {
        setSelectedFolder(null);
      }
    } catch (error) {
      console.error('Ìè¥Îçî ÏÇ≠Ï†ú Ïò§Î•ò:', error);
      alert('Ìè¥Îçî ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
    }
  };

  const handleCreateTestCase = (testCaseData: any) => {
    console.log('ÏÉà ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ÏÉùÏÑ±:', testCaseData);
    
    // ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ID ÏûêÎèô ÏÉùÏÑ± (TC-001, TC-002 ÌòïÏãù)
    const generateTestCaseId = () => {
      const existingIds = testCases.map(tc => {
        const match = tc.id?.toString().match(/^TC-(\d+)$/);
        return match ? parseInt(match[1]) : 0;
      });
      const maxId = Math.max(0, ...existingIds);
      return `TC-${String(maxId + 1).padStart(3, '0')}`;
    };
    
    // ÏÉà ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Í∞ùÏ≤¥ ÏÉùÏÑ±
    const newTestCase = {
      id: generateTestCaseId(), // ÏûêÎèô ÏÉùÏÑ±Îêú ID
      title: testCaseData.title,
      description: testCaseData.description,
      priority: testCaseData.priority,
      type: testCaseData.type,
      status: testCaseData.status,
      preconditions: testCaseData.preconditions,
      steps: testCaseData.steps.filter((step: string) => step.trim() !== ''), // Îπà Îã®Í≥Ñ Ï†úÍ±∞
      expectedResult: testCaseData.expectedResult,
      createdBy: 'admin',
      createdAt: new Date(),
      updatedAt: new Date(),
      folderId: selectedFolder?.id
    };
    
    // ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Î™©Î°ùÏóê Ï∂îÍ∞Ä
    setTestCases(prev => [...prev, newTestCase]);
    
    // TODO: API Ìò∏Ï∂úÌïòÏó¨ ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Ï†ÄÏû•
    console.log('ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä Î™©Î°ùÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§:', newTestCase);
  };

  const handleTestCaseSelect = (testCase: any) => {
    console.log('ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ÏÑ†ÌÉùÎê®:', testCase.title);
    setSelectedTestCase(testCase);
    setIsDetailPanelOpen(true);
  };

  const handleTestCaseUpdate = (updatedTestCase: any) => {
    console.log('ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏:', updatedTestCase);
    
    // ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Î™©Î°ùÏóêÏÑú Ìï¥Îãπ Ìï≠Î™© ÏóÖÎç∞Ïù¥Ìä∏
    setTestCases(prev => prev.map(tc => 
      tc.id === updatedTestCase.id ? updatedTestCase : tc
    ));
    
    // ÏÑ†ÌÉùÎêú ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    setSelectedTestCase(updatedTestCase);
    
    // TODO: API Ìò∏Ï∂úÌïòÏó¨ ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
    console.log('ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§:', updatedTestCase);
  };

  const handleMoveToFolder = (testCaseId: string, targetFolderId: string) => {
    console.log('üîÑ handleMoveToFolder Ìò∏Ï∂úÎê®:', { testCaseId, targetFolderId });
    
    // ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
    setTestCases(prev => {
      const updated = prev.map(tc => 
        tc.id === testCaseId 
          ? { ...tc, folderId: targetFolderId }
          : tc
      );
      console.log('üìù ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏Îê®:', updated);
      return updated;
    });
    
    // ÏÑ†ÌÉùÎêú ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä Ïù¥ÎèôÎêú Í≤ΩÏö∞ Ìï¥Îãπ Ìè¥ÎçîÎ°ú Ïù¥Îèô
    if (selectedTestCase?.id === testCaseId) {
      console.log('üéØ ÏÑ†ÌÉùÎêú ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä Ïù¥ÎèôÎê®, Ìè¥Îçî Ï∞æÎäî Ï§ë...');
      
      // Ïù¥ÎèôÎêú Ìè¥Îçî Ï∞æÍ∏∞
      const findFolderById = (folders: FolderTree[], id: string): FolderTree | null => {
        for (const folder of folders) {
          if (folder.id.toString() === id) {
            return folder;
          }
          if (folder.children.length > 0) {
            const found = findFolderById(folder.children, id);
            if (found) return found;
          }
        }
        return null;
      };
      
      const targetFolder = findFolderById(folders, targetFolderId);
      console.log('üîç Ï∞æÏùÄ ÎåÄÏÉÅ Ìè¥Îçî:', targetFolder);
      
      if (targetFolder) {
        // Ìï¥Îãπ Ìè¥ÎçîÎ°ú Ïù¥Îèô
        console.log('üìÅ Ìè¥Îçî Ïù¥Îèô Ï§ë:', targetFolder.name);
        setSelectedFolder(targetFolder);
        
        // ÏÑ†ÌÉùÎêú ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        setSelectedTestCase(prev => prev ? { ...prev, folderId: targetFolderId } : null);
        
        console.log('‚úÖ ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä Ïù¥ÎèôÎêú Ìè¥ÎçîÎ°ú Ïù¥Îèô ÏôÑÎ£å:', targetFolder.name);
      } else {
        console.error('‚ùå ÎåÄÏÉÅ Ìè¥ÎçîÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', targetFolderId);
      }
    }
    
    // TODO: API Ìò∏Ï∂úÌïòÏó¨ ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§ Ìè¥Îçî Ïù¥Îèô
    console.log('ÌÖåÏä§Ìä∏ÏºÄÏù¥Ïä§Í∞Ä Ìè¥ÎçîÎ°ú Ïù¥ÎèôÎêòÏóàÏäµÎãàÎã§:', { testCaseId, targetFolderId });
  };

  // Ìè¥Îçî Ìä∏Î¶¨Î•º Í≥ÑÏ∏µ Íµ¨Ï°∞Î•º Ïú†ÏßÄÌïòÎ©¥ÏÑú ÌèâÎ©¥ÌôîÌïòÎäî Ìï®Ïàò
  const flattenFolderTree = (folders: FolderTree[]): any[] => {
    const result: any[] = [];
    
    const flatten = (folderList: FolderTree[], level: number = 0) => {
      folderList.forEach(folder => {
        result.push({
          id: folder.id.toString(),
          name: folder.name,
          parentId: folder.parentId?.toString(),
          level: level
        });
        
        if (folder.children && folder.children.length > 0) {
          flatten(folder.children, level + 1);
        }
      });
    };
    
    flatten(folders);
    return result;
  };

  // ÌÅ¨Í∏∞ Ï°∞Ï†à Ìï∏Îì§Îü¨


    // Ìè¥ÎçîÎ™Ö Ï§ëÎ≥µ Ïãú ÏûêÎèô Î≤àÌò∏ ÏÉùÏÑ± Ìï®Ïàò




  const handleFolderMove = async (folderId: number, targetParentId: number | null, orderIndex: number) => {
    try {
      const response = await fetch(`http://localhost:3001/api/folders/${folderId}/move`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          targetParentId,
          orderIndex
        }),
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî Ïù¥ÎèôÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // Ìè¥Îçî Ïù¥ÎèôÏùÄ Íµ¨Ï°∞Í∞Ä Î≥ÄÍ≤ΩÎêòÎØÄÎ°ú Ï†ÑÏ≤¥ ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÌïÑÏöî
      await loadFolderTree();
    } catch (err) {
      console.error('Ìè¥Îçî Ïù¥Îèô Ïò§Î•ò:', err);
    }
  };

  // Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
  const handleFolderRename = async (folderId: number, newName: string) => {
    try {
      const response = await fetch(`http://localhost:3001/api/folders/${folderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newName
        }),
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤Ω ÌõÑ Ìä∏Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
      await loadFolderTree();
    } catch (err) {
      console.error('Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ïò§Î•ò:', err);
    }
  };

  // Ìè¥Îçî ÏÇ≠Ï†ú
  const handleFolderDelete = async (folderId: number) => {
    try {
      const response = await fetch(`http://localhost:3001/api/folders/${folderId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Ìè¥Îçî ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      // ÏÇ≠Ï†úÎêú Ìè¥ÎçîÍ∞Ä ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ìè¥ÎçîÏù∏ Í≤ΩÏö∞ ÏÑ†ÌÉù Ìï¥Ï†ú
      if (selectedFolder?.id === folderId) {
        setSelectedFolder(null);
      }

      // Ìè¥Îçî ÏÇ≠Ï†ú ÌõÑ Ìä∏Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
      await loadFolderTree();
    } catch (err) {
      console.error('Ìè¥Îçî ÏÇ≠Ï†ú Ïò§Î•ò:', err);
    }
  };

  const handleTreeCollapse = (collapsed: boolean) => {
    setIsTreeCollapsed(collapsed);
  };

  // ÏÉÅÏÑ∏ Ìå®ÎÑê ÌÅ¨Í∏∞ Ï°∞Ï†àÏö© Ìï∏Îì§Îü¨
  const handleDetailPanelResizeStart = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';
  };

  const handleDetailPanelResizeMove = useCallback((e: MouseEvent) => {
    if (!isResizing) return;
    
    const container = document.querySelector('.content-panel') as HTMLElement;
    if (!container) return;
    
    const containerRect = container.getBoundingClientRect();
    const newWidth = containerRect.right - e.clientX;
    
    // ÏµúÏÜå/ÏµúÎåÄ ÎÑàÎπÑ Ï†úÌïú
    const minWidth = 300;
    const maxWidth = containerRect.width * 0.7; // Ï†ÑÏ≤¥ ÎÑàÎπÑÏùò 70%ÍπåÏßÄ
    
    if (newWidth >= minWidth && newWidth <= maxWidth) {
      setDetailPanelWidth(newWidth);
    }
  }, [isResizing]);

  const handleDetailPanelResizeEnd = useCallback(() => {
    setIsResizing(false);
    document.body.style.cursor = '';
    document.body.style.userSelect = '';
  }, []);

  // ÏÉÅÏÑ∏ Ìå®ÎÑê ÌÅ¨Í∏∞ Ï°∞Ï†à Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
  useEffect(() => {
    if (isResizing) {
      document.addEventListener('mousemove', handleDetailPanelResizeMove);
      document.addEventListener('mouseup', handleDetailPanelResizeEnd);
      
      return () => {
        document.removeEventListener('mousemove', handleDetailPanelResizeMove);
        document.removeEventListener('mouseup', handleDetailPanelResizeEnd);
      };
    }
  }, [isResizing, handleDetailPanelResizeMove, handleDetailPanelResizeEnd]);

  // Ìè¥Îçî Ìä∏Î¶¨ ÌÅ¨Í∏∞ Ï°∞Ï†àÏö© Ìï∏Îì§Îü¨ (Í∏∞Ï°¥)
  const handleResizeStart = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';
  };

  const handleResizeMove = (e: MouseEvent) => {
    if (!isResizing) return;
    
    const container = document.querySelector('[data-testid="test-management-container"]') as HTMLElement;
    if (!container) return;
    
    const containerRect = container.getBoundingClientRect();
    const newWidth = e.clientX - containerRect.left;
    
    // ÏµúÏÜå/ÏµúÎåÄ ÎÑàÎπÑ Ï†úÌïú
    const minWidth = 200;
    const maxWidth = Math.min(600, containerRect.width * 0.6);
    
    if (newWidth >= minWidth && newWidth <= maxWidth) {
      setTreeWidth(newWidth);
    }
  };

  const handleResizeEnd = () => {
    setIsResizing(false);
    document.body.style.cursor = '';
    document.body.style.userSelect = '';
  };

  useEffect(() => {
    if (isResizing) {
      document.addEventListener('mousemove', handleResizeMove);
      document.addEventListener('mouseup', handleResizeEnd);
      
      return () => {
        document.removeEventListener('mousemove', handleResizeMove);
        document.removeEventListener('mouseup', handleResizeEnd);
      };
    }
  }, [isResizing]);

  if (loading) {
    return (
      <Container>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%' }}>
          <div>Ìè¥Îçî Ìä∏Î¶¨Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
        </div>
      </Container>
    );
  }

  if (error) {
    return (
      <Container>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', color: 'red' }}>
          <div>Ïò§Î•ò: {error}</div>
        </div>
      </Container>
    );
  }

  return (
    <Container data-testid="test-management-container">
      <TreePanel isCollapsed={isTreeCollapsed} width={treeWidth}>
        <FolderTreePanel
          folders={folders}
          selectedFolder={selectedFolder}
          onFolderSelect={handleFolderSelect}
          onCreateFolder={handleCreateFolder}
          onFolderMove={handleFolderMove}
          onRename={handleFolderRename}
          onDelete={handleFolderDelete}
          onCollapse={handleTreeCollapse}
          expandedFolders={expandedFolders}
          setExpandedFolders={setExpandedFolders}
        />
        {!isTreeCollapsed && (
          <ResizeHandle
            onMouseDown={handleResizeStart}
            title="Ìè¥Îçî Ìå®ÎÑê ÌÅ¨Í∏∞ Ï°∞Ï†ï"
          />
        )}
      </TreePanel>
      <ContentPanel className="content-panel">
        <ListPanel>
          <Toolbar
            selectedFolder={selectedFolder}
            onCreateTestCase={() => setIsCreateModalOpen(true)}
          />
          <TestCaseList
            selectedFolder={selectedFolder}
            testCases={testCases}
            selectedTestCase={selectedTestCase}
            onCreateTestCase={() => setIsCreateModalOpen(true)}
            onTestCaseSelect={handleTestCaseSelect}
          />
        </ListPanel>
        
        <TestCaseDetailPanel
          testCase={selectedTestCase}
          isOpen={isDetailPanelOpen}
          onClose={() => setIsDetailPanelOpen(false)}
          width={detailPanelWidth}
          onResizeStart={handleDetailPanelResizeStart}
          onUpdate={handleTestCaseUpdate}
          onMoveToFolder={handleMoveToFolder}
          folders={flattenFolderTree(folders)}
        />
      </ContentPanel>
      
      <TestCaseCreateModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateTestCase}
        selectedFolderId={selectedFolder?.id}
      />
      

      
    </Container>
  );
};

export default TestManagementV2Page;
